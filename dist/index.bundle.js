!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=366)}([function(e,t,n){e.exports=n(307)()},function(e,t,n){"use strict";e.exports=n(169)},function(e,t,n){var r=n(20),o=n(7);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t){e.exports=function(e){return null==e}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(12),o=n(33),i=n(84),a=n(88),u=n(91),c=function(e,t,n){var l,s,f,p,h=e&c.F,d=e&c.G,y=e&c.S,v=e&c.P,m=e&c.B,g=d?r:y?r[t]||(r[t]={}):(r[t]||{}).prototype,b=d?o:o[t]||(o[t]={}),x=b.prototype||(b.prototype={});for(l in d&&(n=t),n)f=((s=!h&&g&&void 0!==g[l])?g:n)[l],p=m&&s?u(f,r):v&&"function"==typeof f?u(Function.call,f):f,g&&a(g,l,f,e&c.U),b[l]!=f&&i(b,l,p),v&&x[l]!=f&&(x[l]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(111);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},function(e,t,n){var r=n(98),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){var r=n(125),o=n(336),i=n(28);e.exports=function(e){return e&&e.length?r(e,i,o):void 0}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(235),o=n(289),i=n(28),a=n(5),u=n(298);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?a(e)?o(e[0],e[1]):r(e):u(e)}},function(e,t,n){var r=n(20),o=n(5),i=n(16);e.exports=function(e){return"string"==typeof e||!o(e)&&i(e)&&"[object String]"==r(e)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){(function(t){for(var r=n(309),o="undefined"==typeof window?t:window,i=["moz","webkit"],a="AnimationFrame",u=o["request"+a],c=o["cancel"+a]||o["cancelRequest"+a],l=0;!u&&l<i.length;l++)u=o[i[l]+"Request"+a],c=o[i[l]+"Cancel"+a]||o[i[l]+"CancelRequest"+a];if(!u||!c){var s=0,f=0,p=[];u=function(e){if(0===p.length){var t=r(),n=Math.max(0,1e3/60-(t-s));s=n+t,setTimeout((function(){var e=p.slice(0);p.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(n))}return p.push({handle:++f,callback:e,cancelled:!1}),f},c=function(e){for(var t=0;t<p.length;t++)p[t].handle===e&&(p[t].cancelled=!0)}}e.exports=function(e){return u.call(o,e)},e.exports.cancel=function(){c.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=u,e.cancelAnimationFrame=c}}).call(this,n(63))},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function u(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],c=t.base?i[0]+t.base:i[0],l=n[c]||0,s="".concat(c," ").concat(l);n[c]=l+1;var f=u(s),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:s,updater:v(p,t),references:1}),r.push(s)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function h(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,y=0;function v(e,t){var n,r,o;if(t.singleton){var i=y++;n=d||(d=l(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=l(t),r=h.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=u(n[r]);a[o].references--}for(var i=c(e,t),l=0;l<n.length;l++){var s=u(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=i}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,u,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){var r=n(34),o=n(233),i=n(234),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(247),o=n(250);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){var r=n(67);e.exports=function(e,t){return r(e,t)}},function(e,t,n){var r=n(29);e.exports=function(e){return r(e)&&e!=+e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(15)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(2),o=n(73);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(20),o=n(16);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var r=n(20),o=n(16);e.exports=function(e){return"number"==typeof e||o(e)&&"[object Number]"==r(e)}},function(e,t,n){var r=n(123),o=n(332),i=n(116),a=n(47),u=i((function(e,t){if(null==e)return[];var n=t.length;return n>1&&a(e,t[0],t[1])?t=[]:n>2&&a(t[0],t[1],t[2])&&(t=[t[0]]),o(e,r(t,1),[])}));e.exports=u},function(e,t,n){var r=n(13),o=n(301);e.exports=function(e,t){return e&&e.length?o(e,r(t,2)):[]}},function(e,t,n){var r=n(354)();e.exports=r},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(10).Symbol;e.exports=r},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(125),o=n(337),i=n(28);e.exports=function(e){return e&&e.length?r(e,i,o):void 0}},function(e,t,n){var r=n(24);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(237),o=n(238),i=n(239),a=n(240),u=n(241);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,e.exports=c},function(e,t,n){var r=n(64);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(21)(Object,"create");e.exports=r},function(e,t,n){var r=n(259);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(274),o=n(280),i=n(26);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t,n){var r=n(27);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(e,t,n){var r=n(118),o=n(323)(r);e.exports=o},function(e,t,n){var r=n(64),o=n(26),i=n(72),a=n(7);e.exports=function(e,t,n){if(!a(n))return!1;var u=typeof t;return!!("number"==u?o(n)&&i(t,n.length):"string"==u&&t in n)&&r(n[t],e)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(170)},function(e,t,n){"use strict";var r=u(n(324)),o=u(n(329)),i=u(n(122)),a=u(n(119));function u(e){return e&&e.__esModule?e:{default:e}}e.exports={Transition:a.default,TransitionGroup:i.default,ReplaceTransition:o.default,CSSTransition:r.default}},function(e,t,n){var r=n(349),o=n(350),i=n(13),a=n(5),u=n(47);e.exports=function(e,t,n){var c=a(e)?r:o;return n&&u(e,t,n)&&(t=void 0),c(e,i(t,3))}},function(e,t,n){var r,o=n(341),i=n(342),a=n(344),u=/(\+|\-|\*|\\|[^a-z]|)(\s*)(\()/g;e.exports=function(e,t){function n(e,i,c){if(r++>100)throw r=0,new Error("Call stack overflow for "+c);if(""===e)throw new Error(i+"(): '"+c+"' must contain a non-whitespace string");var l=function(e){var t=[],n=[],r=/[\.0-9]([%a-z]+)/gi,o=r.exec(e);for(;o;)o&&o[1]&&(-1===n.indexOf(o[1].toLowerCase())&&(t.push(o[1]),n.push(o[1].toLowerCase())),o=r.exec(e));return t}(e=function(e,t){e=e.replace(/((?:\-[a-z]+\-)?calc)/g,"");var r,i="",a=e;for(;r=u.exec(a);){r[0].index>0&&(i+=a.substring(0,r[0].index));var c=o("(",")",a.substring([0].index));if(""===c.body)throw new Error("'"+e+"' must contain a non-whitespace string");var l=n(c.body,"",t);i+=c.pre+l,a=c.post}return i+a}(e,c));if(l.length>1||e.indexOf("var(")>-1)return i+"("+e+")";var s=l[0]||"";"%"===s&&(e=e.replace(/\b[0-9\.]+%/g,(function(e){return.01*parseFloat(e.slice(0,-1))})));var f,p=e.replace(new RegExp(s,"gi"),"");try{f=a.eval(p)}catch(t){return i+"("+e+")"}return"%"===s&&(f*=100),(i.length||"%"===s)&&(f=Math.round(f*t)/t),f+=s}return r=0,t=Math.pow(10,void 0===t?5:t),e=e.replace(/\n+/g," "),i(e,/((?:\-[a-z]+\-)?calc)\(/,n)}},,function(e,t,n){var r=n(37),o=n(85),i=n(54),a=Object.defineProperty;t.f=n(25)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(24);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(210),o=n(59);e.exports=function(e){return r(o(e))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(6),o=n(59),i=n(15),a=n(62),u="["+a+"]",c=RegExp("^"+u+u+"*"),l=RegExp(u+u+"*$"),s=function(e,t,n){var o={},u=i((function(){return!!a[e]()||"​"!="​"[e]()})),c=o[e]=u?t(f):a[e];n&&(o[n]=c),r(r.P+r.F*u,"String",o)},f=s.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(c,"")),2&t&&(e=e.replace(l,"")),e};e.exports=s},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(21)(n(10),"Map");e.exports=r},function(e,t,n){var r=n(251),o=n(258),i=n(260),a=n(261),u=n(262);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,e.exports=c},function(e,t,n){var r=n(263),o=n(16);e.exports=function e(t,n,i,a,u){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,i,a,e,u))}},function(e,t,n){var r=n(66),o=n(264),i=n(265);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,e.exports=a},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(276),o=n(16),i=Object.prototype,a=i.hasOwnProperty,u=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!u.call(e,"callee")};e.exports=c},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){var r=n(5),o=n(27),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(a.test(e)||!i.test(e)||null!=t&&e in Object(t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"getTickValues",{enumerable:!0,get:function(){return r.getTickValues}}),Object.defineProperty(t,"getNiceTickValues",{enumerable:!0,get:function(){return r.getNiceTickValues}}),Object.defineProperty(t,"getTickValuesFixedDomain",{enumerable:!0,get:function(){return r.getTickValuesFixedDomain}});var r=n(339)},function(e,t,n){var r=n(359),o=n(118),i=n(13);e.exports=function(e,t){var n={};return t=i(t,3),o(e,(function(e,o,i){r(n,o,t(e,o,i))})),n}},function(e,t,n){"use strict";(function(e){var r=n(1),o=n.n(r),i=n(8),a=n(0),u=n.n(a),c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function l(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,a,s="__create-react-context-"+((c[a="__global_unique_id__"]=(c[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=l(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=u.a.object.isRequired,n);var p=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return p.contextTypes=((o={})[s]=u.a.object,o),{Provider:f,Consumer:p}};t.a=s}).call(this,n(63))},function(e,t,n){var r=n(360);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],h=n.index;if(u+=e.slice(a,h),a=h+f.length,p)u+=p[1];else{var d=e[a],y=n[2],v=n[3],m=n[4],g=n[5],b=n[6],x=n[7];u&&(r.push(u),u="");var w=null!=y&&null!=d&&d!==y,O="+"===b||"*"===b,k="?"===b||"*"===b,E=n[2]||s,S=m||g;r.push({name:v||i++,prefix:y||"",delimiter:E,optional:k,repeat:O,partial:w,asterisk:!!x,pattern:S?l(S):x?".*":"[^"+c(E)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},c=(o||{}).pretty?a:encodeURIComponent,l=0;l<e.length;l++){var s=e[l];if("string"!=typeof s){var f,p=u[s.name];if(null==p){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var h=0;h<p.length;h++){if(f=c(p[h]),!n[l].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===h?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):c(p),!n[l].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=c(l);else{var p=c(l.prefix),h="(?:"+l.pattern+")";t.push(l),l.repeat&&(h+="(?:"+p+h+")*"),a+=h=l.optional?l.partial?p+"("+h+")?":"(?:"+p+"("+h+"))?":p+"("+h+")"}}var d=c(n.delimiter||"/"),y=a.slice(-d.length)===d;return o||(a=(y?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=i?"$":o&&y?"":"(?="+d+"|$)",s(new RegExp("^"+a,f(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,c=a(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(c[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(c[u[f]]=n[u[f]])}}return c}},function(e,t,n){var r=n(53),o=n(87);e.exports=n(25)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){e.exports=!n(25)&&!n(15)((function(){return 7!=Object.defineProperty(n(86)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(24),o=n(12).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(12),o=n(84),i=n(38),a=n(89)("src"),u=n(185),c=(""+u).split("toString");n(33).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var l="function"==typeof n;l&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(l&&(i(n,a)||o(n,a,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||u.call(this)}))},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(33),o=n(12),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(186)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(187);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(209),o=n(87),i=n(58),a=n(54),u=n(38),c=n(85),l=Object.getOwnPropertyDescriptor;t.f=n(25)?l:function(e,t){if(e=i(e),t=a(t,!0),c)try{return l(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(38),o=n(58),i=n(212)(!1),a=n(95)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),c=0,l=[];for(n in u)n!=a&&r(u,n)&&l.push(n);for(;t.length>c;)r(u,n=t[c++])&&(~i(l,n)||l.push(n));return l}},function(e,t,n){var r=n(90)("keys"),o=n(89);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(57);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(24),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(63))},function(e,t,n){var r=n(40),o=n(242),i=n(243),a=n(244),u=n(245),c=n(246);function l(e){var t=this.__data__=new r(e);this.size=t.size}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=u,l.prototype.set=c,e.exports=l},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(68),o=n(102),i=n(69);e.exports=function(e,t,n,a,u,c){var l=1&n,s=e.length,f=t.length;if(s!=f&&!(l&&f>s))return!1;var p=c.get(e);if(p&&c.get(t))return p==t;var h=-1,d=!0,y=2&n?new r:void 0;for(c.set(e,t),c.set(t,e);++h<s;){var v=e[h],m=t[h];if(a)var g=l?a(m,v,h,t,e,c):a(v,m,h,e,t,c);if(void 0!==g){if(g)continue;d=!1;break}if(y){if(!o(t,(function(e,t){if(!i(y,t)&&(v===e||u(v,e,n,a,c)))return y.push(t)}))){d=!1;break}}else if(v!==m&&!u(v,m,n,a,c)){d=!1;break}}return c.delete(e),c.delete(t),d}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},function(e,t,n){(function(e){var r=n(10),o=n(277),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===i?r.Buffer:void 0,c=(u?u.isBuffer:void 0)||o;e.exports=c}).call(this,n(106)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(278),o=n(74),i=n(279),a=i&&i.isTypedArray,u=a?o(a):r;e.exports=u},function(e,t,n){var r=n(21)(n(10),"Set");e.exports=r},function(e,t,n){var r=n(7);e.exports=function(e){return e==e&&!r(e)}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}},function(e,t,n){var r=n(112),o=n(45);e.exports=function(e,t){for(var n=0,i=(t=r(t,e)).length;null!=e&&n<i;)e=e[o(t[n++])];return n&&n==i?e:void 0}},function(e,t,n){var r=n(5),o=n(75),i=n(290),a=n(293);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(a(e))}},function(e,t,n){var r=n(302);e.exports=function(e,t){return!!(null==e?0:e.length)&&r(e,t,0)>-1}},function(e,t){e.exports=function(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}},function(e,t){e.exports=function(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}},function(e,t,n){var r=n(28),o=n(312),i=n(314);e.exports=function(e,t){return i(o(e,t,r),e+"")}},function(e,t,n){var r=n(21),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(321),o=n(44);e.exports=function(e,t){return e&&r(e,t,o)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),o=u(n(1)),i=u(n(48)),a=n(120);n(121);function u(e){return e&&e.__esModule?e:{default:e}}t.UNMOUNTED="unmounted";t.EXITED="exited";t.ENTERING="entering";t.ENTERED="entered";t.EXITING="exiting";var c=function(e){var t,n;function r(t,n){var r;r=e.call(this,t,n)||this;var o,i=n.transitionGroup,a=i&&!i.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=i.default.findDOMNode(this);"entering"===t?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},a.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;t||r?(this.props.onEnter(e,o),this.safeSetState({status:"entering"},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:"entered"},(function(){n.props.onEntered(e,o)}))}))}))):this.safeSetState({status:"entered"},(function(){n.props.onEntered(e)}))},a.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:"exited"},(function(){t.props.onExited(e)}))},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var i=o.default.Children.only(n);return o.default.cloneElement(i,r)},r}(o.default.Component);function l(){}c.contextTypes={transitionGroup:r.object},c.childContextTypes={transitionGroup:function(){}},c.propTypes={},c.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:l,onEntering:l,onEntered:l,onExit:l,onExiting:l,onExited:l},c.UNMOUNTED=0,c.EXITED=1,c.ENTERING=2,c.ENTERED=3,c.EXITING=4;var s=(0,a.polyfill)(c);t.default=s},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var c=e.displayName||e.name,l="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+c+" uses "+l+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",(function(){return a})),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0;var r;(r=n(0))&&r.__esModule;t.timeoutsShape=null;t.classNamesShape=null},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=u(n(0)),o=u(n(1)),i=n(120),a=n(330);function u(e){return e&&e.__esModule?e:{default:e}}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var s=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},f=function(e){var t,n;function r(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(l(l(r)));return r.state={handleExited:o,firstRender:!0},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},i.componentDidMount=function(){this.appeared=!0,this.mounted=!0},i.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,a.getInitialChildMapping)(e,r):(0,a.getNextChildMapping)(e,n,r),firstRender:!1}},i.handleExited=function(e,t){var n=(0,a.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=c({},t.children);return delete n[e.key],{children:n}})))},i.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["component","childFactory"]),i=s(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i:o.default.createElement(t,r,i)},r}(o.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(e){return e}};var p=(0,i.polyfill)(f);t.default=p,e.exports=t.default},function(e,t,n){var r=n(103),o=n(331);e.exports=function e(t,n,i,a,u){var c=-1,l=t.length;for(i||(i=o),u||(u=[]);++c<l;){var s=t[c];n>0&&i(s)?n>1?e(s,n-1,i,a,u):r(u,s):a||(u[u.length]=s)}return u}},function(e,t,n){var r=n(46),o=n(26);e.exports=function(e,t){var n=-1,i=o(e)?Array(e.length):[];return r(e,(function(e,r,o){i[++n]=t(e,r,o)})),i}},function(e,t,n){var r=n(27);e.exports=function(e,t,n){for(var o=-1,i=e.length;++o<i;){var a=e[o],u=t(a);if(null!=u&&(void 0===c?u==u&&!r(u):n(u,c)))var c=u,l=a}return l}},function(e,t,n){var r;/*! decimal.js-light v2.5.0 https://github.com/MikeMcl/decimal.js-light/LICENCE */!function(o){"use strict";var i,a={precision:20,rounding:4,toExpNeg:-7,toExpPos:21,LN10:"2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"},u=!0,c="[DecimalError] ",l=c+"Invalid argument: ",s=c+"Exponent out of range: ",f=Math.floor,p=Math.pow,h=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,d=1e7,y=f(1286742750677284.5),v={};function m(e,t){var n,r,o,i,a,c,l,s,f=e.constructor,p=f.precision;if(!e.s||!t.s)return t.s||(t=new f(e)),u?_(t,p):t;if(l=e.d,s=t.d,a=e.e,o=t.e,l=l.slice(),i=a-o){for(i<0?(r=l,i=-i,c=s.length):(r=s,o=a,c=l.length),i>(c=(a=Math.ceil(p/7))>c?a+1:c+1)&&(i=c,r.length=1),r.reverse();i--;)r.push(0);r.reverse()}for((c=l.length)-(i=s.length)<0&&(i=c,r=s,s=l,l=r),n=0;i;)n=(l[--i]=l[i]+s[i]+n)/d|0,l[i]%=d;for(n&&(l.unshift(n),++o),c=l.length;0==l[--c];)l.pop();return t.d=l,t.e=o,u?_(t,p):t}function g(e,t,n){if(e!==~~e||e<t||e>n)throw Error(l+e)}function b(e){var t,n,r,o=e.length-1,i="",a=e[0];if(o>0){for(i+=a,t=1;t<o;t++)(n=7-(r=e[t]+"").length)&&(i+=E(n)),i+=r;(n=7-(r=(a=e[t])+"").length)&&(i+=E(n))}else if(0===a)return"0";for(;a%10==0;)a/=10;return i+a}v.absoluteValue=v.abs=function(){var e=new this.constructor(this);return e.s&&(e.s=1),e},v.comparedTo=v.cmp=function(e){var t,n,r,o,i=this;if(e=new i.constructor(e),i.s!==e.s)return i.s||-e.s;if(i.e!==e.e)return i.e>e.e^i.s<0?1:-1;for(t=0,n=(r=i.d.length)<(o=e.d.length)?r:o;t<n;++t)if(i.d[t]!==e.d[t])return i.d[t]>e.d[t]^i.s<0?1:-1;return r===o?0:r>o^i.s<0?1:-1},v.decimalPlaces=v.dp=function(){var e=this,t=e.d.length-1,n=7*(t-e.e);if(t=e.d[t])for(;t%10==0;t/=10)n--;return n<0?0:n},v.dividedBy=v.div=function(e){return x(this,new this.constructor(e))},v.dividedToIntegerBy=v.idiv=function(e){var t=this.constructor;return _(x(this,new t(e),0,1),t.precision)},v.equals=v.eq=function(e){return!this.cmp(e)},v.exponent=function(){return O(this)},v.greaterThan=v.gt=function(e){return this.cmp(e)>0},v.greaterThanOrEqualTo=v.gte=function(e){return this.cmp(e)>=0},v.isInteger=v.isint=function(){return this.e>this.d.length-2},v.isNegative=v.isneg=function(){return this.s<0},v.isPositive=v.ispos=function(){return this.s>0},v.isZero=function(){return 0===this.s},v.lessThan=v.lt=function(e){return this.cmp(e)<0},v.lessThanOrEqualTo=v.lte=function(e){return this.cmp(e)<1},v.logarithm=v.log=function(e){var t,n=this,r=n.constructor,o=r.precision,a=o+5;if(void 0===e)e=new r(10);else if((e=new r(e)).s<1||e.eq(i))throw Error(c+"NaN");if(n.s<1)throw Error(c+(n.s?"NaN":"-Infinity"));return n.eq(i)?new r(0):(u=!1,t=x(S(n,a),S(e,a),a),u=!0,_(t,o))},v.minus=v.sub=function(e){var t=this;return e=new t.constructor(e),t.s==e.s?P(t,e):m(t,(e.s=-e.s,e))},v.modulo=v.mod=function(e){var t,n=this,r=n.constructor,o=r.precision;if(!(e=new r(e)).s)throw Error(c+"NaN");return n.s?(u=!1,t=x(n,e,0,1).times(e),u=!0,n.minus(t)):_(new r(n),o)},v.naturalExponential=v.exp=function(){return w(this)},v.naturalLogarithm=v.ln=function(){return S(this)},v.negated=v.neg=function(){var e=new this.constructor(this);return e.s=-e.s||0,e},v.plus=v.add=function(e){var t=this;return e=new t.constructor(e),t.s==e.s?m(t,e):P(t,(e.s=-e.s,e))},v.precision=v.sd=function(e){var t,n,r,o=this;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(l+e);if(t=O(o)+1,n=7*(r=o.d.length-1)+1,r=o.d[r]){for(;r%10==0;r/=10)n--;for(r=o.d[0];r>=10;r/=10)n++}return e&&t>n?t:n},v.squareRoot=v.sqrt=function(){var e,t,n,r,o,i,a,l=this,s=l.constructor;if(l.s<1){if(!l.s)return new s(0);throw Error(c+"NaN")}for(e=O(l),u=!1,0==(o=Math.sqrt(+l))||o==1/0?(((t=b(l.d)).length+e)%2==0&&(t+="0"),o=Math.sqrt(t),e=f((e+1)/2)-(e<0||e%2),r=new s(t=o==1/0?"1e"+e:(t=o.toExponential()).slice(0,t.indexOf("e")+1)+e)):r=new s(o.toString()),o=a=(n=s.precision)+3;;)if(r=(i=r).plus(x(l,i,a+2)).times(.5),b(i.d).slice(0,a)===(t=b(r.d)).slice(0,a)){if(t=t.slice(a-3,a+1),o==a&&"4999"==t){if(_(i,n+1,0),i.times(i).eq(l)){r=i;break}}else if("9999"!=t)break;a+=4}return u=!0,_(r,n)},v.times=v.mul=function(e){var t,n,r,o,i,a,c,l,s,f=this,p=f.constructor,h=f.d,y=(e=new p(e)).d;if(!f.s||!e.s)return new p(0);for(e.s*=f.s,n=f.e+e.e,(l=h.length)<(s=y.length)&&(i=h,h=y,y=i,a=l,l=s,s=a),i=[],r=a=l+s;r--;)i.push(0);for(r=s;--r>=0;){for(t=0,o=l+r;o>r;)c=i[o]+y[r]*h[o-r-1]+t,i[o--]=c%d|0,t=c/d|0;i[o]=(i[o]+t)%d|0}for(;!i[--a];)i.pop();return t?++n:i.shift(),e.d=i,e.e=n,u?_(e,p.precision):e},v.toDecimalPlaces=v.todp=function(e,t){var n=this,r=n.constructor;return n=new r(n),void 0===e?n:(g(e,0,1e9),void 0===t?t=r.rounding:g(t,0,8),_(n,e+O(n)+1,t))},v.toExponential=function(e,t){var n,r=this,o=r.constructor;return void 0===e?n=M(r,!0):(g(e,0,1e9),void 0===t?t=o.rounding:g(t,0,8),n=M(r=_(new o(r),e+1,t),!0,e+1)),n},v.toFixed=function(e,t){var n,r,o=this,i=o.constructor;return void 0===e?M(o):(g(e,0,1e9),void 0===t?t=i.rounding:g(t,0,8),n=M((r=_(new i(o),e+O(o)+1,t)).abs(),!1,e+O(r)+1),o.isneg()&&!o.isZero()?"-"+n:n)},v.toInteger=v.toint=function(){var e=this,t=e.constructor;return _(new t(e),O(e)+1,t.rounding)},v.toNumber=function(){return+this},v.toPower=v.pow=function(e){var t,n,r,o,a,l,s=this,p=s.constructor,h=+(e=new p(e));if(!e.s)return new p(i);if(!(s=new p(s)).s){if(e.s<1)throw Error(c+"Infinity");return s}if(s.eq(i))return s;if(r=p.precision,e.eq(i))return _(s,r);if(l=(t=e.e)>=(n=e.d.length-1),a=s.s,l){if((n=h<0?-h:h)<=9007199254740991){for(o=new p(i),t=Math.ceil(r/7+4),u=!1;n%2&&j((o=o.times(s)).d,t),0!==(n=f(n/2));)j((s=s.times(s)).d,t);return u=!0,e.s<0?new p(i).div(o):_(o,r)}}else if(a<0)throw Error(c+"NaN");return a=a<0&&1&e.d[Math.max(t,n)]?-1:1,s.s=1,u=!1,o=e.times(S(s,r+12)),u=!0,(o=w(o)).s=a,o},v.toPrecision=function(e,t){var n,r,o=this,i=o.constructor;return void 0===e?r=M(o,(n=O(o))<=i.toExpNeg||n>=i.toExpPos):(g(e,1,1e9),void 0===t?t=i.rounding:g(t,0,8),r=M(o=_(new i(o),e,t),e<=(n=O(o))||n<=i.toExpNeg,e)),r},v.toSignificantDigits=v.tosd=function(e,t){var n=this.constructor;return void 0===e?(e=n.precision,t=n.rounding):(g(e,1,1e9),void 0===t?t=n.rounding:g(t,0,8)),_(new n(this),e,t)},v.toString=v.valueOf=v.val=v.toJSON=function(){var e=this,t=O(e),n=e.constructor;return M(e,t<=n.toExpNeg||t>=n.toExpPos)};var x=function(){function e(e,t){var n,r=0,o=e.length;for(e=e.slice();o--;)n=e[o]*t+r,e[o]=n%d|0,r=n/d|0;return r&&e.unshift(r),e}function t(e,t,n,r){var o,i;if(n!=r)i=n>r?1:-1;else for(o=i=0;o<n;o++)if(e[o]!=t[o]){i=e[o]>t[o]?1:-1;break}return i}function n(e,t,n){for(var r=0;n--;)e[n]-=r,r=e[n]<t[n]?1:0,e[n]=r*d+e[n]-t[n];for(;!e[0]&&e.length>1;)e.shift()}return function(r,o,i,a){var u,l,s,f,p,h,y,v,m,g,b,x,w,k,E,S,T,P,M=r.constructor,j=r.s==o.s?1:-1,A=r.d,C=o.d;if(!r.s)return new M(r);if(!o.s)throw Error(c+"Division by zero");for(l=r.e-o.e,T=C.length,E=A.length,v=(y=new M(j)).d=[],s=0;C[s]==(A[s]||0);)++s;if(C[s]>(A[s]||0)&&--l,(x=null==i?i=M.precision:a?i+(O(r)-O(o))+1:i)<0)return new M(0);if(x=x/7+2|0,s=0,1==T)for(f=0,C=C[0],x++;(s<E||f)&&x--;s++)w=f*d+(A[s]||0),v[s]=w/C|0,f=w%C|0;else{for((f=d/(C[0]+1)|0)>1&&(C=e(C,f),A=e(A,f),T=C.length,E=A.length),k=T,g=(m=A.slice(0,T)).length;g<T;)m[g++]=0;(P=C.slice()).unshift(0),S=C[0],C[1]>=d/2&&++S;do{f=0,(u=t(C,m,T,g))<0?(b=m[0],T!=g&&(b=b*d+(m[1]||0)),(f=b/S|0)>1?(f>=d&&(f=d-1),1==(u=t(p=e(C,f),m,h=p.length,g=m.length))&&(f--,n(p,T<h?P:C,h))):(0==f&&(u=f=1),p=C.slice()),(h=p.length)<g&&p.unshift(0),n(m,p,g),-1==u&&(u=t(C,m,T,g=m.length))<1&&(f++,n(m,T<g?P:C,g)),g=m.length):0===u&&(f++,m=[0]),v[s++]=f,u&&m[0]?m[g++]=A[k]||0:(m=[A[k]],g=1)}while((k++<E||void 0!==m[0])&&x--)}return v[0]||v.shift(),y.e=l,_(y,a?i+O(y)+1:i)}}();function w(e,t){var n,r,o,a,c,l=0,f=0,h=e.constructor,d=h.precision;if(O(e)>16)throw Error(s+O(e));if(!e.s)return new h(i);for(null==t?(u=!1,c=d):c=t,a=new h(.03125);e.abs().gte(.1);)e=e.times(a),f+=5;for(c+=Math.log(p(2,f))/Math.LN10*2+5|0,n=r=o=new h(i),h.precision=c;;){if(r=_(r.times(e),c),n=n.times(++l),b((a=o.plus(x(r,n,c))).d).slice(0,c)===b(o.d).slice(0,c)){for(;f--;)o=_(o.times(o),c);return h.precision=d,null==t?(u=!0,_(o,d)):o}o=a}}function O(e){for(var t=7*e.e,n=e.d[0];n>=10;n/=10)t++;return t}function k(e,t,n){if(t>e.LN10.sd())throw u=!0,n&&(e.precision=n),Error(c+"LN10 precision limit exceeded");return _(new e(e.LN10),t)}function E(e){for(var t="";e--;)t+="0";return t}function S(e,t){var n,r,o,a,l,s,f,p,h,d=1,y=e,v=y.d,m=y.constructor,g=m.precision;if(y.s<1)throw Error(c+(y.s?"NaN":"-Infinity"));if(y.eq(i))return new m(0);if(null==t?(u=!1,p=g):p=t,y.eq(10))return null==t&&(u=!0),k(m,p);if(p+=10,m.precision=p,r=(n=b(v)).charAt(0),a=O(y),!(Math.abs(a)<15e14))return f=k(m,p+2,g).times(a+""),y=S(new m(r+"."+n.slice(1)),p-10).plus(f),m.precision=g,null==t?(u=!0,_(y,g)):y;for(;r<7&&1!=r||1==r&&n.charAt(1)>3;)r=(n=b((y=y.times(e)).d)).charAt(0),d++;for(a=O(y),r>1?(y=new m("0."+n),a++):y=new m(r+"."+n.slice(1)),s=l=y=x(y.minus(i),y.plus(i),p),h=_(y.times(y),p),o=3;;){if(l=_(l.times(h),p),b((f=s.plus(x(l,new m(o),p))).d).slice(0,p)===b(s.d).slice(0,p))return s=s.times(2),0!==a&&(s=s.plus(k(m,p+2,g).times(a+""))),s=x(s,new m(d),p),m.precision=g,null==t?(u=!0,_(s,g)):s;s=f,o+=2}}function T(e,t){var n,r,o;for((n=t.indexOf("."))>-1&&(t=t.replace(".","")),(r=t.search(/e/i))>0?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;48===t.charCodeAt(r);)++r;for(o=t.length;48===t.charCodeAt(o-1);)--o;if(t=t.slice(r,o)){if(o-=r,n=n-r-1,e.e=f(n/7),e.d=[],r=(n+1)%7,n<0&&(r+=7),r<o){for(r&&e.d.push(+t.slice(0,r)),o-=7;r<o;)e.d.push(+t.slice(r,r+=7));r=7-(t=t.slice(r)).length}else r-=o;for(;r--;)t+="0";if(e.d.push(+t),u&&(e.e>y||e.e<-y))throw Error(s+n)}else e.s=0,e.e=0,e.d=[0];return e}function _(e,t,n){var r,o,i,a,c,l,h,v,m=e.d;for(a=1,i=m[0];i>=10;i/=10)a++;if((r=t-a)<0)r+=7,o=t,h=m[v=0];else{if((v=Math.ceil((r+1)/7))>=(i=m.length))return e;for(h=i=m[v],a=1;i>=10;i/=10)a++;o=(r%=7)-7+a}if(void 0!==n&&(c=h/(i=p(10,a-o-1))%10|0,l=t<0||void 0!==m[v+1]||h%i,l=n<4?(c||l)&&(0==n||n==(e.s<0?3:2)):c>5||5==c&&(4==n||l||6==n&&(r>0?o>0?h/p(10,a-o):0:m[v-1])%10&1||n==(e.s<0?8:7))),t<1||!m[0])return l?(i=O(e),m.length=1,t=t-i-1,m[0]=p(10,(7-t%7)%7),e.e=f(-t/7)||0):(m.length=1,m[0]=e.e=e.s=0),e;if(0==r?(m.length=v,i=1,v--):(m.length=v+1,i=p(10,7-r),m[v]=o>0?(h/p(10,a-o)%p(10,o)|0)*i:0),l)for(;;){if(0==v){(m[0]+=i)==d&&(m[0]=1,++e.e);break}if(m[v]+=i,m[v]!=d)break;m[v--]=0,i=1}for(r=m.length;0===m[--r];)m.pop();if(u&&(e.e>y||e.e<-y))throw Error(s+O(e));return e}function P(e,t){var n,r,o,i,a,c,l,s,f,p,h=e.constructor,y=h.precision;if(!e.s||!t.s)return t.s?t.s=-t.s:t=new h(e),u?_(t,y):t;if(l=e.d,p=t.d,r=t.e,s=e.e,l=l.slice(),a=s-r){for((f=a<0)?(n=l,a=-a,c=p.length):(n=p,r=s,c=l.length),a>(o=Math.max(Math.ceil(y/7),c)+2)&&(a=o,n.length=1),n.reverse(),o=a;o--;)n.push(0);n.reverse()}else{for((f=(o=l.length)<(c=p.length))&&(c=o),o=0;o<c;o++)if(l[o]!=p[o]){f=l[o]<p[o];break}a=0}for(f&&(n=l,l=p,p=n,t.s=-t.s),c=l.length,o=p.length-c;o>0;--o)l[c++]=0;for(o=p.length;o>a;){if(l[--o]<p[o]){for(i=o;i&&0===l[--i];)l[i]=d-1;--l[i],l[o]+=d}l[o]-=p[o]}for(;0===l[--c];)l.pop();for(;0===l[0];l.shift())--r;return l[0]?(t.d=l,t.e=r,u?_(t,y):t):new h(0)}function M(e,t,n){var r,o=O(e),i=b(e.d),a=i.length;return t?(n&&(r=n-a)>0?i=i.charAt(0)+"."+i.slice(1)+E(r):a>1&&(i=i.charAt(0)+"."+i.slice(1)),i=i+(o<0?"e":"e+")+o):o<0?(i="0."+E(-o-1)+i,n&&(r=n-a)>0&&(i+=E(r))):o>=a?(i+=E(o+1-a),n&&(r=n-o-1)>0&&(i=i+"."+E(r))):((r=o+1)<a&&(i=i.slice(0,r)+"."+i.slice(r)),n&&(r=n-a)>0&&(o+1===a&&(i+="."),i+=E(r))),e.s<0?"-"+i:i}function j(e,t){if(e.length>t)return e.length=t,!0}function A(e){if(!e||"object"!=typeof e)throw Error(c+"Object expected");var t,n,r,o=["precision",1,1e9,"rounding",0,8,"toExpNeg",-1/0,0,"toExpPos",0,1/0];for(t=0;t<o.length;t+=3)if(void 0!==(r=e[n=o[t]])){if(!(f(r)===r&&r>=o[t+1]&&r<=o[t+2]))throw Error(l+n+": "+r);this[n]=r}if(void 0!==(r=e[n="LN10"])){if(r!=Math.LN10)throw Error(l+n+": "+r);this[n]=new this(r)}return this}(a=function e(t){var n,r,o;function i(e){var t=this;if(!(t instanceof i))return new i(e);if(t.constructor=i,e instanceof i)return t.s=e.s,t.e=e.e,void(t.d=(e=e.d)?e.slice():e);if("number"==typeof e){if(0*e!=0)throw Error(l+e);if(e>0)t.s=1;else{if(!(e<0))return t.s=0,t.e=0,void(t.d=[0]);e=-e,t.s=-1}return e===~~e&&e<1e7?(t.e=0,void(t.d=[e])):T(t,e.toString())}if("string"!=typeof e)throw Error(l+e);if(45===e.charCodeAt(0)?(e=e.slice(1),t.s=-1):t.s=1,!h.test(e))throw Error(l+e);T(t,e)}if(i.prototype=v,i.ROUND_UP=0,i.ROUND_DOWN=1,i.ROUND_CEIL=2,i.ROUND_FLOOR=3,i.ROUND_HALF_UP=4,i.ROUND_HALF_DOWN=5,i.ROUND_HALF_EVEN=6,i.ROUND_HALF_CEIL=7,i.ROUND_HALF_FLOOR=8,i.clone=e,i.config=i.set=A,void 0===t&&(t={}),t)for(o=["precision","rounding","toExpNeg","toExpPos","LN10"],n=0;n<o.length;)t.hasOwnProperty(r=o[n++])||(t[r]=this[r]);return i.config(t),i}(a)).default=a.Decimal=a,i=new a(1),void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.memoize=t.reverse=t.compose=t.map=t.range=t.curry=t.PLACE_HOLDER=void 0;var o=function(e){return e},i={"@@functional/placeholder":!0};t.PLACE_HOLDER=i;var a=function(e){return e===i},u=function(e){return function t(){return 0===arguments.length||1===arguments.length&&a(arguments.length<=0?void 0:arguments[0])?t:e.apply(void 0,arguments)}},c=function(e){return function e(t,n){return 1===t?n:u((function(){for(var o=arguments.length,c=new Array(o),l=0;l<o;l++)c[l]=arguments[l];var s=c.filter((function(e){return e!==i})).length;return s>=t?n.apply(void 0,c):e(t-s,u((function(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];var i=c.map((function(e){return a(e)?t.shift():e}));return n.apply(void 0,r(i).concat(t))})))}))}(e.length,e)};t.curry=c;t.range=function(e,t){for(var n=[],r=e;r<t;++r)n[r-e]=r;return n};var l=c((function(e,t){return Array.isArray(t)?t.map(e):Object.keys(t).map((function(e){return t[e]})).map(e)}));t.map=l;t.compose=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!t.length)return o;var r=t.reverse(),i=r[0],a=r.slice(1);return function(){return a.reduce((function(e,t){return t(e)}),i.apply(void 0,arguments))}};t.reverse=function(e){return Array.isArray(e)?e.reverse():e.split("").reverse.join("")};t.memoize=function(e){var t=null,n=null;return function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return t&&o.every((function(e,n){return e===t[n]}))?n:(t=o,n=e.apply(void 0,o))}}},function(e,t,n){var r=n(129);e.exports=function(e){return e?(e=r(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},function(e,t,n){var r=n(7),o=n(27),i=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,c=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=u.test(e);return n||c.test(e)?l(e.slice(2),n?2:8):a.test(e)?NaN:+e}},function(e,t,n){"use strict";e.exports=n(361)},function(e,t,n){var r=n(35),o=n(311),i=n(116),a=n(318),u=i((function(e){var t=r(e,a);return t.length&&t[0]===e[0]?o(t):[]}));e.exports=u},function(e,t,n){var r=n(104),o=n(320),i=n(13),a=n(5);e.exports=function(e,t){return(a(e)?r:o)(e,i(t,3))}},function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},function(e,t,n){var r=n(123),o=n(338);e.exports=function(e,t){return r(o(e,t),1)}},function(e,t,n){var r=n(351)(n(352));e.exports=r},function(e,t,n){var r=n(356),o=n(7);e.exports=function(e,t,n){var i=!0,a=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return o(n)&&(i="leading"in n?!!n.leading:i,a="trailing"in n?!!n.trailing:a),r(e,t,{leading:i,maxWait:t,trailing:a})}},function(e,t,n){var r=n(102),o=n(13),i=n(358),a=n(5),u=n(47);e.exports=function(e,t,n){var c=a(e)?r:i;return n&&u(e,t,n)&&(t=void 0),c(e,o(t,3))}},function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function s(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function f(e,t,n,r){var o,i,a,u;if(l(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=s(e))>0&&a.length>o&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,u=c,console&&console.warn&&console.warn(u)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=p.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):v(o,o.length)}function y(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return s(this)},u.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var u=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw u.context=a,u}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var l=c.length,s=v(c,l);for(n=0;n<l;++n)i(s[n],this,t)}return!0},u.prototype.addListener=function(e,t){return f(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return f(this,e,t,!0)},u.prototype.once=function(e,t){return l(t),this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var n,r,o,i,a;if(l(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return d(this,e,!0)},u.prototype.rawListeners=function(e){return d(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):y.call(e,t)},u.prototype.listenerCount=y,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){"use strict";var r=n(130),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function c(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var l=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var o=h(n);o&&o!==d&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=c(t),y=c(n),v=0;v<a.length;++v){var m=a[v];if(!(i[m]||r&&r[m]||y&&y[m]||u&&u[m])){var g=p(n,m);try{l(t,m,g)}catch(e){}}}}return t}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(83),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,l=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function m(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function w(){}function O(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(m(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var k=O.prototype=new w;k.constructor=O,r(k,x.prototype),k.isPureReactComponent=!0;var E={current:null},S=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var l=Array(c),s=0;s<c;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g,j=[];function A(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function C(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var c=!1;if(null===t)c=!0;else switch(u){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case i:case a:c=!0}}if(c)return r(o,t,""===n?"."+I(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var s=n+I(u=t[l],l);c+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),l=0;!(u=t.next()).done;)c+=e(u=u.value,s=n+I(u,l++),r,o);else if("object"===u)throw r=""+t,Error(m(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return c}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(M,"$&/")+"/"),N(e,R,t=A(t,i,r,o)),C(t)}var z={current:null};function F(){var e=z.current;if(null===e)throw Error(m(321));return e}var U={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,D,t=A(null,null,t,n)),C(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(m(143));return e}},t.Component=x,t.Fragment=u,t.Profiler=l,t.PureComponent=O,t.StrictMode=c,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(m(267,e));var o=r({},e.props),a=e.key,u=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,c=E.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)S.call(t,s)&&!T.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){l=Array(s);for(var f=0;f<s;f++)l[f]=arguments[f+2];o.children=l}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(83),i=n(171);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,o,i,a,u,c){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var c=!1,l=null,s=!1,f=null,p={onError:function(e){c=!0,l=e}};function h(e,t,n,r,o,i,a,s,f){c=!1,l=null,u.apply(p,arguments)}var d=null,y=null,v=null;function m(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,u,p,d){if(h.apply(this,arguments),c){if(!c)throw Error(a(198));var y=l;c=!1,l=null,s||(s=!0,f=y)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function x(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!O[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in O[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,c=r;if(k.hasOwnProperty(c))throw Error(a(99,c));k[c]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&w(l[o],u,c);o=!0}else i.registrationName?(w(i.registrationName,u,c),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function w(e,t,n){if(E[e])throw Error(a(100,e));E[e]=t,S[e]=t.eventTypes[n].dependencies}var O=[],k={},E={},S={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&x()}var _=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,M=null,j=null;function A(e){if(e=y(e)){if("function"!=typeof P)throw Error(a(280));var t=e.stateNode;t&&(t=d(t),P(e.stateNode,e.type,t))}}function C(e){M?j?j.push(e):j=[e]:M=e}function N(){if(M){var e=M,t=j;if(j=M=null,A(e),t)for(e=0;e<t.length;e++)A(t[e])}}function I(e,t){return e(t)}function D(e,t,n,r,o){return e(t,n,r,o)}function R(){}var L=I,z=!1,F=!1;function U(){null===M&&null===j||(R(),N())}function B(e,t,n){if(F)return e(t,n);F=!0;try{return L(e,t,n)}finally{F=!1,U()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,H={},$={};function q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var G={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){G[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];G[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){G[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){G[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){G[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){G[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){G[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){G[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){G[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var X=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(X,K);G[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(X,K);G[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(X,K);G[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){G[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),G.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){G[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Q(e,t,n,r){var o=G.hasOwnProperty(t)?G[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!V.call($,e)||!V.call(H,e)&&(W.test(e)?$[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,oe=J?Symbol.for("react.profiler"):60114,ie=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,ue=J?Symbol.for("react.concurrent_mode"):60111,ce=J?Symbol.for("react.forward_ref"):60112,le=J?Symbol.for("react.suspense"):60113,se=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,pe=J?Symbol.for("react.lazy"):60116,he=J?Symbol.for("react.block"):60121,de="function"==typeof Symbol&&Symbol.iterator;function ye(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=de&&e[de]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case le:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ce:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case he:return ve(e.render);case pe:if(e=1===e._status?e._result:null)return ve(e)}return null}function me(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Z,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Oe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ee(e,t){null!=(t=t.checked)&&Q(e,"checked",t,!1)}function Se(e,t){Ee(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_e(e,t.type,n):t.hasOwnProperty("defaultValue")&&_e(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _e(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ce(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ne(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ie="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Re(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Re(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},Ve={},He={};function $e(e){if(Ve[e])return Ve[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in He)return Ve[e]=n[t];return e}_&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var qe=$e("animationend"),Ge=$e("animationiteration"),Xe=$e("animationstart"),Ke=$e("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,c=o.child;c;){if(c===n){u=!0,n=o,r=i;break}if(c===r){u=!0,r=o,n=i;break}c=c.sibling}if(!u){for(c=i.child;c;){if(c===n){u=!0,n=i,r=o;break}if(c===r){u=!0,r=i,n=o;break}c=c.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)m(e,t[r],n[r]);else t&&m(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!_)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function pt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function ht(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=_n(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ct(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,c=0;c<O.length;c++){var l=O[c];l&&(l=l.extractEvents(r,t,i,o,a))&&(u=rt(u,l))}ut(u)}}function dt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Xt(t,"scroll",!0);break;case"focus":case"blur":Xt(t,"focus",!0),Xt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&Xt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&Gt(e,t)}n.set(e,null)}}var yt,vt,mt,gt=!1,bt=[],xt=null,wt=null,Ot=null,kt=new Map,Et=new Map,St=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),_t="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Pt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Mt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Et.delete(t.pointerId)}}function jt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Pt(t,n,r,o,i),null!==t&&(null!==(t=Pn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function At(e){var t=_n(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){mt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ct(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Pn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){Ct(e)&&n.delete(t)}function It(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Pn(e.blockedOn))&&yt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==xt&&Ct(xt)&&(xt=null),null!==wt&&Ct(wt)&&(wt=null),null!==Ot&&Ct(Ot)&&(Ot=null),kt.forEach(Nt),Et.forEach(Nt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,It)))}function Rt(e){function t(t){return Dt(t,e)}if(0<bt.length){Dt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&Dt(xt,e),null!==wt&&Dt(wt,e),null!==Ot&&Dt(Ot,e),kt.forEach(t),Et.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)At(n),null===n.blockedOn&&St.shift()}var Lt={},zt=new Map,Ft=new Map,Ut=["abort","abort",qe,"animationEnd",Ge,"animationIteration",Xe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),zt.set(r,i),Lt[o]=i}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Ut,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<Wt.length;Vt++)Ft.set(Wt[Vt],0);var Ht=i.unstable_UserBlockingPriority,$t=i.unstable_runWithPriority,qt=!0;function Gt(e,t){Xt(t,e,!1)}function Xt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Yt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){z||R();var o=Qt,i=z;z=!0;try{D(o,e,t,n,r)}finally{(z=i)||U()}}function Yt(e,t,n,r){$t(Ht,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if(qt)if(0<bt.length&&-1<Tt.indexOf(e))e=Pt(null,e,t,n,r),bt.push(e);else{var o=Zt(e,t,n,r);if(null===o)Mt(e,r);else if(-1<Tt.indexOf(e))e=Pt(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return xt=jt(xt,e,t,n,r,o),!0;case"dragenter":return wt=jt(wt,e,t,n,r,o),!0;case"mouseover":return Ot=jt(Ot,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return kt.set(i,jt(kt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Et.set(i,jt(Et.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Mt(e,r),e=pt(e,r,null,t);try{B(ht,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=_n(n=ct(r)))){var o=Je(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=pt(e,r,n,t);try{B(ht,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=Ie;function cn(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)dt(t[r],e,n)}function ln(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function hn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yn=null,vn=null;function mn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function On(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),En="__reactInternalInstance$"+kn,Sn="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function _n(e){var t=e[En];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[En]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=On(e);null!==e;){if(n=e[En])return n;e=On(e)}return t}n=(e=n).parentNode}return null}function Pn(e){return!(e=e[En]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Mn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function jn(e){return e[Sn]||null}function An(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Cn(e,t){var n=e.stateNode;if(!n)return null;var r=d(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Nn(e,t,n){(t=Cn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=An(t);for(t=n.length;0<t--;)Nn(n[t],"captured",e);for(t=0;t<n.length;t++)Nn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Cn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Rn(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function Ln(e){ot(e,In)}var zn=null,Fn=null,Un=null;function Bn(){if(Un)return Un;var e,t,n=Fn,r=n.length,o="value"in zn?zn.value:zn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Un=o.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function Vn(){return!1}function Hn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:Vn,this.isPropagationStopped=Vn,this}function $n(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=$n,e.release=qn}o(Hn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),Hn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Hn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn(Hn);var Xn=Hn.extend({data:null}),Kn=Hn.extend({data:null}),Yn=[9,13,27,32],Qn=_&&"CompositionEvent"in window,Zn=null;_&&"documentMode"in document&&(Zn=document.documentMode);var Jn=_&&"TextEvent"in window&&!Zn,er=_&&(!Qn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Qn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Bn()):(Fn="value"in(zn=r)?zn.value:zn.textContent,ar=!0)),i=Xn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Ln(i),o=i):o=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Qn&&or(e,t)?(e=Bn(),Un=Fn=zn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,Ln(t)):t=null,null===o?t:null===t?o:[o,t]}},cr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!cr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Hn.getPooled(sr.change,e,t,n)).type="change",C(n),Ln(e),e}var pr=null,hr=null;function dr(e){ut(e)}function yr(e){if(we(Mn(e)))return e}function vr(e,t){if("change"===e)return t}var mr=!1;function gr(){pr&&(pr.detachEvent("onpropertychange",br),hr=pr=null)}function br(e){if("value"===e.propertyName&&yr(hr))if(e=fr(hr,e,ct(e)),z)ut(e);else{z=!0;try{I(dr,e)}finally{z=!1,U()}}}function xr(e,t,n){"focus"===e?(gr(),hr=n,(pr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return yr(hr)}function Or(e,t){if("click"===e)return yr(t)}function kr(e,t){if("input"===e||"change"===e)return yr(t)}_&&(mr=lt("input")&&(!document.documentMode||9<document.documentMode));var Er={eventTypes:sr,_isInputEventSupported:mr,extractEvents:function(e,t,n,r){var o=t?Mn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(lr(o))if(mr)a=kr;else{a=wr;var u=xr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Or);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&_e(o,"number",o.value)}},Sr=Hn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Pr(){return _r}var Mr=0,jr=0,Ar=!1,Cr=!1,Nr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Mr;return Mr=e.screenX,Ar?"mousemove"===e.type?e.screenX-t:0:(Ar=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Cr?"mousemove"===e.type?e.screenY-t:0:(Cr=!0,0)}}),Ir=Nr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Rr={eventTypes:Dr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?_n(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Nr,c=Dr.mouseLeave,l=Dr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Ir,c=Dr.pointerLeave,l=Dr.pointerEnter,s="pointer");if(e=null==a?i:Mn(a),i=null==t?i:Mn(t),(c=u.getPooled(c,a,n,r)).type=s+"leave",c.target=e,c.relatedTarget=i,(n=u.getPooled(l,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(l=s,a=0,e=u=r;e;e=An(e))a++;for(e=0,t=l;t;t=An(t))e++;for(;0<a-e;)u=An(u),a--;for(;0<e-a;)l=An(l),e--;for(;a--;){if(u===l||u===l.alternate)break e;u=An(u),l=An(l)}u=null}else u=null;for(l=u,u=[];r&&r!==l&&(null===(a=r.alternate)||a!==l);)u.push(r),r=An(r);for(r=[];s&&s!==l&&(null===(a=s.alternate)||a!==l);)r.push(s),s=An(s);for(s=0;s<u.length;s++)Dn(u[s],"bubbled",c);for(s=r.length;0<s--;)Dn(r[s],"captured",n);return 0==(64&o)?[c]:[c,n]}};var Lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!Lr(e[n[r]],t[n[r]]))return!1;return!0}var Ur=_&&"documentMode"in document&&11>=document.documentMode,Br={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wr=null,Vr=null,Hr=null,$r=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $r||null==Wr||Wr!==sn(n)?null:("selectionStart"in(n=Wr)&&dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hr&&Fr(Hr,n)?null:(Hr=n,(e=Hn.getPooled(Br.select,Vr,e,t)).type="select",e.target=Wr,Ln(e),e))}var Gr={eventTypes:Br,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ze(o),i=S.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?Mn(t):window,e){case"focus":(lr(o)||"true"===o.contentEditable)&&(Wr=o,Vr=t,Hr=null);break;case"blur":Hr=Vr=Wr=null;break;case"mousedown":$r=!0;break;case"contextmenu":case"mouseup":case"dragend":return $r=!1,qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return qr(n,r)}return null}},Xr=Hn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Hn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yr=Sr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Sr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Nr.extend({dataTransfer:null}),no=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pr}),ro=Hn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Nr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Lt,extractEvents:function(e,t,n,r){var o=zt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Yr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Nr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Ge:case Xe:e=Xr;break;case Ke:e=ro;break;case"scroll":e=Sr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ir;break;default:e=Hn}return Ln(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),d=jn,y=Pn,v=Mn,T({SimpleEventPlugin:io,EnterLeaveEventPlugin:Rr,ChangeEventPlugin:Er,SelectEventPlugin:Gr,BeforeInputEventPlugin:ur});var ao=[],uo=-1;function co(e){0>uo||(e.current=ao[uo],ao[uo]=null,uo--)}function lo(e,t){uo++,ao[uo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},ho=so;function yo(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function mo(){co(po),co(fo)}function go(e,t,n){if(fo.current!==so)throw Error(a(168));lo(fo,t),lo(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,ho=fo.current,lo(fo,e),lo(po,po.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,co(po),co(fo),lo(fo,e)):co(po),lo(po,n)}var Oo=i.unstable_runWithPriority,ko=i.unstable_scheduleCallback,Eo=i.unstable_cancelCallback,So=i.unstable_requestPaint,To=i.unstable_now,_o=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,Mo=i.unstable_UserBlockingPriority,jo=i.unstable_NormalPriority,Ao=i.unstable_LowPriority,Co=i.unstable_IdlePriority,No={},Io=i.unstable_shouldYield,Do=void 0!==So?So:function(){},Ro=null,Lo=null,zo=!1,Fo=To(),Uo=1e4>Fo?To:function(){return To()-Fo};function Bo(){switch(_o()){case Po:return 99;case Mo:return 98;case jo:return 97;case Ao:return 96;case Co:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return Po;case 98:return Mo;case 97:return jo;case 96:return Ao;case 95:return Co;default:throw Error(a(332))}}function Vo(e,t){return e=Wo(e),Oo(e,t)}function Ho(e,t,n){return e=Wo(e),ko(e,t,n)}function $o(e){return null===Ro?(Ro=[e],Lo=ko(Po,Go)):Ro.push(e),No}function qo(){if(null!==Lo){var e=Lo;Lo=null,Eo(e)}Go()}function Go(){if(!zo&&null!==Ro){zo=!0;var e=0;try{var t=Ro;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ro=null}catch(t){throw null!==Ro&&(Ro=Ro.slice(e+1)),ko(Po,qo),t}finally{zo=!1}}}function Xo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ko(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yo={current:null},Qo=null,Zo=null,Jo=null;function ei(){Jo=Zo=Qo=null}function ti(e){var t=Yo.current;co(Yo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Qo=e,Jo=Zo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(ja=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zo){if(null===Qo)throw Error(a(308));Zo=t,Qo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zo=Zo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ci(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function li(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.alternate;null!==n&&ui(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,u=i.shared.pending;if(null!==u){if(null!==a){var c=a.next;a.next=u.next,u.next=c}a=u,i.shared.pending=null,null!==(c=e.alternate)&&(null!==(c=c.updateQueue)&&(c.baseQueue=u))}if(null!==a){c=a.next;var l=i.baseState,s=0,f=null,p=null,h=null;if(null!==c)for(var d=c;;){if((u=d.expirationTime)<r){var y={expirationTime:d.expirationTime,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null};null===h?(p=h=y,f=l):h=h.next=y,u>s&&(s=u)}else{null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null}),ic(u,d.suspenseConfig);e:{var v=e,m=d;switch(u=t,y=n,m.tag){case 1:if("function"==typeof(v=m.payload)){l=v.call(y,l,u);break e}l=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(u="function"==typeof(v=m.payload)?v.call(y,l,u):v))break e;l=o({},l,u);break e;case 2:ii=!0}}null!==d.callback&&(e.effectTag|=32,null===(u=i.effects)?i.effects=[d]:u.push(d))}if(null===(d=d.next)||d===c){if(null===(u=i.shared.pending))break;d=a.next=u.next,u.next=c,i.baseQueue=a=u,i.shared.pending=null}}null===h?f=l:h.next=p,i.baseState=f,i.baseQueue=h,ac(s),e.expirationTime=s,e.memoizedState=l}}function pi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var hi=Y.ReactCurrentBatchConfig,di=(new r.Component).refs;function yi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),o=hi.suspense;(o=ci(r=Gu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),li(e,o),Xu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),o=hi.suspense;(o=ci(r=Gu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),li(e,o),Xu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=qu(),r=hi.suspense;(r=ci(n=Gu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),li(e,r),Xu(e,n)}};function mi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,i))}function gi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=vo(t)?ho:fo.current,i=(r=null!=(r=t.contextTypes))?yo(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=di,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=vo(t)?ho:fo.current,o.context=yo(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(yi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var wi=Array.isArray;function Oi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Tc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Oi(e,t,n),r.return=e,r):((r=_c(n.type,n.key,n.props,null,e.mode,r)).ref=Oi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Pc(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=_c(t.type,t.key,t.props,null,e.mode,n)).ref=Oi(e,null,t),n.return=e,n;case te:return(t=jc(t,e.mode,n)).return=e,t}if(wi(t)||ye(t))return(t=Pc(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(wi(n)||ye(n))return null!==o?null:f(e,t,n,r,null);ki(e,n)}return null}function d(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||ye(r))return f(t,e=e.get(n)||null,r,o,null);ki(t,r)}return null}function y(o,a,u,c){for(var l=null,s=null,f=a,y=a=0,v=null;null!==f&&y<u.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=h(o,f,u[y],c);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,y),null===s?l=m:s.sibling=m,s=m,f=v}if(y===u.length)return n(o,f),l;if(null===f){for(;y<u.length;y++)null!==(f=p(o,u[y],c))&&(a=i(f,a,y),null===s?l=f:s.sibling=f,s=f);return l}for(f=r(o,f);y<u.length;y++)null!==(v=d(f,o,y,u[y],c))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),a=i(v,a,y),null===s?l=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),l}function v(o,u,c,l){var s=ye(c);if("function"!=typeof s)throw Error(a(150));if(null==(c=s.call(c)))throw Error(a(151));for(var f=s=null,y=u,v=u=0,m=null,g=c.next();null!==y&&!g.done;v++,g=c.next()){y.index>v?(m=y,y=null):m=y.sibling;var b=h(o,y,g.value,l);if(null===b){null===y&&(y=m);break}e&&y&&null===b.alternate&&t(o,y),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,y=m}if(g.done)return n(o,y),s;if(null===y){for(;!g.done;v++,g=c.next())null!==(g=p(o,g.value,l))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(y=r(o,y);!g.done;v++,g=c.next())null!==(g=d(y,o,v,g.value,l))&&(e&&null!==g.alternate&&y.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&y.forEach((function(e){return t(o,e)})),s}return function(e,r,i,c){var l="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;l&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ee:e:{for(s=i.key,l=r;null!==l;){if(l.key===s){switch(l.tag){case 7:if(i.type===ne){n(e,l.sibling),(r=o(l,i.props.children)).return=e,e=r;break e}break;default:if(l.elementType===i.type){n(e,l.sibling),(r=o(l,i.props)).ref=Oi(e,l,i),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}i.type===ne?((r=Pc(i.props.children,e.mode,c,i.key)).return=e,e=r):((c=_c(i.type,i.key,i.props,null,e.mode,c)).ref=Oi(e,r,i),c.return=e,e=c)}return u(e);case te:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=jc(i,e.mode,c)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Mc(i,e.mode,c)).return=e,e=r),u(e);if(wi(i))return y(e,r,i,c);if(ye(i))return v(e,r,i,c);if(s&&ki(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Si=Ei(!0),Ti=Ei(!1),_i={},Pi={current:_i},Mi={current:_i},ji={current:_i};function Ai(e){if(e===_i)throw Error(a(174));return e}function Ci(e,t){switch(lo(ji,t),lo(Mi,e),lo(Pi,_i),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}co(Pi),lo(Pi,t)}function Ni(){co(Pi),co(Mi),co(ji)}function Ii(e){Ai(ji.current);var t=Ai(Pi.current),n=Le(t,e.type);t!==n&&(lo(Mi,e),lo(Pi,n))}function Di(e){Mi.current===e&&(co(Pi),co(Mi))}var Ri={current:0};function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function zi(e,t){return{responder:e,props:t}}var Fi=Y.ReactCurrentDispatcher,Ui=Y.ReactCurrentBatchConfig,Bi=0,Wi=null,Vi=null,Hi=null,$i=!1;function qi(){throw Error(a(321))}function Gi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Lr(e[n],t[n]))return!1;return!0}function Xi(e,t,n,r,o,i){if(Bi=i,Wi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?ma:ga,e=n(r,o),t.expirationTime===Bi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Hi=Vi=null,t.updateQueue=null,Fi.current=ba,e=n(r,o)}while(t.expirationTime===Bi)}if(Fi.current=va,t=null!==Vi&&null!==Vi.next,Bi=0,Hi=Vi=Wi=null,$i=!1,t)throw Error(a(300));return e}function Ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Hi?Wi.memoizedState=Hi=e:Hi=Hi.next=e,Hi}function Yi(){if(null===Vi){var e=Wi.alternate;e=null!==e?e.memoizedState:null}else e=Vi.next;var t=null===Hi?Wi.memoizedState:Hi.next;if(null!==t)Hi=t,Vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Vi=e).memoizedState,baseState:Vi.baseState,baseQueue:Vi.baseQueue,queue:Vi.queue,next:null},null===Hi?Wi.memoizedState=Hi=e:Hi=Hi.next=e}return Hi}function Qi(e,t){return"function"==typeof t?t(e):t}function Zi(e){var t=Yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var c=u=i=null,l=o;do{var s=l.expirationTime;if(s<Bi){var f={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===c?(u=c=f,i=r):c=c.next=f,s>Wi.expirationTime&&(Wi.expirationTime=s,ac(s))}else null!==c&&(c=c.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),ic(s,l.suspenseConfig),r=l.eagerReducer===e?l.eagerState:e(r,l.action);l=l.next}while(null!==l&&l!==o);null===c?i=r:c.next=u,Lr(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=c,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Ji(e){var t=Yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);Lr(i,t.memoizedState)||(ja=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Ki();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Qi,lastRenderedState:e}).dispatch=ya.bind(null,Wi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Wi.updateQueue)?(t={lastEffect:null},Wi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Yi().memoizedState}function ra(e,t,n,r){var o=Ki();Wi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Yi();r=void 0===r?null:r;var i=void 0;if(null!==Vi){var a=Vi.memoizedState;if(i=a.destroy,null!==r&&Gi(r,a.deps))return void ta(t,n,i,r)}Wi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function ua(e,t){return oa(4,2,e,t)}function ca(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function la(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,ca.bind(null,t,e),n)}function sa(){}function fa(e,t){return Ki().memoizedState=[e,void 0===t?null:t],e}function pa(e,t){var n=Yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Gi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ha(e,t){var n=Yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Gi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function da(e,t,n){var r=Bo();Vo(98>r?98:r,(function(){e(!0)})),Vo(97<r?97:r,(function(){var r=Ui.suspense;Ui.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ui.suspense=r}}))}function ya(e,t,n){var r=qu(),o=hi.suspense;o={expirationTime:r=Gu(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Wi||null!==i&&i===Wi)$i=!0,o.expirationTime=Bi,Wi.expirationTime=Bi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.eagerReducer=i,o.eagerState=u,Lr(u,a))return}catch(e){}Xu(e,r)}}var va={readContext:oi,useCallback:qi,useContext:qi,useEffect:qi,useImperativeHandle:qi,useLayoutEffect:qi,useMemo:qi,useReducer:qi,useRef:qi,useState:qi,useDebugValue:qi,useResponder:qi,useDeferredValue:qi,useTransition:qi},ma={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ca.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ya.bind(null,Wi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ki().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:zi,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(da.bind(null,t,e),[t,e]),n]}},ga={readContext:oi,useCallback:pa,useContext:oi,useEffect:aa,useImperativeHandle:la,useLayoutEffect:ua,useMemo:ha,useReducer:Zi,useRef:na,useState:function(){return Zi(Qi)},useDebugValue:sa,useResponder:zi,useDeferredValue:function(e,t){var n=Zi(Qi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Qi),n=t[0];return t=t[1],[pa(da.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:pa,useContext:oi,useEffect:aa,useImperativeHandle:la,useLayoutEffect:ua,useMemo:ha,useReducer:Ji,useRef:na,useState:function(){return Ji(Qi)},useDebugValue:sa,useResponder:zi,useDeferredValue:function(e,t){var n=Ji(Qi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Qi),n=t[0];return t=t[1],[pa(da.bind(null,t,e),[t,e]),n]}},xa=null,wa=null,Oa=!1;function ka(e,t){var n=Ec(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ea(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(Oa){var t=wa;if(t){var n=t;if(!Ea(e,t)){if(!(t=wn(n.nextSibling))||!Ea(e,t))return e.effectTag=-1025&e.effectTag|2,Oa=!1,void(xa=e);ka(xa,n)}xa=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Oa=!1,xa=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xa=e}function _a(e){if(e!==xa)return!1;if(!Oa)return Ta(e),Oa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=wa;t;)ka(e,t),t=wn(t.nextSibling);if(Ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wa=null}}else wa=xa?wn(e.stateNode.nextSibling):null;return!0}function Pa(){wa=xa=null,Oa=!1}var Ma=Y.ReactCurrentOwner,ja=!1;function Aa(e,t,n,r){t.child=null===e?Ti(t,null,n,r):Si(t,e.child,n,r)}function Ca(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Xi(e,t,n,r,i,o),null===e||ja?(t.effectTag|=1,Aa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Xa(e,t,o))}function Na(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Sc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=_c(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ia(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Xa(e,t,i):(t.effectTag|=1,(e=Tc(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ia(e,t,n,r,o,i){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(ja=!1,o<i)?(t.expirationTime=e.expirationTime,Xa(e,t,i)):Ra(e,t,n,r,i)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ra(e,t,n,r,o){var i=vo(n)?ho:fo.current;return i=yo(t,i),ri(t,o),n=Xi(e,t,n,r,i,o),null===e||ja?(t.effectTag|=1,Aa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Xa(e,t,o))}function La(e,t,n,r,o){if(vo(n)){var i=!0;xo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),gi(t,n,r),xi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var c=a.context,l=n.contextType;"object"==typeof l&&null!==l?l=oi(l):l=yo(t,l=vo(n)?ho:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||c!==l)&&bi(t,a,r,l),ii=!1;var p=t.memoizedState;a.state=p,fi(t,r,a,o),c=t.memoizedState,u!==r||p!==c||po.current||ii?("function"==typeof s&&(yi(t,n,s,r),c=t.memoizedState),(u=ii||mi(t,n,u,r,p,c,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),a.props=r,a.state=c,a.context=l,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ui(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Ko(t.type,u),c=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=oi(l):l=yo(t,l=vo(n)?ho:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||c!==l)&&bi(t,a,r,l),ii=!1,c=t.memoizedState,a.state=c,fi(t,r,a,o),p=t.memoizedState,u!==r||c!==p||po.current||ii?("function"==typeof s&&(yi(t,n,s,r),p=t.memoizedState),(s=ii||mi(t,n,u,r,c,p,l))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,i,o)}function za(e,t,n,r,o,i){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&wo(t,n,!1),Xa(e,t,i);r=t.stateNode,Ma.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,u,i)):Aa(e,t,u,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ci(e,t.containerInfo)}var Ua,Ba,Wa,Va={dehydrated:null,retryTime:0};function Ha(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ri.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),lo(Ri,1&a),null===e){if(void 0!==i.fallback&&Sa(t),u){if(u=i.fallback,(i=Pc(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Pc(u,o,n,null)).return=t,i.sibling=n,t.memoizedState=Va,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ti(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(i=i.fallback,(n=Tc(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Tc(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Va,t.child=n,o}return n=Si(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=i.fallback,(i=Pc(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Pc(u,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Va,t.child=i,n}return t.memoizedState=null,t.child=Si(t,e,i.children,n)}function $a(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Ga(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Aa(e,t,r.children,n),0!=(2&(r=Ri.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$a(e,n);else if(19===e.tag)$a(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(Ri,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qa(t,!0,n,null,i,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Xa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ac(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ka(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ya(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&mo(),null;case 3:return Ni(),co(po),co(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!_a(t)||(t.effectTag|=4),null;case 5:Di(t),n=Ai(ji.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ba(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ai(Pi.current),_a(t)){r=t.stateNode,i=t.type;var u=t.memoizedProps;switch(r[En]=t,r[Sn]=u,i){case"iframe":case"object":case"embed":Gt("load",r);break;case"video":case"audio":for(e=0;e<Ye.length;e++)Gt(Ye[e],r);break;case"source":Gt("error",r);break;case"img":case"image":case"link":Gt("error",r),Gt("load",r);break;case"form":Gt("reset",r),Gt("submit",r);break;case"details":Gt("toggle",r);break;case"input":ke(r,u),Gt("invalid",r),cn(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Gt("invalid",r),cn(n,"onChange");break;case"textarea":Ae(r,u),Gt("invalid",r),cn(n,"onChange")}for(var c in on(i,u),e=null,u)if(u.hasOwnProperty(c)){var l=u[c];"children"===c?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):E.hasOwnProperty(c)&&null!=l&&cn(n,c)}switch(i){case"input":xe(r),Te(r,u,!0);break;case"textarea":xe(r),Ne(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(c=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Re(i)),e===un?"script"===i?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(i,{is:r.is}):(e=c.createElement(i),"select"===i&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,i),e[En]=t,e[Sn]=r,Ua(e,t),t.stateNode=e,c=an(i,r),i){case"iframe":case"object":case"embed":Gt("load",e),l=r;break;case"video":case"audio":for(l=0;l<Ye.length;l++)Gt(Ye[l],e);l=r;break;case"source":Gt("error",e),l=r;break;case"img":case"image":case"link":Gt("error",e),Gt("load",e),l=r;break;case"form":Gt("reset",e),Gt("submit",e),l=r;break;case"details":Gt("toggle",e),l=r;break;case"input":ke(e,r),l=Oe(e,r),Gt("invalid",e),cn(n,"onChange");break;case"option":l=Pe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=o({},r,{value:void 0}),Gt("invalid",e),cn(n,"onChange");break;case"textarea":Ae(e,r),l=je(e,r),Gt("invalid",e),cn(n,"onChange");break;default:l=r}on(i,l);var s=l;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===u?"string"==typeof f?("textarea"!==i||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(E.hasOwnProperty(u)?null!=f&&cn(n,u):null!=f&&Q(e,u,f,c))}switch(i){case"input":xe(e),Te(e,r,!1);break;case"textarea":xe(e),Ne(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Me(e,!!r.multiple,n,!1):null!=r.defaultValue&&Me(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=ln)}mn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Wa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ai(ji.current),Ai(Pi.current),_a(t)?(n=t.stateNode,r=t.memoizedProps,n[En]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[En]=t,t.stateNode=n)}return null;case 13:return co(Ri),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&_a(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=i,i.nextEffect=u):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ri.current)?_u===xu&&(_u=wu):(_u!==xu&&_u!==wu||(_u=Ou),0!==Cu&&null!==Eu&&(Nc(Eu,Tu),Ic(Eu,Cu)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ni(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&mo(),null;case 19:if(co(Ri),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(u=r.rendering)){if(i)Ka(r,!1);else if(_u!==xu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Li(u))){for(t.effectTag|=64,Ka(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=u,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,u=e.dependencies,i.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return lo(Ri,1&Ri.current|2),t.child}u=u.sibling}}else{if(!i)if(null!==(e=Li(u))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ka(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ka(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Uo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Ri.current,lo(Ri,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Qa(e){switch(e.tag){case 1:vo(e.type)&&mo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ni(),co(po),co(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Di(e),null;case 13:return co(Ri),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return co(Ri),null;case 4:return Ni(),null;case 10:return ti(e),null;default:return null}}function Za(e,t){return{value:e,source:t,stack:me(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ba=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u,c,l=t.stateNode;switch(Ai(Pi.current),e=null,n){case"input":a=Oe(l,a),r=Oe(l,r),e=[];break;case"option":a=Pe(l,a),r=Pe(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=je(l,a),r=je(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=ln)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(c in l=a[u])l.hasOwnProperty(c)&&(n||(n={}),n[c]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(E.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(l=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==l&&(null!=s||null!=l))if("style"===u)if(l){for(c in l)!l.hasOwnProperty(c)||s&&s.hasOwnProperty(c)||(n||(n={}),n[c]="");for(c in s)s.hasOwnProperty(c)&&l[c]!==s[c]&&(n||(n={}),n[c]=s[c])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(e=e||[]).push(u,s)):"children"===u?l===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(E.hasOwnProperty(u)?(null!=s&&cn(i,u),e||l===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Wa=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=me(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gc(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ou(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&pi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}pi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&mn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Rt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof Oc&&Oc(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gc(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gc(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function cu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:{for(var t=e.return;null!==t;){if(cu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||cu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=ln));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,o,i=t,u=!1;;){if(!u){u=i.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===i.tag||6===i.tag){e:for(var c=e,l=i,s=n,f=l;;)if(au(c,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===l)break e;for(;null===f.sibling;){if(null===f.return||f.return===l)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(c=r,l=i.stateNode,8===c.nodeType?c.parentNode.removeChild(l):c.removeChild(l)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(au(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(u=!1)}i.sibling.return=i.return,i=i.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ee(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var u=i[o],c=i[o+1];"style"===u?nn(n,c):"dangerouslySetInnerHTML"===u?Fe(n,c):"children"===u?Ue(n,c):Q(n,u,c,t)}switch(e){case"input":Se(n,r);break;case"textarea":Ce(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Rt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Iu=Uo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void pu(t);case 19:return void pu(t);case 17:return}throw Error(a(163))}function pu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=xc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var hu="function"==typeof WeakMap?WeakMap:Map;function du(e,t,n){(n=ci(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ru||(Ru=!0,Lu=r),eu(e,t)},n}function yu(e,t,n){(n=ci(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return eu(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zu?zu=new Set([this]):zu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vu,mu=Math.ceil,gu=Y.ReactCurrentDispatcher,bu=Y.ReactCurrentOwner,xu=0,wu=3,Ou=4,ku=0,Eu=null,Su=null,Tu=0,_u=xu,Pu=null,Mu=1073741823,ju=1073741823,Au=null,Cu=0,Nu=!1,Iu=0,Du=null,Ru=!1,Lu=null,zu=null,Fu=!1,Uu=null,Bu=90,Wu=null,Vu=0,Hu=null,$u=0;function qu(){return 0!=(48&ku)?1073741821-(Uo()/10|0):0!==$u?$u:$u=1073741821-(Uo()/10|0)}function Gu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Bo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&ku))return Tu;if(null!==n)e=Xo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Xo(e,150,100);break;case 97:case 96:e=Xo(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Eu&&e===Tu&&--e,e}function Xu(e,t){if(50<Vu)throw Vu=0,Hu=null,Error(a(185));if(null!==(e=Ku(e,t))){var n=Bo();1073741823===t?0!=(8&ku)&&0==(48&ku)?Ju(e):(Qu(e),0===ku&&qo()):Qu(e),0==(4&ku)||98!==n&&99!==n||(null===Wu?Wu=new Map([[e,t]]):(void 0===(n=Wu.get(e))||n>t)&&Wu.set(e,t))}}function Ku(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Eu===o&&(ac(t),_u===Ou&&Nc(o,Tu)),Ic(o,t)),o}function Yu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Cc(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Qu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$o(Ju.bind(null,e));else{var t=Yu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=qu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==No&&Eo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$o(Ju.bind(null,e)):Ho(r,Zu.bind(null,e),{timeout:10*(1073741821-t)-Uo()}),e.callbackNode=t}}}function Zu(e,t){if($u=0,t)return Dc(e,t=qu()),Qu(e),null;var n=Yu(e);if(0!==n){if(t=e.callbackNode,0!=(48&ku))throw Error(a(327));if(yc(),e===Eu&&n===Tu||nc(e,n),null!==Su){var r=ku;ku|=16;for(var o=oc();;)try{cc();break}catch(t){rc(e,t)}if(ei(),ku=r,gu.current=o,1===_u)throw t=Pu,nc(e,n),Nc(e,n),Qu(e),t;if(null===Su)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=_u,Eu=null,r){case xu:case 1:throw Error(a(345));case 2:Dc(e,2<n?2:n);break;case wu:if(Nc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fc(o)),1073741823===Mu&&10<(o=Iu+500-Uo())){if(Nu){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nc(e,n);break}}if(0!==(i=Yu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(pc.bind(null,e),o);break}pc(e);break;case Ou:if(Nc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fc(o)),Nu&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nc(e,n);break}if(0!==(o=Yu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==ju?r=10*(1073741821-ju)-Uo():1073741823===Mu?r=0:(r=10*(1073741821-Mu)-5e3,0>(r=(o=Uo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*mu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(pc.bind(null,e),r);break}pc(e);break;case 5:if(1073741823!==Mu&&null!==Au){i=Mu;var u=Au;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(i=Uo()-(10*(1073741821-i)-(0|u.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Nc(e,n),e.timeoutHandle=bn(pc.bind(null,e),r);break}}pc(e);break;default:throw Error(a(329))}if(Qu(e),e.callbackNode===t)return Zu.bind(null,e)}}return null}function Ju(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&ku))throw Error(a(327));if(yc(),e===Eu&&t===Tu||nc(e,t),null!==Su){var n=ku;ku|=16;for(var r=oc();;)try{uc();break}catch(t){rc(e,t)}if(ei(),ku=n,gu.current=r,1===_u)throw n=Pu,nc(e,t),Nc(e,t),Qu(e),n;if(null!==Su)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Eu=null,pc(e),Qu(e)}return null}function ec(e,t){var n=ku;ku|=1;try{return e(t)}finally{0===(ku=n)&&qo()}}function tc(e,t){var n=ku;ku&=-2,ku|=8;try{return e(t)}finally{0===(ku=n)&&qo()}}function nc(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Su)for(n=Su.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ni(),co(po),co(fo);break;case 5:Di(r);break;case 4:Ni();break;case 13:case 19:co(Ri);break;case 10:ti(r)}n=n.return}Eu=e,Su=Tc(e.current,null),Tu=t,_u=xu,Pu=null,ju=Mu=1073741823,Au=null,Cu=0,Nu=!1}function rc(e,t){for(;;){try{if(ei(),Fi.current=va,$i)for(var n=Wi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Bi=0,Hi=Vi=Wi=null,$i=!1,null===Su||null===Su.return)return _u=1,Pu=t,Su=null;e:{var o=e,i=Su.return,a=Su,u=t;if(t=Tu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&a.mode)){var l=a.alternate;l?(a.updateQueue=l.updateQueue,a.memoizedState=l.memoizedState,a.expirationTime=l.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Ri.current),f=i;do{var p;if(p=13===f.tag){var h=f.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var d=f.memoizedProps;p=void 0!==d.fallback&&(!0!==d.unstable_avoidThisFallback||!s)}}if(p){var y=f.updateQueue;if(null===y){var v=new Set;v.add(c),f.updateQueue=v}else y.add(c);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var m=ci(1073741823,null);m.tag=2,li(a,m)}a.expirationTime=1073741823;break e}u=void 0,a=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new hu,u=new Set,g.set(c,u)):void 0===(u=g.get(c))&&(u=new Set,g.set(c,u)),!u.has(a)){u.add(a);var b=bc.bind(null,o,c,a);c.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+me(a))}5!==_u&&(_u=2),u=Za(u,a),f=i;do{switch(f.tag){case 3:c=u,f.effectTag|=4096,f.expirationTime=t,si(f,du(f,c,t));break e;case 1:c=u;var x=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===zu||!zu.has(w)))){f.effectTag|=4096,f.expirationTime=t,si(f,yu(f,c,t));break e}}f=f.return}while(null!==f)}Su=sc(Su)}catch(e){t=e;continue}break}}function oc(){var e=gu.current;return gu.current=va,null===e?va:e}function ic(e,t){e<Mu&&2<e&&(Mu=e),null!==t&&e<ju&&2<e&&(ju=e,Au=t)}function ac(e){e>Cu&&(Cu=e)}function uc(){for(;null!==Su;)Su=lc(Su)}function cc(){for(;null!==Su&&!Io();)Su=lc(Su)}function lc(e){var t=vu(e.alternate,e,Tu);return e.memoizedProps=e.pendingProps,null===t&&(t=sc(e)),bu.current=null,t}function sc(e){Su=e;do{var t=Su.alternate;if(e=Su.return,0==(2048&Su.effectTag)){if(t=Ya(t,Su,Tu),1===Tu||1!==Su.childExpirationTime){for(var n=0,r=Su.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Su.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Su.firstEffect),null!==Su.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Su.firstEffect),e.lastEffect=Su.lastEffect),1<Su.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Su:e.firstEffect=Su,e.lastEffect=Su))}else{if(null!==(t=Qa(Su)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Su.sibling))return t;Su=e}while(null!==Su);return _u===xu&&(_u=5),null}function fc(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function pc(e){var t=Bo();return Vo(99,hc.bind(null,e,t)),null}function hc(e,t){do{yc()}while(null!==Uu);if(0!=(48&ku))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fc(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Eu&&(Su=Eu=null,Tu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=ku;ku|=32,bu.current=null,yn=qt;var u=hn();if(dn(u)){if("selectionStart"in u)var c={start:u.selectionStart,end:u.selectionEnd};else e:{var l=(c=(c=u.ownerDocument)&&c.defaultView||window).getSelection&&c.getSelection();if(l&&0!==l.rangeCount){c=l.anchorNode;var s=l.anchorOffset,f=l.focusNode;l=l.focusOffset;try{c.nodeType,f.nodeType}catch(e){c=null;break e}var p=0,h=-1,d=-1,y=0,v=0,m=u,g=null;t:for(;;){for(var b;m!==c||0!==s&&3!==m.nodeType||(h=p+s),m!==f||0!==l&&3!==m.nodeType||(d=p+l),3===m.nodeType&&(p+=m.nodeValue.length),null!==(b=m.firstChild);)g=m,m=b;for(;;){if(m===u)break t;if(g===c&&++y===s&&(h=p),g===f&&++v===l&&(d=p),null!==(b=m.nextSibling))break;g=(m=g).parentNode}m=b}c=-1===h||-1===d?null:{start:h,end:d}}else c=null}c=c||{start:0,end:0}}else c=null;vn={activeElementDetached:null,focusedElem:u,selectionRange:c},qt=!1,Du=o;do{try{dc()}catch(e){if(null===Du)throw Error(a(330));gc(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=o;do{try{for(u=e,c=t;null!==Du;){var x=Du.effectTag;if(16&x&&Ue(Du.stateNode,""),128&x){var w=Du.alternate;if(null!==w){var O=w.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(1038&x){case 2:lu(Du),Du.effectTag&=-3;break;case 6:lu(Du),Du.effectTag&=-3,fu(Du.alternate,Du);break;case 1024:Du.effectTag&=-1025;break;case 1028:Du.effectTag&=-1025,fu(Du.alternate,Du);break;case 4:fu(Du.alternate,Du);break;case 8:su(u,s=Du,c),uu(s)}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));gc(Du,e),Du=Du.nextEffect}}while(null!==Du);if(O=vn,w=hn(),x=O.focusedElem,c=O.selectionRange,w!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==c&&dn(x)&&(w=c.start,void 0===(O=c.end)&&(O=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(O,x.value.length)):(O=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(O=O.getSelection(),s=x.textContent.length,u=Math.min(c.start,s),c=void 0===c.end?u:Math.min(c.end,s),!O.extend&&u>c&&(s=c,c=u,u=s),s=pn(x,u),f=pn(x,c),s&&f&&(1!==O.rangeCount||O.anchorNode!==s.node||O.anchorOffset!==s.offset||O.focusNode!==f.node||O.focusOffset!==f.offset)&&((w=w.createRange()).setStart(s.node,s.offset),O.removeAllRanges(),u>c?(O.addRange(w),O.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),O.addRange(w))))),w=[];for(O=x;O=O.parentNode;)1===O.nodeType&&w.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(O=w[x]).element.scrollLeft=O.left,O.element.scrollTop=O.top}qt=!!yn,vn=yn=null,e.current=n,Du=o;do{try{for(x=e;null!==Du;){var k=Du.effectTag;if(36&k&&iu(x,Du.alternate,Du),128&k){w=void 0;var E=Du.ref;if(null!==E){var S=Du.stateNode;switch(Du.tag){case 5:w=S;break;default:w=S}"function"==typeof E?E(w):E.current=w}}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));gc(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=null,Do(),ku=i}else e.current=n;if(Fu)Fu=!1,Uu=e,Bu=t;else for(Du=o;null!==Du;)t=Du.nextEffect,Du.nextEffect=null,Du=t;if(0===(t=e.firstPendingTime)&&(zu=null),1073741823===t?e===Hu?Vu++:(Vu=0,Hu=e):Vu=0,"function"==typeof wc&&wc(n.stateNode,r),Qu(e),Ru)throw Ru=!1,e=Lu,Lu=null,e;return 0!=(8&ku)||qo(),null}function dc(){for(;null!==Du;){var e=Du.effectTag;0!=(256&e)&&nu(Du.alternate,Du),0==(512&e)||Fu||(Fu=!0,Ho(97,(function(){return yc(),null}))),Du=Du.nextEffect}}function yc(){if(90!==Bu){var e=97<Bu?97:Bu;return Bu=90,Vo(e,vc)}}function vc(){if(null===Uu)return!1;var e=Uu;if(Uu=null,0!=(48&ku))throw Error(a(331));var t=ku;for(ku|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),ou(5,n)}}catch(t){if(null===e)throw Error(a(330));gc(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ku=t,qo(),!0}function mc(e,t,n){li(e,t=du(e,t=Za(n,t),1073741823)),null!==(e=Ku(e,1073741823))&&Qu(e)}function gc(e,t){if(3===e.tag)mc(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){mc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zu||!zu.has(r))){li(n,e=yu(n,e=Za(t,e),1073741823)),null!==(n=Ku(n,1073741823))&&Qu(n);break}}n=n.return}}function bc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Eu===e&&Tu===n?_u===Ou||_u===wu&&1073741823===Mu&&Uo()-Iu<500?nc(e,Tu):Nu=!0:Cc(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Qu(e)))}function xc(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Gu(t=qu(),e,null)),null!==(e=Ku(e,t))&&Qu(e)}vu=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)ja=!0;else{if(r<n){switch(ja=!1,t.tag){case 3:Fa(t),Pa();break;case 5:if(Ii(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&xo(t);break;case 4:Ci(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,lo(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ha(e,t,n):(lo(Ri,1&Ri.current),null!==(t=Xa(e,t,n))?t.sibling:null);lo(Ri,1&Ri.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ga(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),lo(Ri,Ri.current),!r)return null}return Xa(e,t,n)}ja=!1}}else ja=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=yo(t,fo.current),ri(t,n),o=Xi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&yi(t,r,u,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,xi(t,r,e,n),t=za(null,t,r,!0,i,n)}else t.tag=0,Aa(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Sc(e)?1:0;if(null!=e){if((e=e.$$typeof)===ce)return 11;if(e===fe)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=Ra(null,t,o,e,n);break e;case 1:t=La(null,t,o,e,n);break e;case 11:t=Ca(null,t,o,e,n);break e;case 14:t=Na(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ra(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Pa(),t=Xa(e,t,n);else{if((o=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),xa=t,o=Oa=!0),o)for(n=Ti(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Aa(e,t,r,n),Pa();t=t.child}return t;case 5:return Ii(t),null===e&&Sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,gn(r,o)?u=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Aa(e,t,u,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Ha(e,t,n);case 4:return Ci(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Aa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ca(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Aa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Aa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var c=t.type._context;if(lo(Yo,c._currentValue),c._currentValue=i,null!==u)if(c=u.value,0===(i=Lr(c,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,i):1073741823))){if(u.children===o.children&&!po.current){t=Xa(e,t,n);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var l=c.dependencies;if(null!==l){u=c.child;for(var s=l.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===c.tag&&((s=ci(n,null)).tag=2,li(c,s)),c.expirationTime<n&&(c.expirationTime=n),null!==(s=c.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ni(c.return,n),l.expirationTime<n&&(l.expirationTime=n);break}s=s.next}}else u=10===c.tag&&c.type===t.type?null:c.child;if(null!==u)u.return=c;else for(u=c;null!==u;){if(u===t){u=null;break}if(null!==(c=u.sibling)){c.return=u.return,u=c;break}u=u.return}c=u}Aa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Aa(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),Na(e,t,o,i=Ko(o.type,i),r,n);case 15:return Ia(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,xo(t)):e=!1,ri(t,n),gi(t,r,o),xi(t,r,o,n),za(null,t,r,!0,e,n);case 19:return Ga(e,t,n)}throw Error(a(156,t.tag))};var wc=null,Oc=null;function kc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ec(e,t,n,r){return new kc(e,t,n,r)}function Sc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tc(e,t){var n=e.alternate;return null===n?((n=Ec(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _c(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Sc(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Pc(n.children,o,i,t);case ue:u=8,o|=7;break;case re:u=8,o|=1;break;case oe:return(e=Ec(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case le:return(e=Ec(13,n,t,o)).type=le,e.elementType=le,e.expirationTime=i,e;case se:return(e=Ec(19,n,t,o)).elementType=se,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:u=10;break e;case ae:u=9;break e;case ce:u=11;break e;case fe:u=14;break e;case pe:u=16,r=null;break e;case he:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ec(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Pc(e,t,n,r){return(e=Ec(7,e,r,t)).expirationTime=n,e}function Mc(e,t,n){return(e=Ec(6,e,null,t)).expirationTime=n,e}function jc(e,t,n){return(t=Ec(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ac(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Cc(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Nc(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ic(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Dc(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Rc(e,t,n,r){var o=t.current,i=qu(),u=hi.suspense;i=Gu(i,o,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var c=n;do{switch(c.tag){case 3:c=c.stateNode.context;break t;case 1:if(vo(c.type)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break t}}c=c.return}while(null!==c);throw Error(a(171))}if(1===n.tag){var l=n.type;if(vo(l)){n=bo(n,l,c);break e}}n=c}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),li(o,t),Xu(o,i),i}function Lc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zc(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fc(e,t){zc(e,t),(e=e.alternate)&&zc(e,t)}function Uc(e,t,n){var r=new Ac(e,t,n=null!=n&&!0===n.hydrate),o=Ec(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Tt.forEach((function(e){dt(e,t,n)})),_t.forEach((function(e){dt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Bc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wc(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Lc(a);u.call(e)}}Rc(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Uc(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var c=o;o=function(){var e=Lc(a);c.call(e)}}tc((function(){Rc(t,a,e,o)}))}return Lc(a)}function Vc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Bc(t))throw Error(a(200));return Vc(e,t,null,n)}Uc.prototype.render=function(e){Rc(e,this._internalRoot,null,null)},Uc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Rc(null,e,null,(function(){t[Tn]=null}))},yt=function(e){if(13===e.tag){var t=Xo(qu(),150,100);Xu(e,t),Fc(e,t)}},vt=function(e){13===e.tag&&(Xu(e,3),Fc(e,3))},mt=function(e){if(13===e.tag){var t=qu();Xu(e,t=Gu(t,e,null)),Fc(e,t)}},P=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=jn(r);if(!o)throw Error(a(90));we(r),Se(r,o)}}}break;case"textarea":Ce(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},I=ec,D=function(e,t,n,r,o){var i=ku;ku|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(ku=i)&&qo()}},R=function(){0==(49&ku)&&(function(){if(null!==Wu){var e=Wu;Wu=null,e.forEach((function(e,t){Dc(t,e),Qu(t)})),qo()}}(),yc())},L=function(e,t){var n=ku;ku|=2;try{return e(t)}finally{0===(ku=n)&&qo()}};var $c,qc,Gc={Events:[Pn,Mn,jn,T,k,Ln,function(e){ot(e,Rn)},C,N,Qt,ut,yc,{current:!1}]};qc=($c={findFiberByHostInstance:_n,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);wc=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Oc=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},$c,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qc?qc(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gc,t.createPortal=Hc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&ku))throw Error(a(187));var n=ku;ku|=1;try{return Vo(99,e.bind(null,t))}finally{ku=n,qo()}},t.hydrate=function(e,t,n){if(!Bc(t))throw Error(a(200));return Wc(null,e,t,!0,n)},t.render=function(e,t,n){if(!Bc(t))throw Error(a(200));return Wc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Bc(e))throw Error(a(40));return!!e._reactRootContainer&&(tc((function(){Wc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=ec,t.unstable_createPortal=function(e,t){return Hc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Bc(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Wc(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(172)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,l=null,s=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(s,0))},o=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,h=window.Date,d=window.setTimeout,y=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var m=h.now();t.unstable_now=function(){return h.now()-m}}var g=!1,b=null,x=-1,w=5,O=0;a=function(){return t.unstable_now()>=O},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();O=e+w;try{b(!0,e)?E.postMessage(null):(g=!1,b=null)}catch(e){throw E.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,E.postMessage(null))},o=function(e,n){x=d((function(){e(t.unstable_now())}),n)},i=function(){y(x),x=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function T(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,c=e[u];if(void 0!==a&&0>P(a,n))void 0!==c&&0>P(c,a)?(e[r]=c,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==c&&0>P(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],j=[],A=1,C=null,N=3,I=!1,D=!1,R=!1;function L(e){for(var t=T(j);null!==t;){if(null===t.callback)_(j);else{if(!(t.startTime<=e))break;_(j),t.sortIndex=t.expirationTime,S(M,t)}t=T(j)}}function z(e){if(R=!1,L(e),!D)if(null!==T(M))D=!0,r(F);else{var t=T(j);null!==t&&o(z,t.startTime-e)}}function F(e,n){D=!1,R&&(R=!1,i()),I=!0;var r=N;try{for(L(n),C=T(M);null!==C&&(!(C.expirationTime>n)||e&&!a());){var u=C.callback;if(null!==u){C.callback=null,N=C.priorityLevel;var c=u(C.expirationTime<=n);n=t.unstable_now(),"function"==typeof c?C.callback=c:C===T(M)&&_(M),L(n)}else _(M);C=T(M)}if(null!==C)var l=!0;else{var s=T(j);null!==s&&o(z,s.startTime-n),l=!1}return l}finally{C=null,N=r,I=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||I||(D=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return T(M)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var c=a.delay;c="number"==typeof c&&0<c?u+c:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),c=u;return e={id:A++,callback:n,priorityLevel:e,startTime:c,expirationTime:a=c+a,sortIndex:-1},c>u?(e.sortIndex=c,S(j,e),null===T(M)&&e===T(j)&&(R?i():R=!0,o(z,c-u))):(e.sortIndex=a,S(M,e),D||I||(D=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=T(M);return n!==C&&null!==C&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<C.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){var r=n(18),o=n(174);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,"",""]),e.exports=t},function(e,t,n){var r=n(18),o=n(176);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,"html,body{font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;padding:0;margin:0}h1{font-size:25px}\n",""]),e.exports=t},function(e,t,n){var r=n(18),o=n(178);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,"section.main__section{display:flex;flex-wrap:wrap;flex-direction:column;align-items:center}\n",""]),e.exports=t},function(e,t,n){var r=n(18),o=n(180);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,".reaction-container{width:100%;max-width:700px;height:300px;color:#ececec;font-weight:400;font-family:sans-serif;cursor:default;user-select:none}.reaction-container>.content{position:relative;background-color:#7390fb;height:100%}.reaction-container>.content.ready{background-color:#fe6277}.reaction-container>.content.start{background-color:#3bf887}.reaction-container>.content>*{position:absolute}.reaction-container>.content>.text{text-align:center;left:50%;top:50%;transform:translate(-50%, -50%);font-size:20px}.reaction-container>.content>.count{right:5px;top:5px;font-size:14px}\n",""]),e.exports=t},function(e,t,n){var r=n(18),o=n(182);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,".reaction-table-container{width:100%;max-width:700px;margin-top:10px}.reaction-table-container .reaction-table .aver>.item{width:100%;display:inline-block;padding:5px;border:1px solid #ececec;text-align:center;box-sizing:border-box}.reaction-table-container .reaction-table .children{margin-top:10px}.reaction-table-container .reaction-table .children>.item{width:25%;display:inline-block;padding:5px;border:1px solid #ececec;text-align:center;box-sizing:border-box}\n",""]),e.exports=t},function(e,t,n){n(184),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),e.exports=n(33).Math},function(e,t,n){var r=n(6),o=n(92),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){e.exports=n(90)("native-function-to-string",Function.toString)},function(e,t){e.exports=!1},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(6),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(6),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(6),o=n(55);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(6);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(6),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(6),o=n(56);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(6);r(r.S,"Math",{fround:n(195)})},function(e,t,n){var r=n(55),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),c=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),l=r(e);return o<c?l*(o/c/a+1/i-1/i)*c*a:(n=(t=(1+a/i)*o)-(t-o))>u||n!=n?l*(1/0):l*n}},function(e,t,n){var r=n(6),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,u=arguments.length,c=0;a<u;)c<(n=o(arguments[a++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(e,t,n){var r=n(6),o=Math.imul;r(r.S+r.F*n(15)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(6);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(6);r(r.S,"Math",{log1p:n(92)})},function(e,t,n){var r=n(6);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(6);r(r.S,"Math",{sign:n(55)})},function(e,t,n){var r=n(6),o=n(56),i=Math.exp;r(r.S+r.F*n(15)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(6),o=n(56),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(6);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){n(206),n(219),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(231),e.exports=n(33).Number},function(e,t,n){"use strict";var r=n(12),o=n(38),i=n(57),a=n(207),u=n(54),c=n(15),l=n(211).f,s=n(93).f,f=n(53).f,p=n(61).trim,h=r.Number,d=h,y=h.prototype,v="Number"==i(n(215)(y)),m="trim"in String.prototype,g=function(e){var t=u(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=m?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,c=t.slice(2),l=0,s=c.length;l<s;l++)if((a=c.charCodeAt(l))<48||a>o)return NaN;return parseInt(c,r)}}return+t};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof h&&(v?c((function(){y.valueOf.call(n)})):"Number"!=i(n))?a(new d(g(t)),n,h):g(t)};for(var b,x=n(25)?l(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;x.length>w;w++)o(d,b=x[w])&&!o(h,b)&&f(h,b,s(d,b));h.prototype=y,y.constructor=h,n(88)(r,"Number",h)}},function(e,t,n){var r=n(24),o=n(208).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t,n){var r=n(24),o=n(37),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(91)(Function.call,n(93).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(57);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(94),o=n(60).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(58),o=n(213),i=n(214);e.exports=function(e){return function(t,n,a){var u,c=r(t),l=o(c.length),s=i(a,l);if(e&&n!=n){for(;l>s;)if((u=c[s++])!=u)return!0}else for(;l>s;s++)if((e||s in c)&&c[s]===n)return e||s||0;return!e&&-1}}},function(e,t,n){var r=n(39),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(39),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(37),o=n(216),i=n(60),a=n(95)("IE_PROTO"),u=function(){},c=function(){var e,t=n(86)("iframe"),r=i.length;for(t.style.display="none",n(218).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(53),o=n(37),i=n(217);e.exports=n(25)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,c=0;u>c;)r.f(e,n=a[c++],t[n]);return e}},function(e,t,n){var r=n(94),o=n(60);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(12).document;e.exports=r&&r.documentElement},function(e,t,n){"use strict";var r=n(6),o=n(39),i=n(96),a=n(220),u=1..toFixed,c=Math.floor,l=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*l[n],l[n]=r%1e7,r=c(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=l[t],l[t]=c(n/e),n=n%e*1e7},h=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==l[e]){var n=String(l[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},d=function(e,t,n){return 0===t?n:t%2==1?d(e,t-1,n*e):d(e*e,t/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(15)((function(){u.call({})}))),"Number",{toFixed:function(e){var t,n,r,u,c=i(this,s),l=o(e),y="",v="0";if(l<0||l>20)throw RangeError(s);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(y="-",c=-c),c>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(c*d(2,69,1))-69)<0?c*d(2,-t,1):c/d(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=l;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),v=h()}else f(0,n),f(1<<-t,0),v=h()+a.call("0",l);return v=l>0?y+((u=v.length)<=l?"0."+a.call("0",l-u)+v:v.slice(0,u-l)+"."+v.slice(u-l)):y+v}})},function(e,t,n){"use strict";var r=n(39),o=n(59);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t,n){"use strict";var r=n(6),o=n(15),i=n(96),a=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==a.call(1,void 0)}))||!o((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){var r=n(6);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(6),o=n(12).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(6);r(r.S,"Number",{isInteger:n(97)})},function(e,t,n){var r=n(6);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(6),o=n(97),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(6);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(6);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(6),o=n(230);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(12).parseFloat,o=n(61).trim;e.exports=1/r(n(62)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(6),o=n(232);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(12).parseInt,o=n(61).trim,i=n(62),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t,n){var r=n(34),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[u]=n:delete e[u]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(236),o=n(288),i=n(110);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},function(e,t,n){var r=n(99),o=n(67);e.exports=function(e,t,n,i){var a=n.length,u=a,c=!i;if(null==e)return!u;for(e=Object(e);a--;){var l=n[a];if(c&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++a<u;){var s=(l=n[a])[0],f=e[s],p=l[1];if(c&&l[2]){if(void 0===f&&!(s in e))return!1}else{var h=new r;if(i)var d=i(f,p,s,e,t,h);if(!(void 0===d?o(p,f,3,i,h):d))return!1}}return!0}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(41),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(41);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(41);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(41);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(40);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(40),o=n(65),i=n(66);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!o||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(2),o=n(248),i=n(7),a=n(100),u=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,s=c.toString,f=l.hasOwnProperty,p=RegExp("^"+s.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?p:u).test(a(e))}},function(e,t,n){var r,o=n(249),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(10)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(252),o=n(40),i=n(65);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(253),o=n(254),i=n(255),a=n(256),u=n(257);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,e.exports=c},function(e,t,n){var r=n(42);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(42),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(42),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(42);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(43);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(43);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(43);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(43);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(99),o=n(101),i=n(266),a=n(269),u=n(284),c=n(5),l=n(105),s=n(107),f="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,h,d,y){var v=c(e),m=c(t),g=v?"[object Array]":u(e),b=m?"[object Array]":u(t),x=(g="[object Arguments]"==g?f:g)==f,w=(b="[object Arguments]"==b?f:b)==f,O=g==b;if(O&&l(e)){if(!l(t))return!1;v=!0,x=!1}if(O&&!x)return y||(y=new r),v||s(e)?o(e,t,n,h,d,y):i(e,t,g,n,h,d,y);if(!(1&n)){var k=x&&p.call(e,"__wrapped__"),E=w&&p.call(t,"__wrapped__");if(k||E){var S=k?e.value():e,T=E?t.value():t;return y||(y=new r),d(S,T,n,h,y)}}return!!O&&(y||(y=new r),a(e,t,n,h,d,y))}},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(34),o=n(267),i=n(64),a=n(101),u=n(268),c=n(70),l=r?r.prototype:void 0,s=l?l.valueOf:void 0;e.exports=function(e,t,n,r,l,f,p){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var h=u;case"[object Set]":var d=1&r;if(h||(h=c),e.size!=t.size&&!d)return!1;var y=p.get(e);if(y)return y==t;r|=2,p.set(e,t);var v=a(h(e),h(t),r,l,f,p);return p.delete(e),v;case"[object Symbol]":if(s)return s.call(e)==s.call(t)}return!1}},function(e,t,n){var r=n(10).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t,n){var r=n(270),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,i,a,u){var c=1&n,l=r(e),s=l.length;if(s!=r(t).length&&!c)return!1;for(var f=s;f--;){var p=l[f];if(!(c?p in t:o.call(t,p)))return!1}var h=u.get(e);if(h&&u.get(t))return h==t;var d=!0;u.set(e,t),u.set(t,e);for(var y=c;++f<s;){var v=e[p=l[f]],m=t[p];if(i)var g=c?i(m,v,p,t,e,u):i(v,m,p,e,t,u);if(!(void 0===g?v===m||a(v,m,n,i,u):g)){d=!1;break}y||(y="constructor"==p)}if(d&&!y){var b=e.constructor,x=t.constructor;b==x||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(d=!1)}return u.delete(e),u.delete(t),d}},function(e,t,n){var r=n(271),o=n(272),i=n(44);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(103),o=n(5);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t,n){var r=n(104),o=n(273),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return i.call(e,t)})))}:o;e.exports=u},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(275),o=n(71),i=n(5),a=n(105),u=n(72),c=n(107),l=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),s=!n&&o(e),f=!n&&!s&&a(e),p=!n&&!s&&!f&&c(e),h=n||s||f||p,d=h?r(e.length,String):[],y=d.length;for(var v in e)!t&&!l.call(e,v)||h&&("length"==v||f&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,y))||d.push(v);return d}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(20),o=n(16);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(20),o=n(73),i=n(16),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t,n){(function(e){var r=n(98),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,u=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=u}).call(this,n(106)(e))},function(e,t,n){var r=n(281),o=n(282),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(283)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(285),o=n(65),i=n(286),a=n(108),u=n(287),c=n(20),l=n(100),s=l(r),f=l(o),p=l(i),h=l(a),d=l(u),y=c;(r&&"[object DataView]"!=y(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=y(new o)||i&&"[object Promise]"!=y(i.resolve())||a&&"[object Set]"!=y(new a)||u&&"[object WeakMap]"!=y(new u))&&(y=function(e){var t=c(e),n="[object Object]"==t?e.constructor:void 0,r=n?l(n):"";if(r)switch(r){case s:return"[object DataView]";case f:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case d:return"[object WeakMap]"}return t}),e.exports=y},function(e,t,n){var r=n(21)(n(10),"DataView");e.exports=r},function(e,t,n){var r=n(21)(n(10),"Promise");e.exports=r},function(e,t,n){var r=n(21)(n(10),"WeakMap");e.exports=r},function(e,t,n){var r=n(109),o=n(44);e.exports=function(e){for(var t=o(e),n=t.length;n--;){var i=t[n],a=e[i];t[n]=[i,a,r(a)]}return t}},function(e,t,n){var r=n(67),o=n(9),i=n(295),a=n(75),u=n(109),c=n(110),l=n(45);e.exports=function(e,t){return a(e)&&u(t)?c(l(e),t):function(n){var a=o(n,e);return void 0===a&&a===t?i(n,e):r(t,a,3)}}},function(e,t,n){var r=n(291),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)})),t}));e.exports=a},function(e,t,n){var r=n(292);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},function(e,t,n){var r=n(66);function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},function(e,t,n){var r=n(294);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){var r=n(34),o=n(35),i=n(5),a=n(27),u=r?r.prototype:void 0,c=u?u.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(a(t))return c?c.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},function(e,t,n){var r=n(296),o=n(297);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var r=n(112),o=n(71),i=n(5),a=n(72),u=n(73),c=n(45);e.exports=function(e,t,n){for(var l=-1,s=(t=r(t,e)).length,f=!1;++l<s;){var p=c(t[l]);if(!(f=null!=e&&n(e,p)))break;e=e[p]}return f||++l!=s?f:!!(s=null==e?0:e.length)&&u(s)&&a(p,s)&&(i(e)||o(e))}},function(e,t,n){var r=n(299),o=n(300),i=n(75),a=n(45);e.exports=function(e){return i(e)?r(a(e)):o(e)}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var r=n(111);e.exports=function(e){return function(t){return r(t,e)}}},function(e,t,n){var r=n(68),o=n(113),i=n(115),a=n(69),u=n(305),c=n(70);e.exports=function(e,t,n){var l=-1,s=o,f=e.length,p=!0,h=[],d=h;if(n)p=!1,s=i;else if(f>=200){var y=t?null:u(e);if(y)return c(y);p=!1,s=a,d=new r}else d=t?[]:h;e:for(;++l<f;){var v=e[l],m=t?t(v):v;if(v=n||0!==v?v:0,p&&m==m){for(var g=d.length;g--;)if(d[g]===m)continue e;t&&d.push(m),h.push(v)}else s(d,m,n)||(d!==h&&d.push(m),h.push(v))}return h}},function(e,t,n){var r=n(114),o=n(303),i=n(304);e.exports=function(e,t,n){return t==t?i(e,t,n):r(e,o,n)}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n){for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(108),o=n(306),i=n(70),a=r&&1/i(new r([,-0]))[1]==1/0?function(e){return new r(e)}:o;e.exports=a},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var r=n(308);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){(function(){var n,r,o,i,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(n()-a)/1e6},r=t.hrtime,i=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),u=1e9*t.uptime(),a=i-u):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,n(310))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,l=[],s=!1,f=-1;function p(){s&&c&&(s=!1,c.length?l=c.concat(l):f=-1,l.length&&h())}function h(){if(!s){var e=u(p);s=!0;for(var t=l.length;t;){for(c=l,l=[];++f<t;)c&&c[f].run();f=-1,t=l.length}c=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||s||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){var r=n(68),o=n(113),i=n(115),a=n(35),u=n(74),c=n(69),l=Math.min;e.exports=function(e,t,n){for(var s=n?i:o,f=e[0].length,p=e.length,h=p,d=Array(p),y=1/0,v=[];h--;){var m=e[h];h&&t&&(m=a(m,u(t))),y=l(m.length,y),d[h]=!n&&(t||f>=120&&m.length>=120)?new r(h&&m):void 0}m=e[0];var g=-1,b=d[0];e:for(;++g<f&&v.length<y;){var x=m[g],w=t?t(x):x;if(x=n||0!==x?x:0,!(b?c(b,w):s(v,w,n))){for(h=p;--h;){var O=d[h];if(!(O?c(O,w):s(e[h],w,n)))continue e}b&&b.push(w),v.push(x)}}return v}},function(e,t,n){var r=n(313),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var i=arguments,a=-1,u=o(i.length-t,0),c=Array(u);++a<u;)c[a]=i[t+a];a=-1;for(var l=Array(t+1);++a<t;)l[a]=i[a];return l[t]=n(c),r(e,this,l)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(315),o=n(317)(r);e.exports=o},function(e,t,n){var r=n(316),o=n(117),i=n(28),a=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=a},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t){var n=Date.now;e.exports=function(e){var t=0,r=0;return function(){var o=n(),i=16-(o-r);if(r=o,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(319);e.exports=function(e){return r(e)?e:[]}},function(e,t,n){var r=n(26),o=n(16);e.exports=function(e){return o(e)&&r(e)}},function(e,t,n){var r=n(46);e.exports=function(e,t){var n=[];return r(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}},function(e,t,n){var r=n(322)();e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),u=a.length;u--;){var c=a[e?u:++o];if(!1===n(i[c],c,i))break}return t}}},function(e,t,n){var r=n(26);e.exports=function(e,t){return function(n,o){if(null==n)return n;if(!r(n))return e(n,o);for(var i=n.length,a=t?i:-1,u=Object(n);(t?a--:++a<i)&&!1!==o(u[a],a,u););return n}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;!function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}t.default=e}(n(0));var r=u(n(325)),o=u(n(328)),i=u(n(1)),a=u(n(119));n(121);function u(e){return e&&e.__esModule?e:{default:e}}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return(0,r.default)(e,t)}))},s=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return(0,o.default)(e,t)}))},f=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).onEnter=function(e,n){var r=t.getClassNames(n?"appear":"enter").className;t.removeClasses(e,"exit"),l(e,r),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var r=t.getClassNames(n?"appear":"enter").activeClassName;t.reflowAndAddClass(e,r),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var r=t.getClassNames("appear").doneClassName,o=t.getClassNames("enter").doneClassName,i=n?r+" "+o:o;t.removeClasses(e,n?"appear":"enter"),l(e,i),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){var n=t.getClassNames("exit").className;t.removeClasses(e,"appear"),t.removeClasses(e,"enter"),l(e,n),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){var n=t.getClassNames("exit").activeClassName;t.reflowAndAddClass(e,n),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){var n=t.getClassNames("exit").doneClassName;t.removeClasses(e,"exit"),l(e,n),t.props.onExited&&t.props.onExited(e)},t.getClassNames=function(e){var n=t.props.classNames,r="string"==typeof n,o=r?(r&&n?n+"-":"")+e:n[e];return{className:o,activeClassName:r?o+"-active":n[e+"Active"],doneClassName:r?o+"-done":n[e+"Done"]}},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.removeClasses=function(e,t){var n=this.getClassNames(t),r=n.className,o=n.activeClassName,i=n.doneClassName;r&&s(e,r),o&&s(e,o),i&&s(e,i)},o.reflowAndAddClass=function(e,t){t&&(e&&e.scrollTop,l(e,t))},o.render=function(){var e=c({},this.props);return delete e.classNames,i.default.createElement(a.default,c({},e,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},r}(i.default.Component);f.defaultProps={classNames:""},f.propTypes={};var p=f;t.default=p,e.exports=t.default},function(e,t,n){"use strict";var r=n(326);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n(327));e.exports=t.default},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;a(n(0));var r=a(n(1)),o=n(48),i=a(n(122));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t,n;function a(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleEnter=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEnter",0,n)},t.handleEntering=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEntering",0,n)},t.handleEntered=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEntered",0,n)},t.handleExit=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExit",1,n)},t.handleExiting=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExiting",1,n)},t.handleExited=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExited",1,n)},t}n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var u=a.prototype;return u.handleLifecycle=function(e,t,n){var i,a=this.props.children,u=r.default.Children.toArray(a)[t];u.props[e]&&(i=u.props)[e].apply(i,n),this.props[e]&&this.props[e]((0,o.findDOMNode)(this))},u.render=function(){var e=this.props,t=e.children,n=e.in,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["children","in"]),a=r.default.Children.toArray(t),u=a[0],c=a[1];return delete o.onEnter,delete o.onEntering,delete o.onEntered,delete o.onExit,delete o.onExiting,delete o.onExited,r.default.createElement(i.default,o,n?r.default.cloneElement(u,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):r.default.cloneElement(c,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},a}(r.default.Component);u.propTypes={};var c=u;t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=i,t.getInitialChildMapping=function(e,t){return o(e.children,(function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})}))},t.getNextChildMapping=function(e,t,n){var u=o(e.children),c=i(t,u);return Object.keys(c).forEach((function(o){var i=c[o];if((0,r.isValidElement)(i)){var l=o in t,s=o in u,f=t[o],p=(0,r.isValidElement)(f)&&!f.props.in;!s||l&&!p?s||!l||p?s&&l&&(0,r.isValidElement)(f)&&(c[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:f.props.in,exit:a(i,"exit",e),enter:a(i,"enter",e)})):c[o]=(0,r.cloneElement)(i,{in:!1}):c[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:a(i,"exit",e),enter:a(i,"enter",e)})}})),c};var r=n(1);function o(e,t){var n=Object.create(null);return e&&r.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)})),n}function i(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var u={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var l=o[c][r];u[o[c][r]]=n(l)}u[c]=n(c)}for(r=0;r<i.length;r++)u[i[r]]=n(i[r]);return u}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},function(e,t,n){var r=n(34),o=n(71),i=n(5),a=r?r.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||o(e)||!!(a&&e&&e[a])}},function(e,t,n){var r=n(35),o=n(13),i=n(124),a=n(333),u=n(74),c=n(334),l=n(28);e.exports=function(e,t,n){var s=-1;t=r(t.length?t:[l],u(o));var f=i(e,(function(e,n,o){return{criteria:r(t,(function(t){return t(e)})),index:++s,value:e}}));return a(f,(function(e,t){return c(e,t,n)}))}},function(e,t){e.exports=function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}},function(e,t,n){var r=n(335);e.exports=function(e,t,n){for(var o=-1,i=e.criteria,a=t.criteria,u=i.length,c=n.length;++o<u;){var l=r(i[o],a[o]);if(l)return o>=c?l:l*("desc"==n[o]?-1:1)}return e.index-t.index}},function(e,t,n){var r=n(27);e.exports=function(e,t){if(e!==t){var n=void 0!==e,o=null===e,i=e==e,a=r(e),u=void 0!==t,c=null===t,l=t==t,s=r(t);if(!c&&!s&&!a&&e>t||a&&u&&l&&!c&&!s||o&&u&&l||!n&&l||!i)return 1;if(!o&&!a&&!s&&e<t||s&&n&&i&&!o&&!a||c&&n&&i||!u&&i||!l)return-1}return 0}},function(e,t){e.exports=function(e,t){return e>t}},function(e,t){e.exports=function(e,t){return e<t}},function(e,t,n){var r=n(35),o=n(13),i=n(124),a=n(5);e.exports=function(e,t){return(a(e)?r:i)(e,o(t,3))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTickValuesFixedDomain=t.getTickValues=t.getNiceTickValues=void 0;var r=a(n(126)),o=n(127),i=a(n(340));function a(e){return e&&e.__esModule?e:{default:e}}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e){var t=c(e,2),n=t[0],r=t[1],o=n,i=r;return n>r&&(o=r,i=n),[o,i]}function s(e,t,n){if(e.lte(0))return new r.default(0);var o=i.default.getDigitCount(e.toNumber()),a=new r.default(10).pow(o),u=e.div(a),c=1!==o?.05:.1,l=new r.default(Math.ceil(u.div(c).toNumber())).add(n).mul(c).mul(a);return t?l:new r.default(Math.ceil(l))}function f(e,t,n){var a=1,u=new r.default(e);if(!u.isint()&&n){var c=Math.abs(e);c<1?(a=new r.default(10).pow(i.default.getDigitCount(e)-1),u=new r.default(Math.floor(u.div(a).toNumber())).mul(a)):c>1&&(u=new r.default(Math.floor(e)))}else 0===e?u=new r.default(Math.floor((t-1)/2)):n||(u=new r.default(Math.floor(e)));var l=Math.floor((t-1)/2);return(0,o.compose)((0,o.map)((function(e){return u.add(new r.default(e-l).mul(a)).toNumber()})),o.range)(0,t)}function p(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(!Number.isFinite((t-e)/(n-1)))return{step:new r.default(0),tickMin:new r.default(0),tickMax:new r.default(0)};var a,u=s(new r.default(t).sub(e).div(n-1),o,i);a=e<=0&&t>=0?new r.default(0):(a=new r.default(e).add(t).div(2)).sub(new r.default(a).mod(u));var c=Math.ceil(a.sub(e).div(u).toNumber()),l=Math.ceil(new r.default(t).sub(a).div(u).toNumber()),f=c+l+1;return f>n?p(e,t,n,o,i+1):(f<n&&(l=t>0?l+(n-f):l,c=t>0?c:c+(n-f)),{step:u,tickMin:a.sub(new r.default(c).mul(u)),tickMax:a.add(new r.default(l).mul(u))})}var h=(0,o.memoize)((function(e){var t=c(e,2),n=t[0],a=t[1],s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,h=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],d=Math.max(s,2),y=l([n,a]),v=c(y,2),m=v[0],g=v[1];if(m===-1/0||g===1/0){var b=g===1/0?[m].concat(u((0,o.range)(0,s-1).map((function(){return 1/0})))):u((0,o.range)(0,s-1).map((function(){return-1/0}))).concat([g]);return n>a?(0,o.reverse)(b):b}if(m===g)return f(m,s,h);var x=p(m,g,d,h),w=x.step,O=x.tickMin,k=x.tickMax,E=i.default.rangeStep(O,k.add(new r.default(.1).mul(w)),w);return n>a?(0,o.reverse)(E):E}));t.getNiceTickValues=h;var d=(0,o.memoize)((function(e){var t=c(e,2),n=t[0],i=t[1],a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,u=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],p=Math.max(a,2),h=l([n,i]),d=c(h,2),y=d[0],v=d[1];if(y===-1/0||v===1/0)return[n,i];if(y===v)return f(y,a,u);var m=s(new r.default(v).sub(y).div(p-1),u,0),g=(0,o.compose)((0,o.map)((function(e){return new r.default(y).add(new r.default(e).mul(m)).toNumber()})),o.range),b=g(0,p).filter((function(e){return e>=y&&e<=v}));return n>i?(0,o.reverse)(b):b}));t.getTickValues=d;var y=(0,o.memoize)((function(e,t){var n=c(e,2),a=n[0],f=n[1],p=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],h=l([a,f]),d=c(h,2),y=d[0],v=d[1];if(y===-1/0||v===1/0)return[a,f];if(y===v)return[y];var m=Math.max(t,2),g=s(new r.default(v).sub(y).div(m-1),p,0),b=u(i.default.rangeStep(new r.default(y),new r.default(v).sub(new r.default(.99).mul(g)),g)).concat([v]);return a>f?(0,o.reverse)(b):b}));t.getTickValuesFixedDomain=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(126))&&r.__esModule?r:{default:r},i=n(127);var a={rangeStep:function(e,t,n){for(var r=new o.default(e),i=0,a=[];r.lt(t)&&i<1e5;)a.push(r.toNumber()),r=r.add(n),i++;return a},getDigitCount:function(e){return 0===e?1:Math.floor(new o.default(e).abs().log(10).toNumber())+1},interpolateNumber:(0,i.curry)((function(e,t,n){var r=+e;return r+n*(+t-r)})),uninterpolateNumber:(0,i.curry)((function(e,t,n){var r=t-+e;return(n-e)/(r=r||1/0)})),uninterpolateTruncation:(0,i.curry)((function(e,t,n){var r=t-+e;return r=r||1/0,Math.max(0,Math.min(1,(n-e)/r))}))};t.default=a},function(e,t){function n(e,t,n){e instanceof RegExp&&(e=r(e,n)),t instanceof RegExp&&(t=r(t,n));var i=o(e,t,n);return i&&{start:i[0],end:i[1],pre:n.slice(0,i[0]),body:n.slice(i[0]+e.length,i[1]),post:n.slice(i[1]+t.length)}}function r(e,t){var n=t.match(e);return n?n[0]:null}function o(e,t,n){var r,o,i,a,u,c=n.indexOf(e),l=n.indexOf(t,c+1),s=c;if(c>=0&&l>0){for(r=[],i=n.length;s>=0&&!u;)s==c?(r.push(s),c=n.indexOf(e,s+1)):1==r.length?u=[r.pop(),l]:((o=r.pop())<i&&(i=o,a=l),l=n.indexOf(t,s+1)),s=c<l&&c>=0?c:l;r.length&&(u=[i,a])}return u}e.exports=n,n.range=o},function(e,t,n){var r=n(343);function o(e,t,n){var i=e;return function(e,t){var n=[],o="string"==typeof t?new RegExp("\\b("+t+")\\("):t;do{var i=o.exec(e);if(!i)return n;if(void 0===i[1])throw new Error("Missing the first couple of parenthesis to get the function identifier in "+t);var a=i[1],u=i.index,c=r("(",")",e.substring(u));if(!c||c.start!==i[0].length-1)throw new SyntaxError(a+"(): missing closing ')' in the value '"+e+"'");n.push({matches:c,functionIdentifier:a}),e=c.post}while(o.test(e));return n}(e,t).reduce((function(e,r){return e.replace(r.functionIdentifier+"("+r.matches.body+")",function(e,t,n,r,i){return n(o(e,i,n),t,r)}(r.matches.body,r.functionIdentifier,n,i,t))}),e)}e.exports=o},function(e,t,n){"use strict";function r(e,t,n){e instanceof RegExp&&(e=o(e,n)),t instanceof RegExp&&(t=o(t,n));var r=i(e,t,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+e.length,r[1]),post:n.slice(r[1]+t.length)}}function o(e,t){var n=t.match(e);return n?n[0]:null}function i(e,t,n){var r,o,i,a,u,c=n.indexOf(e),l=n.indexOf(t,c+1),s=c;if(c>=0&&l>0){for(r=[],i=n.length;s>=0&&!u;)s==c?(r.push(s),c=n.indexOf(e,s+1)):1==r.length?u=[r.pop(),l]:((o=r.pop())<i&&(i=o,a=l),l=n.indexOf(t,s+1)),s=c<l&&c>=0?c:l;r.length&&(u=[i,a])}return u}e.exports=r,r.range=i},function(e,t,n){var r=n(345);r.prototype.formulaEval=function(){"use strict";for(var e,t,n,r=[],o=this.value,i=0;i<o.length;i++)1===o[i].type||3===o[i].type?r.push({value:3===o[i].type?o[i].show:o[i].value,type:1}):13===o[i].type?r.push({value:o[i].show,type:1}):0===o[i].type?r[r.length-1]={value:o[i].show+("-"!=o[i].show?"(":"")+r[r.length-1].value+("-"!=o[i].show?")":""),type:0}:7===o[i].type?r[r.length-1]={value:(1!=r[r.length-1].type?"(":"")+r[r.length-1].value+(1!=r[r.length-1].type?")":"")+o[i].show,type:7}:10===o[i].type?(e=r.pop(),t=r.pop(),"P"===o[i].show||"C"===o[i].show?r.push({value:"<sup>"+t.value+"</sup>"+o[i].show+"<sub>"+e.value+"</sub>",type:10}):r.push({value:(1!=t.type?"(":"")+t.value+(1!=t.type?")":"")+"<sup>"+e.value+"</sup>",type:1})):2===o[i].type||9===o[i].type?(e=r.pop(),t=r.pop(),r.push({value:(1!=t.type?"(":"")+t.value+(1!=t.type?")":"")+o[i].show+(1!=e.type?"(":"")+e.value+(1!=e.type?")":""),type:o[i].type})):12===o[i].type&&(e=r.pop(),t=r.pop(),n=r.pop(),r.push({value:o[i].show+"("+n.value+","+t.value+","+e.value+")",type:12}));return r[0].value},e.exports=r},function(e,t,n){var r=n(346);r.prototype.postfixEval=function(e){"use strict";(e=e||{}).PI=Math.PI,e.E=Math.E;for(var t,n,o,i=[],a=this.value,u=void 0!==e.n,c=0;c<a.length;c++)1===a[c].type?i.push({value:a[c].value,type:1}):3===a[c].type?i.push({value:e[a[c].value],type:1}):0===a[c].type||7===a[c].type?void 0===i[i.length-1].type?i[i.length-1].value.push(a[c]):i[i.length-1].value=a[c].value(i[i.length-1].value):8===a[c].type?(t=i.pop(),n=i.pop(),i.push({type:1,value:a[c].value(n.value,t.value)})):10===a[c].type?(t=i.pop(),void 0===(n=i.pop()).type?(n.value=n.concat(t),n.value.push(a[c]),i.push(n)):void 0===t.type?(t.unshift(n),t.push(a[c]),i.push(t)):i.push({type:1,value:a[c].value(n.value,t.value)})):2===a[c].type||9===a[c].type?(t=i.pop(),void 0===(n=i.pop()).type?(console.log(n),(n=n.concat(t)).push(a[c]),i.push(n)):void 0===t.type?(t.unshift(n),t.push(a[c]),i.push(t)):i.push({type:1,value:a[c].value(n.value,t.value)})):12===a[c].type?(void 0!==(t=i.pop()).type&&(t=[t]),n=i.pop(),o=i.pop(),i.push({type:1,value:a[c].value(o.value,n.value,new r(t))})):13===a[c].type&&(u?i.push({value:e[a[c].value],type:3}):i.push([a[c]]));if(i.length>1)throw new r.exception("Uncaught Syntax error");return i[0].value>1e15?"Infinity":parseFloat(i[0].value.toFixed(15))},r.eval=function(e,t,n){return void 0===t?this.lex(e).toPostfix().postfixEval():void 0===n?void 0!==t.length?this.lex(e,t).toPostfix().postfixEval():this.lex(e).toPostfix().postfixEval(t):this.lex(e,t).toPostfix().postfixEval(n)},e.exports=r},function(e,t,n){var r=n(347);r.prototype.toPostfix=function(){"use strict";for(var e,t,n,o,i,a=[],u=[{value:"(",type:4,pre:0}],c=this.value,l=1;l<c.length;l++)if(1===c[l].type||3===c[l].type||13===c[l].type)1===c[l].type&&(c[l].value=Number(c[l].value)),a.push(c[l]);else if(4===c[l].type)u.push(c[l]);else if(5===c[l].type)for(;4!==(t=u.pop()).type;)a.push(t);else if(11===c[l].type){for(;4!==(t=u.pop()).type;)a.push(t);u.push(t)}else{o=(e=c[l]).pre,n=(i=u[u.length-1]).pre;var s="Math.pow"==i.value&&"Math.pow"==e.value;if(o>n)u.push(e);else{for(;n>=o&&!s||s&&o<n;)t=u.pop(),i=u[u.length-1],a.push(t),n=i.pre,s="Math.pow"==e.value&&"Math.pow"==i.value;u.push(e)}}return new r(a)},e.exports=r},function(e,t,n){var r=n(348);function o(e,t){for(var n=0;n<e.length;n++)e[n]+=t;return e}var i=["sin","cos","tan","pi","(",")","P","C","asin","acos","atan","7","8","9","int","cosh","acosh","ln","^","root","4","5","6","/","!","tanh","atanh","Mod","1","2","3","*","sinh","asinh","e","log","0",".","+","-",",","Sigma","n","Pi","pow"],a=["sin","cos","tan","&pi;","(",")","P","C","asin","acos","atan","7","8","9","Int","cosh","acosh"," ln","^","root","4","5","6","&divide;","!","tanh","atanh"," Mod ","1","2","3","&times;","sinh","asinh","e"," log","0",".","+","-",",","&Sigma;","n","&Pi;","pow"],u=[r.math.sin,r.math.cos,r.math.tan,"PI","(",")",r.math.P,r.math.C,r.math.asin,r.math.acos,r.math.atan,"7","8","9",Math.floor,r.math.cosh,r.math.acosh,Math.log,Math.pow,Math.sqrt,"4","5","6",r.math.div,r.math.fact,r.math.tanh,r.math.atanh,r.math.mod,"1","2","3",r.math.mul,r.math.sinh,r.math.asinh,"E",r.math.log,"0",".",r.math.add,r.math.sub,",",r.math.sigma,"n",r.math.Pi,Math.pow],c={0:11,1:0,2:3,3:0,4:0,5:0,6:0,7:11,8:11,9:1,10:10,11:0,12:11,13:0},l=[0,0,0,3,4,5,10,10,0,0,0,1,1,1,0,0,0,0,10,0,1,1,1,2,7,0,0,2,1,1,1,2,0,0,3,0,1,6,9,9,11,12,13,12,8],s={0:!0,1:!0,3:!0,4:!0,6:!0,8:!0,9:!0,12:!0,13:!0},f={0:!0,1:!0,2:!0,3:!0,4:!0,5:!0,6:!0,7:!0,8:!0,9:!0,10:!0,11:!0,12:!0,13:!0},p={0:!0,3:!0,4:!0,8:!0,12:!0,13:!0},h={},d={0:!0,1:!0,3:!0,4:!0,6:!0,8:!0,12:!0,13:!0},y={1:!0},v=[[],["1","2","3","7","8","9","4","5","6","+","-","*","/","(",")","^","!","P","C","e","0",".",",","n"],["pi","ln","Pi"],["sin","cos","tan","Del","int","Mod","log","pow"],["asin","acos","atan","cosh","root","tanh","sinh"],["acosh","atanh","asinh","Sigma"]];function m(e,t,n,r){for(var o=0;o<r;o++)if(e[n+o]!==t[o])return!1;return!0}r.addToken=function(e){for(var t=0;t<e.length;t++){var n=e[t].token.length,r=-1;if(n<v.length)for(var o=0;o<v[n].length;o++)if(e[t].token===v[n][o]){r=i.indexOf(v[n][o]);break}-1===r?(i.push(e[t].token),l.push(e[t].type),v.length<=e[t].token.length&&(v[e[t].token.length]=[]),v[e[t].token.length].push(e[t].token),u.push(e[t].value),a.push(e[t].show)):(i[r]=e[t].token,l[r]=e[t].type,u[r]=e[t].value,a[r]=e[t].show)}},r.lex=function(e,t){"use strict";var n,g,b,x,w={value:r.math.changeSign,type:0,pre:21,show:"-"},O={value:")",show:")",type:5,pre:0},k={value:"(",type:4,pre:0,show:"("},E=[k],S=[],T=e,_=s,P=0,M=h,j="";void 0!==t&&r.addToken(t);var A={};for(g=0;g<T.length;g++)if(" "!==T[g]){for(n="",b=T.length-g>v.length-2?v.length-1:T.length-g;b>0;b--)if(void 0!==v[b])for(x=0;x<v[b].length;x++)m(T,v[b][x],g,b)&&(n=v[b][x],x=v[b].length,b=0);if(g+=n.length-1,""===n)throw new r.Exception("Can't understand after "+T.slice(g));var C,N=i.indexOf(n),I=n,D=l[N],R=u[N],L=c[D],z=a[N],F=E[E.length-1];for(C=S.length;C--&&0===S[C];)if(-1!==[0,2,3,4,5,9,11,12,13].indexOf(D)){if(!0!==_[D])throw new r.Exception(n+" is not allowed after "+j);E.push(O),_=f,M=d,o(S,-1).pop()}if(!0!==_[D])throw new r.Exception(n+" is not allowed after "+j);if(!0===M[D]&&(D=2,R=r.math.mul,z="&times;",L=3,g-=n.length),A={value:R,type:D,pre:L,show:z},0===D)_=s,M=h,o(S,2).push(2),E.push(A),E.push(k);else if(1===D)1===F.type?(F.value+=R,o(S,1)):E.push(A),_=f,M=p;else if(2===D)_=s,M=h,o(S,2),E.push(A);else if(3===D)E.push(A),_=f,M=d;else if(4===D)o(S,1),P++,_=s,M=h,E.push(A);else if(5===D){if(!P)throw new r.Exception("Closing parenthesis are more than opening one, wait What!!!");P--,_=f,M=d,E.push(A)}else if(6===D){if(F.hasDec)throw new r.Exception("Two decimals are not allowed in one number");1!==F.type&&(F={value:0,type:1,pre:0},E.push(F),o(S,-1)),_=y,o(S,1),M=h,F.value+=R,F.hasDec=!0}else 7===D&&(_=f,M=d,o(S,1),E.push(A));8===D?(_=s,M=h,o(S,4).push(4),E.push(A),E.push(k)):9===D?(9===F.type?F.value===r.math.add?(F.value=R,F.show=z,o(S,1)):F.value===r.math.sub&&"-"===z&&(F.value=r.math.add,F.show="+",o(S,1)):5!==F.type&&7!==F.type&&1!==F.type&&3!==F.type&&13!==F.type?"-"===I&&(_=s,M=h,o(S,2).push(2),E.push(w),E.push(k)):(E.push(A),o(S,2)),_=s,M=h):10===D?(_=s,M=h,o(S,2),E.push(A)):11===D?(_=s,M=h,E.push(A)):12===D?(_=s,M=h,o(S,6).push(6),E.push(A),E.push(k)):13===D&&(_=f,M=d,E.push(A)),o(S,-1),j=n}for(C=S.length;C--&&0===S[C];)E.push(O),o(S,-1).pop();if(!0!==_[5])throw new r.Exception("complete the expression");for(;P--;)E.push(O);return E.push(O),new r(E)},e.exports=r},function(e,t){var n=function(e){this.value=e};n.math={isDegree:!0,acos:function(e){return n.math.isDegree?180/Math.PI*Math.acos(e):Math.acos(e)},add:function(e,t){return e+t},asin:function(e){return n.math.isDegree?180/Math.PI*Math.asin(e):Math.asin(e)},atan:function(e){return n.math.isDegree?180/Math.PI*Math.atan(e):Math.atan(e)},acosh:function(e){return Math.log(e+Math.sqrt(e*e-1))},asinh:function(e){return Math.log(e+Math.sqrt(e*e+1))},atanh:function(e){return Math.log((1+e)/(1-e))},C:function(e,t){var r=1,o=e-t,i=t;i<o&&(i=o,o=t);for(var a=i+1;a<=e;a++)r*=a;return r/n.math.fact(o)},changeSign:function(e){return-e},cos:function(e){return n.math.isDegree&&(e=n.math.toRadian(e)),Math.cos(e)},cosh:function(e){return(Math.pow(Math.E,e)+Math.pow(Math.E,-1*e))/2},div:function(e,t){return e/t},fact:function(e){if(e%1!=0)return"NaN";for(var t=1,n=2;n<=e;n++)t*=n;return t},inverse:function(e){return 1/e},log:function(e){return Math.log(e)/Math.log(10)},mod:function(e,t){return e%t},mul:function(e,t){return e*t},P:function(e,t){for(var n=1,r=Math.floor(e)-Math.floor(t)+1;r<=Math.floor(e);r++)n*=r;return n},Pi:function(e,t,n){for(var r=1,o=e;o<=t;o++)r*=Number(n.postfixEval({n:o}));return r},pow10x:function(e){for(var t=1;e--;)t*=10;return t},sigma:function(e,t,n){for(var r=0,o=e;o<=t;o++)r+=Number(n.postfixEval({n:o}));return r},sin:function(e){return n.math.isDegree&&(e=n.math.toRadian(e)),Math.sin(e)},sinh:function(e){return(Math.pow(Math.E,e)-Math.pow(Math.E,-1*e))/2},sub:function(e,t){return e-t},tan:function(e){return n.math.isDegree&&(e=n.math.toRadian(e)),Math.tan(e)},tanh:function(e){return n.sinha(e)/n.cosha(e)},toRadian:function(e){return e*Math.PI/180}},n.Exception=function(e){this.message=e},e.exports=n},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}},function(e,t,n){var r=n(46);e.exports=function(e,t){var n=!0;return r(e,(function(e,r,o){return n=!!t(e,r,o)})),n}},function(e,t,n){var r=n(13),o=n(26),i=n(44);e.exports=function(e){return function(t,n,a){var u=Object(t);if(!o(t)){var c=r(n,3);t=i(t),n=function(e){return c(u[e],e,u)}}var l=e(t,n,a);return l>-1?u[c?t[l]:l]:void 0}}},function(e,t,n){var r=n(114),o=n(13),i=n(353),a=Math.max;e.exports=function(e,t,n){var u=null==e?0:e.length;if(!u)return-1;var c=null==n?0:i(n);return c<0&&(c=a(u+c,0)),r(e,o(t,3),c)}},function(e,t,n){var r=n(128);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},function(e,t,n){var r=n(355),o=n(47),i=n(128);e.exports=function(e){return function(t,n,a){return a&&"number"!=typeof a&&o(t,n,a)&&(n=a=void 0),t=i(t),void 0===n?(n=t,t=0):n=i(n),a=void 0===a?t<n?1:-1:i(a),r(t,n,a,e)}}},function(e,t){var n=Math.ceil,r=Math.max;e.exports=function(e,t,o,i){for(var a=-1,u=r(n((t-e)/(o||1)),0),c=Array(u);u--;)c[i?u:++a]=e,e+=o;return c}},function(e,t,n){var r=n(7),o=n(357),i=n(129),a=Math.max,u=Math.min;e.exports=function(e,t,n){var c,l,s,f,p,h,d=0,y=!1,v=!1,m=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=c,r=l;return c=l=void 0,d=t,f=e.apply(r,n)}function b(e){return d=e,p=setTimeout(w,t),y?g(e):f}function x(e){var n=e-h;return void 0===h||n>=t||n<0||v&&e-d>=s}function w(){var e=o();if(x(e))return O(e);p=setTimeout(w,function(e){var n=t-(e-h);return v?u(n,s-(e-d)):n}(e))}function O(e){return p=void 0,m&&c?g(e):(c=l=void 0,f)}function k(){var e=o(),n=x(e);if(c=arguments,l=this,h=e,n){if(void 0===p)return b(h);if(v)return clearTimeout(p),p=setTimeout(w,t),g(h)}return void 0===p&&(p=setTimeout(w,t)),f}return t=i(t)||0,r(n)&&(y=!!n.leading,s=(v="maxWait"in n)?a(i(n.maxWait)||0,t):s,m="trailing"in n?!!n.trailing:m),k.cancel=function(){void 0!==p&&clearTimeout(p),d=0,c=h=l=p=void 0},k.flush=function(){return void 0===p?f:O(o())},k}},function(e,t,n){var r=n(10);e.exports=function(){return r.Date.now()}},function(e,t,n){var r=n(46);e.exports=function(e,t){var n;return r(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}},function(e,t,n){var r=n(117);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,x=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case c:case u:case d:return e;default:switch(e=e&&e.$$typeof){case s:case h:case m:case v:case l:return e;default:return t}}case i:return t}}}function k(e){return O(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=l,t.Element=o,t.ForwardRef=h,t.Fragment=a,t.Lazy=m,t.Memo=v,t.Portal=i,t.Profiler=c,t.StrictMode=u,t.Suspense=d,t.isAsyncMode=function(e){return k(e)||O(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return O(e)===s},t.isContextProvider=function(e){return O(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===h},t.isFragment=function(e){return O(e)===a},t.isLazy=function(e){return O(e)===m},t.isMemo=function(e){return O(e)===v},t.isPortal=function(e){return O(e)===i},t.isProfiler=function(e){return O(e)===c},t.isStrictMode=function(e){return O(e)===u},t.isSuspense=function(e){return O(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===c||e===u||e===d||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===v||e.$$typeof===l||e.$$typeof===s||e.$$typeof===h||e.$$typeof===b||e.$$typeof===x||e.$$typeof===w||e.$$typeof===g)},t.typeOf=O},function(e,t,n){var r=n(18),o=n(363);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,".wrap{min-height:100vh;box-sizing:border-box}.wrap .wrap__content{max-width:1000px;margin-left:auto;margin-right:auto;box-shadow:0 0 30px 0 #ececec;border-radius:1em;padding:20px;padding-bottom:40px;margin-top:20px}\n",""]),e.exports=t},function(e,t,n){var r=n(18),o=n(365);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){(t=n(19)(!1)).push([e.i,".header{width:100%;height:80px;background:white;border-bottom:1px solid #e6e6e6}.header .header__container{display:flex;align-items:center;justify-content:start;height:100%;max-width:1000px;margin:0 auto 0 auto}.header .header__container .logo{color:black;display:flex;align-items:center;width:250px;height:100%;cursor:pointer;text-transform:uppercase;letter-spacing:3px;outline:none;font-size:1.3em}.header .header__container .nav{width:auto;margin-left:auto}.header .header__container .nav .nav-list li{display:inline-block}.header .header__container .nav .nav-list li a{color:slateblue;font-size:1.1em;font-weight:900;cursor:pointer;letter-spacing:3px;text-transform:uppercase;outline:none;text-decoration:none}.header .header__container .nav .nav-list li a:active{color:orange}.header .header__container .nav .nav-list li+li{margin-left:30px}\n",""]),e.exports=t},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"scaleBand",(function(){return yi})),n.d(r,"scalePoint",(function(){return mi})),n.d(r,"scaleIdentity",(function(){return za})),n.d(r,"scaleLinear",(function(){return La})),n.d(r,"scaleLog",(function(){return Ga})),n.d(r,"scaleSymlog",(function(){return Qa})),n.d(r,"scaleOrdinal",(function(){return di})),n.d(r,"scaleImplicit",(function(){return hi})),n.d(r,"scalePow",(function(){return nu})),n.d(r,"scaleSqrt",(function(){return ru})),n.d(r,"scaleQuantile",(function(){return ou})),n.d(r,"scaleQuantize",(function(){return iu})),n.d(r,"scaleThreshold",(function(){return au})),n.d(r,"scaleTime",(function(){return sl})),n.d(r,"scaleUtc",(function(){return ml})),n.d(r,"scaleSequential",(function(){return xl})),n.d(r,"scaleSequentialLog",(function(){return wl})),n.d(r,"scaleSequentialPow",(function(){return kl})),n.d(r,"scaleSequentialSqrt",(function(){return El})),n.d(r,"scaleSequentialSymlog",(function(){return Ol})),n.d(r,"scaleSequentialQuantile",(function(){return Sl})),n.d(r,"scaleDiverging",(function(){return _l})),n.d(r,"scaleDivergingLog",(function(){return Pl})),n.d(r,"scaleDivergingPow",(function(){return jl})),n.d(r,"scaleDivergingSqrt",(function(){return Al})),n.d(r,"scaleDivergingSymlog",(function(){return Ml})),n.d(r,"tickFormat",(function(){return Da}));var o=n(1),i=n.n(o),a=n(48),u=n.n(a),c=(n(173),n(175),n(8)),l=n(0),s=n.n(l);function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e){return"/"===e.charAt(0)}function h(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var d=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&p(e),a=t&&p(t),u=i||a;if(e&&p(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var c=o[o.length-1];n="."===c||".."===c||""===c}else n=!1;for(var l=0,s=o.length;s>=0;s--){var f=o[s];"."===f?h(o,s):".."===f?(h(o,s),l++):l&&(h(o,s),l--)}if(!u)for(;l--;l)o.unshift("..");!u||""===o[0]||o[0]&&p(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};var y=function(e,t){if(!e)throw new Error("Invariant failed")};function v(e){return"/"===e.charAt(0)?e:"/"+e}function m(e){return"/"===e.charAt(0)?e.substr(1):e}function g(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function b(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function x(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function w(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=f({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=d(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function O(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var k=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}function S(){try{return window.history.state||{}}catch(e){return{}}}function T(e){void 0===e&&(e={}),k||y(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,u=void 0!==a&&a,c=i.getUserConfirmation,l=void 0===c?E:c,s=i.keyLength,p=void 0===s?6:s,h=e.basename?b(v(e.basename)):"";function d(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return h&&(i=g(i,h)),w(i,r,n)}function m(){return Math.random().toString(36).substr(2,p)}var T=O();function _(e){f(F,e),F.length=n.length,T.notifyListeners(F.location,F.action)}function P(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||A(d(e.state))}function M(){A(d(S()))}var j=!1;function A(e){if(j)j=!1,_();else{T.confirmTransitionTo(e,"POP",l,(function(t){t?_({action:"POP",location:e}):function(e){var t=F.location,n=N.indexOf(t.key);-1===n&&(n=0);var r=N.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(j=!0,D(o))}(e)}))}}var C=d(S()),N=[C.key];function I(e){return h+x(e)}function D(e){n.go(e)}var R=0;function L(e){1===(R+=e)&&1===e?(window.addEventListener("popstate",P),o&&window.addEventListener("hashchange",M)):0===R&&(window.removeEventListener("popstate",P),o&&window.removeEventListener("hashchange",M))}var z=!1;var F={length:n.length,action:"POP",location:C,createHref:I,push:function(e,t){var o=w(e,t,m(),F.location);T.confirmTransitionTo(o,"PUSH",l,(function(e){if(e){var t=I(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),u)window.location.href=t;else{var c=N.indexOf(F.location.key),l=N.slice(0,c+1);l.push(o.key),N=l,_({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=w(e,t,m(),F.location);T.confirmTransitionTo(o,"REPLACE",l,(function(e){if(e){var t=I(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),u)window.location.replace(t);else{var c=N.indexOf(F.location.key);-1!==c&&(N[c]=o.key),_({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=T.setPrompt(e);return z||(L(1),z=!0),function(){return z&&(z=!1,L(-1)),t()}},listen:function(e){var t=T.appendListener(e);return L(1),function(){L(-1),t()}}};return F}var _={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+m(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:m,decodePath:v},slash:{encodePath:v,decodePath:v}};function P(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function M(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function j(e){window.location.replace(P(window.location.href)+"#"+e)}function A(e){void 0===e&&(e={}),k||y(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?E:r,i=n.hashType,a=void 0===i?"slash":i,u=e.basename?b(v(e.basename)):"",c=_[a],l=c.encodePath,s=c.decodePath;function p(){var e=s(M());return u&&(e=g(e,u)),w(e)}var h=O();function d(e){f(F,e),F.length=t.length,h.notifyListeners(F.location,F.action)}var m=!1,S=null;function T(){var e,t,n=M(),r=l(n);if(n!==r)j(r);else{var i=p(),a=F.location;if(!m&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(S===x(i))return;S=null,function(e){if(m)m=!1,d();else{h.confirmTransitionTo(e,"POP",o,(function(t){t?d({action:"POP",location:e}):function(e){var t=F.location,n=I.lastIndexOf(x(t));-1===n&&(n=0);var r=I.lastIndexOf(x(e));-1===r&&(r=0);var o=n-r;o&&(m=!0,D(o))}(e)}))}}(i)}}var A=M(),C=l(A);A!==C&&j(C);var N=p(),I=[x(N)];function D(e){t.go(e)}var R=0;function L(e){1===(R+=e)&&1===e?window.addEventListener("hashchange",T):0===R&&window.removeEventListener("hashchange",T)}var z=!1;var F={length:t.length,action:"POP",location:N,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=P(window.location.href)),n+"#"+l(u+x(e))},push:function(e,t){var n=w(e,void 0,void 0,F.location);h.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=x(n),r=l(u+t);if(M()!==r){S=t,function(e){window.location.hash=e}(r);var o=I.lastIndexOf(x(F.location)),i=I.slice(0,o+1);i.push(t),I=i,d({action:"PUSH",location:n})}else d()}}))},replace:function(e,t){var n=w(e,void 0,void 0,F.location);h.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=x(n),r=l(u+t);M()!==r&&(S=t,j(r));var o=I.indexOf(x(F.location));-1!==o&&(I[o]=t),d({action:"REPLACE",location:n})}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=h.setPrompt(e);return z||(L(1),z=!0),function(){return z&&(z=!1,L(-1)),t()}},listen:function(e){var t=h.appendListener(e);return L(1),function(){L(-1),t()}}};return F}function C(e,t,n){return Math.min(Math.max(e,t),n)}function N(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,a=void 0===i?0:i,u=t.keyLength,c=void 0===u?6:u,l=O();function s(e){f(m,e),m.length=m.entries.length,l.notifyListeners(m.location,m.action)}function p(){return Math.random().toString(36).substr(2,c)}var h=C(a,0,o.length-1),d=o.map((function(e){return w(e,void 0,"string"==typeof e?p():e.key||p())})),y=x;function v(e){var t=C(m.index+e,0,m.entries.length-1),r=m.entries[t];l.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var m={length:d.length,action:"POP",location:d[h],index:h,entries:d,createHref:y,push:function(e,t){var r=w(e,t,p(),m.location);l.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=m.index+1,n=m.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=w(e,t,p(),m.location);l.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(m.entries[m.index]=r,s({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=m.index+e;return t>=0&&t<m.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return m}var I=n(78),D=n(79),R=n.n(D);n(130);function L(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(139);var z=function(e){var t=Object(I.a)();return t.displayName=e,t}("Router-History"),F=function(e){var t=Object(I.a)();return t.displayName=e,t}("Router"),U=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(c.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(F.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(z.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);i.a.Component;i.a.Component;var B={},W=0;function V(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,c=n.sensitive,l=void 0!==c&&c;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=B[n]||(B[n]={});if(r[e])return r[e];var o=[],i={regexp:R()(e,o,t),keys:o};return W<1e4&&(r[e]=i,W++),i}(n,{end:i,strict:u,sensitive:l}),o=r.regexp,a=r.keys,c=o.exec(e);if(!c)return null;var s=c[0],f=c.slice(1),p=e===s;return i&&!p?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var H=function(e){function t(){return e.apply(this,arguments)||this}return Object(c.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(F.Consumer,null,(function(t){t||y(!1);var n=e.props.location||t.location,r=f({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?V(n.pathname,e.props):t.match}),o=e.props,a=o.children,u=o.component,c=o.render;return Array.isArray(a)&&0===a.length&&(a=null),i.a.createElement(F.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:u?i.a.createElement(u,r):c?c(r):null:"function"==typeof a?a(r):null)}))},t}(i.a.Component);function $(e){return"/"===e.charAt(0)?e:"/"+e}function q(e,t){if(!e)return t;var n=$(e);return 0!==t.pathname.indexOf(n)?t:f({},t,{pathname:t.pathname.substr(n.length)})}function G(e){return"string"==typeof e?e:x(e)}function X(e){return function(){y(!1)}}function K(){}i.a.Component;i.a.Component;i.a.useContext;n(177),n(179);var Y=n(4),Q=n.n(Y),Z=function(e){var t=e.count,n=e.onClick,r=e.contentText,o=e.contentClass;return i.a.createElement("div",{className:Q()("content",o),onClick:function(){return n()}},i.a.createElement("div",{className:"text",dangerouslySetInnerHTML:{__html:r}}),i.a.createElement("div",{className:"count"},t,"번째"))};function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(){return(ee=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ie(e);if(t){var o=ie(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return oe(this,n)}}function oe(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ie(e){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(a,e);var t,n,r,o=re(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this,e)).state={startTime:0,gameStart:!1,targetShow:!1,contentText:"시작하려면 클릭하세요",contentClass:"",count:1},t}return t=a,(n=[{key:"timerStart",value:function(){this.setState({targetShow:!0,contentClass:"start",contentText:"Click!!"});var e=new Date;this.setState({startTime:e.getTime()})}},{key:"timerAndStateReset",value:function(e,t){clearTimeout(this.showTimer),this.setState({gameStart:!1,targetShow:!1,contentText:e,contentClass:"",startTime:0,count:t})}},{key:"timerStop",value:function(e,t){var n=this.state,r=n.count,o=n.startTime,i=this.props.onSave,a=(new Date).getTime()-o;i&&i(a),this.timerAndStateReset("준비가 되면 클릭하세요<br>".concat(a,"ms"),r+1)}},{key:"timerInterrupt",value:function(){var e=this.state.count;this.timerAndStateReset("너무 빠르게 클릭했습니다.<br>다시 시작하려면 클릭하세요",e)}},{key:"gamestart",value:function(){var e=this,t=Math.floor(1e3*(3*Math.random()+1));this.showTimer=setTimeout((function(){e.timerStart()}),t)}},{key:"contentClickHandle",value:function(){var e=this.state,t=e.gameStart,n=e.targetShow;t?n?this.timerStop():this.timerInterrupt():(this.gamestart(),this.setState({gameStart:!0,contentText:"녹색이 되면 클릭하세요",contentClass:"ready"}))}},{key:"render",value:function(){var e=this;return i.a.createElement("div",{className:"reaction-container"},i.a.createElement(Z,ee({onClick:function(){return e.contentClickHandle()}},this.state)))}}])&&te(t.prototype,n),r&&te(t,r),a}(o.Component);n(181),n(183),n(205);if(!Object.setPrototypeOf&&!{}.__proto__){var ue=Object.getPrototypeOf;Object.getPrototypeOf=function(e){return e.__proto__?e.__proto__:ue.call(Object,e)}}var ce=n(3),le=n.n(ce),se=n(2),fe=n.n(se),pe=n(31),he=n.n(pe),de=n(22),ye=n.n(de),ve=n(17),me=n.n(ve);function ge(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=-1,r=function r(o){n<0&&(n=o),o-n>t?(e(o),n=-1):me()(r)};me()(r)}function be(e){return(be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function we(){var e=function(){return null},t=!1;return{stop:function(){t=!0},start:function(n){t=!1,function n(r){if(!t){if(Array.isArray(r)){if(!r.length)return;var o=xe(r),i=o[0],a=o.slice(1);return"number"==typeof i?void ge(n.bind(null,a),i):(n(i),void ge(n.bind(null,a)))}"object"===be(r)&&e(r),"function"==typeof r&&r()}}(n)},subscribe:function(t){return e=t,function(){e=function(){return null}}}}}var Oe=n(131),ke=n.n(Oe);function Ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){Se(e,t,n[t])}))}return e}function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Te=["Webkit","Moz","O","ms"],_e=["-webkit-","-moz-","-o-","-ms-"],Pe=["transform","transformOrigin","transition"],Me=function(e){return e},je=function(e,t){return Object.keys(t).reduce((function(n,r){return Ee({},n,Se({},r,e(r,t[r])))}),{})},Ae=function(e){return Object.keys(e).reduce((function(e,t){return Ee({},e,function(e,t){if(-1===Pe.indexOf(e))return Se({},e,t);var n="transition"===e,r=e.replace(/(\w)/,(function(e){return e.toUpperCase()})),o=t;return Te.reduce((function(e,i,a){return n&&(o=t.replace(/(transform|transform-origin)/gim,"".concat(_e[a],"$1"))),Ee({},e,Se({},i+r,o))}),{})}(t,e[t]))}),e)},Ce=function(e,t,n){return e.map((function(e){return"".concat((r=e,r.replace(/([A-Z])/g,(function(e){return"-".concat(e.toLowerCase())})))," ").concat(t,"ms ").concat(n);var r})).join(",")};function Ne(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ie(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var De=function(e,t){return[0,3*e,3*t-6*e,3*e-3*t+1]},Re=function(e,t){return e.map((function(e,n){return e*Math.pow(t,n)})).reduce((function(e,t){return e+t}))},Le=function(e,t){return function(n){var r=De(e,t);return Re(r,n)}},ze=function(e,t){return function(n){var r=Ie(De(e,t).map((function(e,t){return e*t})).slice(1)).concat([0]);return Re(r,n)}},Fe=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1],i=t[2],a=t[3];if(1===t.length)switch(t[0]){case"linear":r=0,o=0,i=1,a=1;break;case"ease":r=.25,o=.1,i=.25,a=1;break;case"ease-in":r=.42,o=0,i=1,a=1;break;case"ease-out":r=.42,o=0,i=.58,a=1;break;case"ease-in-out":r=0,o=0,i=.58,a=1;break;default:var u=t[0].split("(");if("cubic-bezier"===u[0]&&4===u[1].split(")")[0].split(",").length){var c=u[1].split(")")[0].split(",").map((function(e){return parseFloat(e)})),l=Ne(c,4);r=l[0],o=l[1],i=l[2],a=l[3]}}[r,i,o,a].every((function(e){return"number"==typeof e&&e>=0&&e<=1}));var s=Le(r,i),f=Le(o,a),p=ze(r,i),h=function(e){return e>1?1:e<0?0:e},d=function(e){for(var t=e>1?1:e,n=t,r=0;r<8;++r){var o=s(n)-t,i=p(n);if(Math.abs(o-t)<1e-4||i<1e-4)return f(n);n=h(n-o/i)}return f(n)};return d.isStepper=!1,d},Ue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiff,n=void 0===t?100:t,r=e.damping,o=void 0===r?8:r,i=e.dt,a=void 0===i?17:i,u=function(e,t,r){var i=r+(-(e-t)*n-r*o)*a/1e3,u=r*a/1e3+e;return Math.abs(u-t)<1e-4&&Math.abs(i)<1e-4?[t,0]:[u,i]};return u.isStepper=!0,u.dt=a,u},Be=n(132),We=n.n(Be);function Ve(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function He(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){$e(e,t,n[t])}))}return e}function $e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function qe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Ge=function(e,t,n){return e+(t-e)*n},Xe=function(e){return e.from!==e.to},Ke=function(e,t,n,r,o){var i,a,u,c,l=(i=e,a=t,ke()(Object.keys(i),Object.keys(a))),s=l.reduce((function(n,r){return He({},n,$e({},r,[e[r],t[r]]))}),{}),f=l.reduce((function(n,r){return He({},n,$e({},r,{from:e[r],velocity:0,to:t[r]}))}),{}),p=-1,h=function(){return null};return h=n.isStepper?function(r){u||(u=r);var i=(r-u)/n.dt;f=function e(t,n,r){var o=je((function(e,n){if(Xe(n)){var r=qe(t(n.from,n.to,n.velocity),2);return He({},n,{from:r[0],velocity:r[1]})}return n}),n);return r<1?je((function(e,t){return Xe(t)?He({},t,{velocity:Ge(t.velocity,o[e].velocity,r),from:Ge(t.from,o[e].from,r)}):t}),n):e(t,o,r-1)}(n,f,i),o(He({},e,t,je((function(e,t){return t.from}),f))),u=r,We()(f,Xe).length&&(p=me()(h))}:function(i){c||(c=i);var a=(i-c)/r,u=je((function(e,t){return Ge.apply(void 0,Ve(t).concat([n(a)]))}),s);if(o(He({},e,t,u)),a<1)p=me()(h);else{var l=je((function(e,t){return Ge.apply(void 0,Ve(t).concat([n(1)]))}),s);o(He({},e,t,l))}},function(){return me()(h),function(){Object(ve.cancel)(p)}}};function Ye(e){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qe(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Ze(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Je(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){et(e,t,n[t])}))}return e}function et(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function tt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function nt(e,t){return!t||"object"!==Ye(t)&&"function"!=typeof t?it(e):t}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ot(e,t){return(ot=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function it(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var at=function(e){function t(e,n){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=(r=nt(this,rt(t).call(this,e,n))).props,i=o.isActive,a=o.attributeName,u=o.from,c=o.to,l=o.steps,s=o.children;if(r.handleStyleChange=r.handleStyleChange.bind(it(it(r))),r.changeStyle=r.changeStyle.bind(it(it(r))),!i)return r.state={style:{}},"function"==typeof s&&(r.state={style:c}),nt(r);if(l&&l.length)r.state={style:l[0].style};else if(u){if("function"==typeof s)return r.state={style:u},nt(r);r.state={style:a?et({},a,u):u}}else r.state={style:{}};return r}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ot(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.props,t=e.isActive,n=e.canBegin;this.mounted=!0,t&&n&&this.runAnimation(this.props)}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.isActive,r=t.canBegin,o=t.attributeName,i=t.shouldReAnimate;if(r)if(n){if(!(ye()(e.to,this.props.to)&&e.canBegin&&e.isActive)){var a=!e.canBegin||!e.isActive;this.manager&&this.manager.stop(),this.stopJSAnimation&&this.stopJSAnimation();var u=a||i?this.props.from:e.to;this.setState({style:o?et({},o,u):u}),this.runAnimation(Je({},this.props,{from:u,begin:0}))}}else this.setState({style:o?et({},o,this.props.to):this.props.to})}},{key:"componentWillUnmount",value:function(){this.mounted=!1,this.unSubscribe&&this.unSubscribe(),this.manager&&(this.manager.stop(),this.manager=null),this.stopJSAnimation&&this.stopJSAnimation()}},{key:"runJSAnimation",value:function(e){var t=this,n=e.from,r=e.to,o=e.duration,i=e.easing,a=e.begin,u=e.onAnimationEnd,c=e.onAnimationStart,l=Ke(n,r,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0];if("string"==typeof r)switch(r){case"ease":case"ease-in-out":case"ease-out":case"ease-in":case"linear":return Fe(r);case"spring":return Ue();default:if("cubic-bezier"===r.split("(")[0])return Fe(r)}return"function"==typeof r?r:null}(i),o,this.changeStyle);this.manager.start([c,a,function(){t.stopJSAnimation=l()},o,u])}},{key:"runStepAnimation",value:function(e){var t=this,n=e.steps,r=e.begin,o=e.onAnimationStart,i=n[0],a=i.style,u=i.duration,c=void 0===u?0:u;return this.manager.start([o].concat(Ze(n.reduce((function(e,r,o){if(0===o)return e;var i=r.duration,a=r.easing,u=void 0===a?"ease":a,c=r.style,l=r.properties,s=r.onAnimationEnd,f=o>0?n[o-1]:r,p=l||Object.keys(c);if("function"==typeof u||"spring"===u)return Ze(e).concat([t.runJSAnimation.bind(t,{from:f.style,to:c,duration:i,easing:u}),i]);var h=Ce(p,i,u),d=Je({},f.style,c,{transition:h});return Ze(e).concat([d,i,s]).filter(Me)}),[a,Math.max(c,r)])),[e.onAnimationEnd]))}},{key:"runAnimation",value:function(e){this.manager||(this.manager=we());var t=e.begin,n=e.duration,r=e.attributeName,o=e.to,i=e.easing,a=e.onAnimationStart,u=e.onAnimationEnd,c=e.steps,l=e.children,s=this.manager;if(this.unSubscribe=s.subscribe(this.handleStyleChange),"function"!=typeof i&&"function"!=typeof l&&"spring"!==i)if(c.length>1)this.runStepAnimation(e);else{var f=r?et({},r,o):o,p=Ce(Object.keys(f),n,i);s.start([a,t,Je({},f,{transition:p}),n,u])}else this.runJSAnimation(e)}},{key:"handleStyleChange",value:function(e){this.changeStyle(e)}},{key:"changeStyle",value:function(e){this.mounted&&this.setState({style:e})}},{key:"render",value:function(){var e=this.props,t=e.children,n=(e.begin,e.duration,e.attributeName,e.easing,e.isActive),r=(e.steps,e.from,e.to,e.canBegin,e.onAnimationEnd,e.shouldReAnimate,e.onAnimationReStart,Qe(e,["children","begin","duration","attributeName","easing","isActive","steps","from","to","canBegin","onAnimationEnd","shouldReAnimate","onAnimationReStart"])),a=o.Children.count(t),u=Ae(this.state.style);if("function"==typeof t)return t(u);if(!n||0===a)return t;var c=function(e){var t=e.props,n=t.style,i=void 0===n?{}:n,a=t.className;return Object(o.cloneElement)(e,Je({},r,{style:Je({},i,u),className:a}))};return 1===a?c(o.Children.only(t)):i.a.createElement("div",null,o.Children.map(t,(function(e){return c(e)})))}}])&&tt(n.prototype,r),a&&tt(n,a),t}(o.PureComponent);at.displayName="Animate",at.propTypes={from:s.a.oneOfType([s.a.object,s.a.string]),to:s.a.oneOfType([s.a.object,s.a.string]),attributeName:s.a.string,duration:s.a.number,begin:s.a.number,easing:s.a.oneOfType([s.a.string,s.a.func]),steps:s.a.arrayOf(s.a.shape({duration:s.a.number.isRequired,style:s.a.object.isRequired,easing:s.a.oneOfType([s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),s.a.func]),properties:s.a.arrayOf("string"),onAnimationEnd:s.a.func})),children:s.a.oneOfType([s.a.node,s.a.func]),isActive:s.a.bool,canBegin:s.a.bool,onAnimationEnd:s.a.func,shouldReAnimate:s.a.bool,onAnimationStart:s.a.func,onAnimationReStart:s.a.func},at.defaultProps={begin:0,duration:1e3,from:"",to:"",attributeName:"",easing:"ease",isActive:!0,canBegin:!0,steps:[],onAnimationEnd:function(){},onAnimationStart:function(){}};var ut=at,ct=n(49),lt=n(29),st=n.n(lt);function ft(e){return(ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pt(){return(pt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ht(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function dt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function yt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mt(e,t){return!t||"object"!==ft(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function gt(e){return(gt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function bt(e,t){return(bt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var xt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.steps,n=e.duration;return t&&t.length?t.reduce((function(e,t){return e+(st()(t.duration)&&t.duration>0?t.duration:0)}),0):st()(n)?n:0},wt=function(e){function t(){var e,n;yt(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=mt(this,(e=gt(t)).call.apply(e,[this].concat(o)))).state={isActive:!1},n.handleEnter=function(e,t){var r=n.props,o=r.appearOptions,i=r.enterOptions;n.handleStyleActive(t?o:i)},n.handleExit=function(){n.handleStyleActive(n.props.leaveOptions)},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bt(e,t)}(t,e),n=t,(r=[{key:"handleStyleActive",value:function(e){if(e){var t=e.onAnimationEnd?function(){e.onAnimationEnd()}:null;this.setState(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){dt(e,t,n[t])}))}return e}({},e,{onAnimationEnd:t,isActive:!0}))}}},{key:"parseTimeout",value:function(){var e=this.props,t=e.appearOptions,n=e.enterOptions,r=e.leaveOptions;return xt(t)+xt(n)+xt(r)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=(t.appearOptions,t.enterOptions,t.leaveOptions,ht(t,["children","appearOptions","enterOptions","leaveOptions"]));return i.a.createElement(ct.Transition,pt({},r,{onEnter:this.handleEnter,onExit:this.handleExit,timeout:this.parseTimeout()}),(function(){return i.a.createElement(ut,e.state,o.Children.only(n))}))}}])&&vt(n.prototype,r),a&&vt(n,a),t}(o.Component);wt.propTypes={appearOptions:s.a.object,enterOptions:s.a.object,leaveOptions:s.a.object,children:s.a.element};var Ot=wt;function kt(e){var t=e.component,n=e.children,r=e.appear,a=e.enter,u=e.leave;return i.a.createElement(ct.TransitionGroup,{component:t},o.Children.map(n,(function(e,t){return i.a.createElement(Ot,{appearOptions:r,enterOptions:a,leaveOptions:u,key:"child-".concat(t)},e)})))}kt.propTypes={appear:s.a.object,enter:s.a.object,leave:s.a.object,children:s.a.oneOfType([s.a.array,s.a.element]),component:s.a.any},kt.defaultProps={component:"span"};var Et=ut,St=n(30),Tt=n.n(St),_t=n(5),Pt=n.n(_t),Mt=n(9),jt=n.n(Mt),At=n(23),Ct=n.n(At),Nt=n(14),It=n.n(Nt),Dt=function(e){return 0===e?0:e>0?1:-1},Rt=function(e){return It()(e)&&e.indexOf("%")===e.length-1},Lt=function(e){return st()(e)&&!Ct()(e)},zt=function(e){return Lt(e)||It()(e)},Ft=0,Ut=function(e){var t=++Ft;return"".concat(e||"").concat(t)},Bt=function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!Lt(e)&&!It()(e))return r;if(Rt(e)){var i=e.indexOf("%");n=t*parseFloat(e.slice(0,i))/100}else n=+e;return Ct()(n)&&(n=r),o&&n>t&&(n=t),n},Wt=function(e){if(!e)return null;var t=Object.keys(e);return t&&t.length?e[t[0]]:null},Vt=function(e,t){return Lt(e)&&Lt(t)?function(n){return e+n*(t-e)}:function(){return t}},Ht=function(e,t,n){return e&&e.length?e.find((function(e){return e&&("function"==typeof t?t(e):jt()(e,t))===n})):null};function $t(e){return($t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Gt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gt(n,!0).forEach((function(t){Kt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gt(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Kt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zt(e,t){return!t||"object"!==$t(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Jt(e){return(Jt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function en(e,t){return(en=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var tn=function(e){return Pt()(e)&&zt(e[0])&&zt(e[1])?e.join(" ~ "):e},nn=function(e){function t(){return Yt(this,t),Zt(this,Jt(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&en(e,t)}(t,e),n=t,(r=[{key:"renderContent",value:function(){var e=this.props,t=e.payload,n=e.separator,r=e.formatter,o=e.itemStyle,a=e.itemSorter;if(t&&t.length){var u=(a?Tt()(t,a):t).map((function(e,t){if("none"===e.type)return null;var a=Xt({display:"block",paddingTop:4,paddingBottom:4,color:e.color||"#000"},o),u=e.formatter||r||tn,c=e.name,l=e.value;if(u){var s=u(l,c,e,t);if(Array.isArray(s)){var f=qt(s,2);l=f[0],c=f[1]}else l=s}return i.a.createElement("li",{className:"recharts-tooltip-item",key:"tooltip-item-".concat(t),style:a},zt(c)?i.a.createElement("span",{className:"recharts-tooltip-item-name"},c):null,zt(c)?i.a.createElement("span",{className:"recharts-tooltip-item-separator"},n):null,i.a.createElement("span",{className:"recharts-tooltip-item-value"},l),i.a.createElement("span",{className:"recharts-tooltip-item-unit"},e.unit||""))}));return i.a.createElement("ul",{className:"recharts-tooltip-item-list",style:{padding:0,margin:0}},u)}return null}},{key:"render",value:function(){var e=this.props,t=e.wrapperClassName,n=e.contentStyle,r=e.labelClassName,o=e.labelStyle,a=e.label,u=e.labelFormatter,c=Xt({margin:0,padding:10,backgroundColor:"#fff",border:"1px solid #ccc",whiteSpace:"nowrap"},n),l=Xt({margin:0},o),s=zt(a),f=s?a:"",p=Q()("recharts-default-tooltip",t),h=Q()("recharts-tooltip-label",r);return s&&u&&(f=u(a)),i.a.createElement("div",{className:p,style:c},i.a.createElement("p",{className:h,style:l},f),this.renderContent())}}])&&Qt(n.prototype,r),o&&Qt(n,o),t}(o.PureComponent);nn.displayName="DefaultTooltipContent",nn.propTypes={separator:s.a.string,wrapperClassName:s.a.string,labelClassName:s.a.string,formatter:s.a.func,contentStyle:s.a.object,itemStyle:s.a.object,labelStyle:s.a.object,labelFormatter:s.a.func,label:s.a.any,payload:s.a.arrayOf(s.a.shape({name:s.a.any,value:s.a.oneOfType([s.a.number,s.a.string,s.a.array]),unit:s.a.any})),itemSorter:s.a.func},nn.defaultProps={separator:" : ",contentStyle:{},itemStyle:{},labelStyle:{}};var rn=nn,on=n(7),an=n.n(on);function un(e,t){for(var n in e)if({}.hasOwnProperty.call(e,n)&&(!{}.hasOwnProperty.call(t,n)||e[n]!==t[n]))return!1;for(var r in t)if({}.hasOwnProperty.call(t,r)&&!{}.hasOwnProperty.call(e,r))return!1;return!0}function cn(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ln(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var sn={"aria-current":s.a.string,"aria-details":s.a.any,"aria-disabled":s.a.any,"aria-hidden":s.a.any,"aria-invalid":s.a.any,"aria-keyshortcuts":s.a.any,"aria-label":s.a.any,"aria-roledescription":s.a.any,"aria-autocomplete":s.a.any,"aria-checked":s.a.any,"aria-expanded":s.a.any,"aria-haspopup":s.a.any,"aria-level":s.a.any,"aria-modal":s.a.any,"aria-multiline":s.a.any,"aria-multiselectable":s.a.any,"aria-orientation":s.a.any,"aria-placeholder":s.a.any,"aria-pressed":s.a.any,"aria-readonly":s.a.any,"aria-required":s.a.any,"aria-selected":s.a.any,"aria-sort":s.a.any,"aria-valuemax":s.a.any,"aria-valuemin":s.a.any,"aria-valuenow":s.a.any,"aria-valuetext":s.a.any,"aria-atomic":s.a.any,"aria-busy":s.a.any,"aria-live":s.a.any,"aria-relevant":s.a.any,"aria-dropeffect":s.a.any,"aria-grabbed":s.a.any,"aria-activedescendant":s.a.any,"aria-colcount":s.a.any,"aria-colindex":s.a.any,"aria-colspan":s.a.any,"aria-controls":s.a.any,"aria-describedby":s.a.any,"aria-errormessage":s.a.any,"aria-flowto":s.a.any,"aria-labelledby":s.a.any,"aria-owns":s.a.any,"aria-posinset":s.a.any,"aria-rowcount":s.a.any,"aria-rowindex":s.a.any,"aria-rowspan":s.a.any,"aria-setsize":s.a.any,alignmentBaseline:s.a.string,angle:s.a.number,baselineShift:s.a.string,clip:s.a.string,clipPath:s.a.string,clipRule:s.a.string,color:s.a.string,colorInterpolation:s.a.string,colorInterpolationFilters:s.a.string,colorProfile:s.a.string,colorRendering:s.a.string,cursor:s.a.string,direction:s.a.oneOf(["ltr","rtl","inherit"]),display:s.a.string,dominantBaseline:s.a.string,enableBackground:s.a.string,fill:s.a.string,fillOpacity:s.a.oneOfType([s.a.string,s.a.number]),fillRule:s.a.oneOf(["nonzero","evenodd","inherit"]),filter:s.a.string,floodColor:s.a.string,floodOpacity:s.a.oneOfType([s.a.string,s.a.number]),font:s.a.string,fontFamily:s.a.string,fontSize:s.a.oneOfType([s.a.number,s.a.string]),fontSizeAdjust:s.a.oneOfType([s.a.number,s.a.string]),fontStretch:s.a.oneOf(["normal","wider","narrower","ultra-condensed","extra-condensed","condensed","semi-condensed","semi-expanded","expanded","extra-expanded","ultra-expanded","inherit"]),fontStyle:s.a.oneOf(["normal","italic","oblique","inherit"]),fontVariant:s.a.oneOf(["normal","small-caps","inherit"]),fontWeight:s.a.oneOf(["normal","bold","bolder","lighter",100,200,300,400,500,600,700,800,900,"inherit"]),glyphOrientationHorizontal:s.a.string,glyphOrientationVertical:s.a.string,imageRendering:s.a.oneOf(["auto","optimizeSpeed","optimizeQuality","inherit"]),kerning:s.a.oneOfType([s.a.number,s.a.string]),letterSpacing:s.a.oneOfType([s.a.number,s.a.string]),lightingColor:s.a.string,lineHeight:s.a.oneOfType([s.a.number,s.a.string]),markerEnd:s.a.string,markerMid:s.a.string,markerStart:s.a.string,mask:s.a.string,opacity:s.a.oneOfType([s.a.number,s.a.string]),overflow:s.a.oneOf(["visible","hidden","scroll","auto","inherit"]),pointerEvents:s.a.oneOf(["visiblePainted","visibleFill","visibleStroke","visible","painted","fill","stroke","all","none","inherit"]),shapeRendering:s.a.oneOf(["auto","optimizeSpeed","crispEdges","geometricPrecision","inherit"]),stopColor:s.a.string,stopOpacity:s.a.oneOfType([s.a.number,s.a.string]),stroke:s.a.oneOfType([s.a.number,s.a.string]),strokeDasharray:s.a.string,strokeDashoffset:s.a.oneOfType([s.a.number,s.a.string]),strokeLinecap:s.a.oneOf(["butt","round","square","inherit"]),strokeLinejoin:s.a.oneOf(["miter","round","bevel","inherit"]),strokeMiterlimit:s.a.oneOfType([s.a.number,s.a.string]),strokeOpacity:s.a.oneOfType([s.a.number,s.a.string]),strokeWidth:s.a.oneOfType([s.a.number,s.a.string]),textAnchor:s.a.oneOf(["start","middle","end","inherit"]),textDecoration:s.a.oneOf(["none","underline","overline","line-through","blink","inherit"]),textRendering:s.a.oneOf(["auto","optimizeSpeed","optimizeLegibility","geometricPrecision","inherit"]),unicodeBidi:s.a.oneOf(["normal","embed","bidi-override","inherit"]),visibility:s.a.oneOf(["visible","hidden","collapse","inherit"]),wordSpacing:s.a.oneOfType([s.a.number,s.a.string]),writingMode:s.a.oneOf(["lr-tb","rl-tb","tb-rl","lr","rl","tb","inherit"]),transform:s.a.string,role:s.a.string,focusable:s.a.string,tabIndex:s.a.string,style:s.a.object,width:s.a.number,height:s.a.number,dx:s.a.number,dy:s.a.number,x:s.a.number,y:s.a.number,r:s.a.number,radius:s.a.oneOfType([s.a.number,s.a.array])},fn={onClick:s.a.func,onMouseDown:s.a.func,onMouseUp:s.a.func,onMouseOver:s.a.func,onMouseMove:s.a.func,onMouseOut:s.a.func,onMouseEnter:s.a.func,onMouseLeave:s.a.func,onTouchEnd:s.a.func,onTouchMove:s.a.func,onTouchStart:s.a.func,onTouchCancel:s.a.func},pn={click:"onClick",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",mouseout:"onMouseOut",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",touchcancel:"onTouchCancel",touchend:"onTouchEnd",touchmove:"onTouchMove",touchstart:"onTouchStart"},hn=["plainline","line","square","rect","circle","cross","diamond","star","triangle","wye","none"],dn=["none"],yn=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":""},vn=function(e,t){var n=[],r=[];return r=Pt()(t)?t.map((function(e){return yn(e)})):[yn(t)],i.a.Children.forEach(e,(function(e){var t=e&&e.type&&(e.type.displayName||e.type.name);-1!==r.indexOf(t)&&n.push(e)})),n},mn=function(e,t){var n=vn(e,t);return n&&n[0]},gn=function(e){if(!e||fe()(e))return null;var t=i.a.isValidElement(e)?e.props:e;if(!an()(t))return null;var n=null;for(var r in t)({}).hasOwnProperty.call(t,r)&&sn[r]&&(n||(n={}),n[r]=t[r]);return n},bn=function(e,t){return function(n){return e(t,n),null}},xn=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!e||fe()(e))return null;var r=i.a.isValidElement(e)?e.props:e;if(!an()(r))return null;var o=null;for(var a in r)({}).hasOwnProperty.call(r,a)&&fn[a]&&(o||(o={}),o[a]=t||(n?bn(r[a],r):r[a]));return o},wn=function(e,t,n){return function(r){return e(t,n,r),null}},On=function(e,t,n){if(!an()(e))return null;var r=null;for(var o in e)({}).hasOwnProperty.call(e,o)&&fn[o]&&fe()(e[o])&&(r||(r={}),r[o]=wn(e[o],t,n));return r},kn=function(e){if(!e||!e.props)return!1;var t=e.props,n=t.width,r=t.height;return!(!Lt(n)||n<=0||!Lt(r)||r<=0)},En=function(){return!("undefined"!=typeof window&&window.document&&window.document.createElement&&window.setTimeout)},Sn=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColormatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-url","foreignObject","g","glyph","glyphRef","hkern","image","line","lineGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"],Tn=function(e,t){if(le()(e)&&le()(t))return!0;if(!le()(e)&&!le()(t)){var n=e.props||{},r=n.children,o=ln(n,["children"]),i=t.props||{},a=i.children,u=ln(i,["children"]);return r&&a?un(o,u)&&_n(r,a):!r&&!a&&un(o,u)}return!1},_n=function e(t,n){if(t===n)return!0;if(o.Children.count(t)!==o.Children.count(n))return!1;var r=o.Children.count(t);if(0===r)return!0;if(1===r)return Tn(Pt()(t)?t[0]:t,Pt()(n)?n[0]:n);for(var i=0;i<r;i++){var a=t[i],u=n[i];if(Pt()(a)||Pt()(u)){if(!e(a,u))return!1}else if(!Tn(a,u))return!1}return!0},Pn=function(e,t){var n=[],r={};return o.Children.forEach(e,(function(e,o){if(e&&function(e){return e&&e.type&&It()(e.type)&&Sn.indexOf(e.type)>=0}(e))n.push(e);else if(e&&t[yn(e.type)]){var i=yn(e.type),a=t[i],u=a.handler,c=a.once;if(c&&!r[i]||!c){var l=u(e,i,o);Pt()(l)?n=[n].concat(cn(l)):n.push(l),r[i]=!0}}})),n};function Mn(e){return(Mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function An(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jn(n,!0).forEach((function(t){Cn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jn(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Cn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Nn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function In(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dn(e,t){return!t||"object"!==Mn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Rn(e){return(Rn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ln(e,t){return(Ln=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var zn="recharts-tooltip-wrapper",Fn=function(e){return e.dataKey},Un={allowEscapeViewBox:s.a.shape({x:s.a.boolean,y:s.a.boolean}),content:s.a.oneOfType([s.a.element,s.a.func]),viewBox:s.a.shape({x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number}),active:s.a.bool,separator:s.a.string,formatter:s.a.func,offset:s.a.number,itemStyle:s.a.object,labelStyle:s.a.object,wrapperStyle:s.a.object,contentStyle:s.a.object,cursor:s.a.oneOfType([s.a.bool,s.a.element,s.a.object]),coordinate:s.a.shape({x:s.a.number,y:s.a.number}),position:s.a.shape({x:s.a.number,y:s.a.number}),label:s.a.any,payload:s.a.arrayOf(s.a.shape({name:s.a.any,value:s.a.oneOfType([s.a.number,s.a.string,s.a.array]),unit:s.a.any,type:s.a.oneOf(dn)})),paylodUniqBy:s.a.oneOfType([s.a.func,s.a.bool]),isAnimationActive:s.a.bool,animationDuration:s.a.number,animationEasing:s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),itemSorter:s.a.func,filterNull:s.a.bool,useTranslate3d:s.a.bool},Bn={active:!1,allowEscapeViewBox:{x:!1,y:!1},offset:10,viewBox:{x1:0,x2:0,y1:0,y2:0},coordinate:{x:0,y:0},cursorStyle:{},separator:" : ",wrapperStyle:{},contentStyle:{},itemStyle:{},labelStyle:{},cursor:!0,isAnimationActive:!En(),animationEasing:"ease",animationDuration:400,filterNull:!0,useTranslate3d:!1},Wn=function(e){function t(){var e,n;Nn(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=Dn(this,(e=Rn(t)).call.apply(e,[this].concat(o)))).state={boxWidth:-1,boxHeight:-1},n.getTranslate=function(e){var t=e.key,r=e.tooltipDimension,o=e.viewBoxDimension,i=n.props,a=i.allowEscapeViewBox,u=i.coordinate,c=i.offset,l=i.position,s=i.viewBox;if(l&&Lt(l[t]))return l[t];var f=u[t]-r-c,p=u[t]+c;return a[t]?p:u[t]+r+c>s[t]+o?Math.max(f,s[t]):Math.max(p,s[t])},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ln(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.updateBBox()}},{key:"componentDidUpdate",value:function(){this.updateBBox()}},{key:"updateBBox",value:function(){var e=this.state,t=e.boxWidth,n=e.boxHeight;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var r=this.wrapperNode.getBoundingClientRect();(Math.abs(r.width-t)>1||Math.abs(r.height-n)>1)&&this.setState({boxWidth:r.width,boxHeight:r.height})}else-1===t&&-1===n||this.setState({boxWidth:-1,boxHeight:-1})}},{key:"render",value:function(){var e,t,n,r=this,o=this.props,a=o.payload,u=o.isAnimationActive,c=o.animationDuration,l=o.animationEasing,s=o.filterNull,f=function(e,t){return!0===e?he()(t,Fn):fe()(e)?he()(t,e):t}(o.paylodUniqBy,s&&a&&a.length?a.filter((function(e){return!le()(e.value)})):a),p=f&&f.length,h=this.props,d=h.content,y=h.viewBox,v=h.coordinate,m=h.position,g=h.active,b=An({pointerEvents:"none",visibility:g&&p?"visible":"hidden",position:"absolute",top:0},h.wrapperStyle);if(m&&Lt(m.x)&&Lt(m.y))t=m.x,n=m.y;else{var x=this.state,w=x.boxWidth,O=x.boxHeight;w>0&&O>0&&v?(t=this.getTranslate({key:"x",tooltipDimension:w,viewBoxDimension:y.width}),n=this.getTranslate({key:"y",tooltipDimension:O,viewBoxDimension:y.height})):b.visibility="hidden"}b=An({},Ae({transform:this.props.useTranslate3d?"translate3d(".concat(t,"px, ").concat(n,"px, 0)"):"translate(".concat(t,"px, ").concat(n,"px)")}),{},b),u&&g&&(b=An({},Ae({transition:"transform ".concat(c,"ms ").concat(l)}),{},b));var k=Q()(zn,(Cn(e={},"".concat(zn,"-right"),Lt(t)&&v&&Lt(v.x)&&t>=v.x),Cn(e,"".concat(zn,"-left"),Lt(t)&&v&&Lt(v.x)&&t<v.x),Cn(e,"".concat(zn,"-bottom"),Lt(n)&&v&&Lt(v.y)&&n>=v.y),Cn(e,"".concat(zn,"-top"),Lt(n)&&v&&Lt(v.y)&&n<v.y),e));return i.a.createElement("div",{className:k,style:b,ref:function(e){r.wrapperNode=e}},function(e,t){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement(rn,t)}(d,An({},this.props,{payload:f})))}}])&&In(n.prototype,r),o&&In(n,o),t}(o.PureComponent);Wn.displayName="Tooltip",Wn.propTypes=Un,Wn.defaultProps=Bn;var Vn=Wn;function Hn(e){return(Hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $n(){return($n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function qn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Gn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gn(n,!0).forEach((function(t){Kn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gn(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Kn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zn(e,t){return!t||"object"!==Hn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Jn(e){return(Jn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function er(e,t){return(er=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var tr=function(e){function t(){return Yn(this,t),Zn(this,Jn(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&er(e,t)}(t,e),n=t,o=[{key:"renderLineItem",value:function(e,t){var n;if(i.a.isValidElement(e))n=i.a.cloneElement(e,t);else if(fe()(e))n=e(t);else{var r=t.x1,o=t.y1,a=t.x2,u=t.y2,c=t.key,l=qn(t,["x1","y1","x2","y2","key"]);n=i.a.createElement("line",$n({},gn(l),{x1:r,y1:o,x2:a,y2:u,fill:"none",key:c}))}return n}}],(r=[{key:"renderHorizontal",value:function(e){var t=this,n=this.props,r=n.x,o=n.width,a=n.horizontal;if(!e||!e.length)return null;var u=e.map((function(e,n){var i=Xn({},t.props,{x1:r,y1:e,x2:r+o,y2:e,key:"line-".concat(n),index:n});return t.constructor.renderLineItem(a,i)}));return i.a.createElement("g",{className:"recharts-cartesian-grid-horizontal"},u)}},{key:"renderVertical",value:function(e){var t=this,n=this.props,r=n.y,o=n.height,a=n.vertical;if(!e||!e.length)return null;var u=e.map((function(e,n){var i=Xn({},t.props,{x1:e,y1:r,x2:e,y2:r+o,key:"line-".concat(n),index:n});return t.constructor.renderLineItem(a,i)}));return i.a.createElement("g",{className:"recharts-cartesian-grid-vertical"},u)}},{key:"renderVerticalStripes",value:function(e){var t=this.props.verticalFill;if(!t||!t.length)return null;var n=this.props,r=n.fillOpacity,o=n.x,a=n.y,u=n.width,c=n.height,l=e.slice().sort((function(e,t){return e-t}));o!==l[0]&&l.unshift(0);var s=l.map((function(e,n){var s=l[n+1]?l[n+1]-e:o+u-e;if(s<=0)return null;var f=n%t.length;return i.a.createElement("rect",{key:"react-".concat(n),x:Math.round(e+o-o),y:a,width:s,height:c,stroke:"none",fill:t[f],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return i.a.createElement("g",{className:"recharts-cartesian-gridstripes-vertical"},s)}},{key:"renderHorizontalStripes",value:function(e){var t=this.props.horizontalFill;if(!t||!t.length)return null;var n=this.props,r=n.fillOpacity,o=n.x,a=n.y,u=n.width,c=n.height,l=e.slice().sort((function(e,t){return e-t}));a!==l[0]&&l.unshift(0);var s=l.map((function(e,n){var s=l[n+1]?l[n+1]-e:a+c-e;if(s<=0)return null;var f=n%t.length;return i.a.createElement("rect",{key:"react-".concat(n),y:Math.round(e+a-a),x:o,height:s,width:u,stroke:"none",fill:t[f],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return i.a.createElement("g",{className:"recharts-cartesian-gridstripes-horizontal"},s)}},{key:"renderBackground",value:function(){var e=this.props.fill;if(!e||"none"===e)return null;var t=this.props,n=t.fillOpacity,r=t.x,o=t.y,a=t.width,u=t.height;return i.a.createElement("rect",{x:r,y:o,width:a,height:u,stroke:"none",fill:e,fillOpacity:n,className:"recharts-cartesian-grid-bg"})}},{key:"render",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,o=e.height,a=e.horizontal,u=e.vertical,c=e.horizontalCoordinatesGenerator,l=e.verticalCoordinatesGenerator,s=e.xAxis,f=e.yAxis,p=e.offset,h=e.chartWidth,d=e.chartHeight;if(!Lt(r)||r<=0||!Lt(o)||o<=0||!Lt(t)||t!==+t||!Lt(n)||n!==+n)return null;var y=this.props,v=y.horizontalPoints,m=y.verticalPoints;return v&&v.length||!fe()(c)||(v=c({yAxis:f,width:h,height:d,offset:p})),m&&m.length||!fe()(l)||(m=l({xAxis:s,width:h,height:d,offset:p})),i.a.createElement("g",{className:"recharts-cartesian-grid"},this.renderBackground(),a&&this.renderHorizontal(v),u&&this.renderVertical(m),a&&this.renderHorizontalStripes(v),u&&this.renderVerticalStripes(m))}}])&&Qn(n.prototype,r),o&&Qn(n,o),t}(o.PureComponent);tr.displayName="CartesianGrid",tr.propTypes=Xn({},sn,{x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number,horizontal:s.a.oneOfType([s.a.object,s.a.element,s.a.func,s.a.bool]),vertical:s.a.oneOfType([s.a.object,s.a.element,s.a.func,s.a.bool]),horizontalPoints:s.a.arrayOf(s.a.number),verticalPoints:s.a.arrayOf(s.a.number),horizontalCoordinatesGenerator:s.a.func,verticalCoordinatesGenerator:s.a.func,xAxis:s.a.object,yAxis:s.a.object,offset:s.a.object,chartWidth:s.a.number,chartHeight:s.a.number,verticalFill:s.a.arrayOf(s.a.string),horizontalFill:s.a.arrayOf(s.a.string)}),tr.defaultProps={horizontal:!0,vertical:!0,horizontalPoints:[],verticalPoints:[],stroke:"#ccc",fill:"none",verticalFill:[],horizontalFill:[]};var nr=tr,rr=n(11),or=n.n(rr),ir=function(){};function ar(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function ur(e){this._context=e}ur.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:ar(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:ar(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function cr(e){this._context=e}cr.prototype={areaStart:ir,areaEnd:ir,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:ar(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function lr(e){this._context=e}lr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:ar(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function sr(e){this._context=e}sr.prototype={areaStart:ir,areaEnd:ir,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};function fr(e){this._context=e}fr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var pr=function(e){return new fr(e)};function hr(e){return e<0?-1:1}function dr(e,t,n){var r=e._x1-e._x0,o=t-e._x1,i=(e._y1-e._y0)/(r||o<0&&-0),a=(n-e._y1)/(o||r<0&&-0),u=(i*o+a*r)/(r+o);return(hr(i)+hr(a))*Math.min(Math.abs(i),Math.abs(a),.5*Math.abs(u))||0}function yr(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function vr(e,t,n){var r=e._x0,o=e._y0,i=e._x1,a=e._y1,u=(i-r)/3;e._context.bezierCurveTo(r+u,o+u*t,i-u,a-u*n,i,a)}function mr(e){this._context=e}function gr(e){this._context=new br(e)}function br(e){this._context=e}function xr(e){this._context=e}function wr(e){var t,n,r=e.length-1,o=new Array(r),i=new Array(r),a=new Array(r);for(o[0]=0,i[0]=2,a[0]=e[0]+2*e[1],t=1;t<r-1;++t)o[t]=1,i[t]=4,a[t]=4*e[t]+2*e[t+1];for(o[r-1]=2,i[r-1]=7,a[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=o[t]/i[t-1],i[t]-=n,a[t]-=n*a[t-1];for(o[r-1]=a[r-1]/i[r-1],t=r-2;t>=0;--t)o[t]=(a[t]-o[t+1])/i[t];for(i[r-1]=(e[r]+o[r-1])/2,t=0;t<r-1;++t)i[t]=2*e[t+1]-o[t+1];return[o,i]}mr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:vr(this,this._t0,yr(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,vr(this,yr(this,n=dr(this,e,t)),n);break;default:vr(this,this._t0,n=dr(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(gr.prototype=Object.create(mr.prototype)).point=function(e,t){mr.prototype.point.call(this,t,e)},br.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,o,i){this._context.bezierCurveTo(t,e,r,n,i,o)}},xr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=wr(e),o=wr(t),i=0,a=1;a<n;++i,++a)this._context.bezierCurveTo(r[0][i],o[0][i],r[1][i],o[1][i],e[a],t[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};function Or(e,t){this._context=e,this._t=t}Or.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var kr=Math.PI,Er=2*kr,Sr=Er-1e-6;function Tr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function _r(){return new Tr}Tr.prototype=_r.prototype={constructor:Tr,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,o,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(e,t,n,r,o){e=+e,t=+t,n=+n,r=+r,o=+o;var i=this._x1,a=this._y1,u=n-e,c=r-t,l=i-e,s=a-t,f=l*l+s*s;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(s*u-c*l)>1e-6&&o){var p=n-i,h=r-a,d=u*u+c*c,y=p*p+h*h,v=Math.sqrt(d),m=Math.sqrt(f),g=o*Math.tan((kr-Math.acos((d+f-y)/(2*v*m)))/2),b=g/m,x=g/v;Math.abs(b-1)>1e-6&&(this._+="L"+(e+b*l)+","+(t+b*s)),this._+="A"+o+","+o+",0,0,"+ +(s*p>l*h)+","+(this._x1=e+x*u)+","+(this._y1=t+x*c)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,o,i){e=+e,t=+t,i=!!i;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),c=e+a,l=t+u,s=1^i,f=i?r-o:o-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+l:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+c+","+l),n&&(f<0&&(f=f%Er+Er),f>Sr?this._+="A"+n+","+n+",0,1,"+s+","+(e-a)+","+(t-u)+"A"+n+","+n+",0,1,"+s+","+(this._x1=c)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=kr)+","+s+","+(this._x1=e+n*Math.cos(o))+","+(this._y1=t+n*Math.sin(o))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Pr=_r,Mr=function(e){return function(){return e}};function jr(e){return e[0]}function Ar(e){return e[1]}var Cr=function(){var e=jr,t=Ar,n=Mr(!0),r=null,o=pr,i=null;function a(a){var u,c,l,s=a.length,f=!1;for(null==r&&(i=o(l=Pr())),u=0;u<=s;++u)!(u<s&&n(c=a[u],u,a))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+e(c,u,a),+t(c,u,a));if(l)return i=null,l+""||null}return a.x=function(t){return arguments.length?(e="function"==typeof t?t:Mr(+t),a):e},a.y=function(e){return arguments.length?(t="function"==typeof e?e:Mr(+e),a):t},a.defined=function(e){return arguments.length?(n="function"==typeof e?e:Mr(!!e),a):n},a.curve=function(e){return arguments.length?(o=e,null!=r&&(i=o(r)),a):o},a.context=function(e){return arguments.length?(null==e?r=i=null:i=o(r=e),a):r},a},Nr=function(){var e=jr,t=null,n=Mr(0),r=Ar,o=Mr(!0),i=null,a=pr,u=null;function c(c){var l,s,f,p,h,d=c.length,y=!1,v=new Array(d),m=new Array(d);for(null==i&&(u=a(h=Pr())),l=0;l<=d;++l){if(!(l<d&&o(p=c[l],l,c))===y)if(y=!y)s=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=l-1;f>=s;--f)u.point(v[f],m[f]);u.lineEnd(),u.areaEnd()}y&&(v[l]=+e(p,l,c),m[l]=+n(p,l,c),u.point(t?+t(p,l,c):v[l],r?+r(p,l,c):m[l]))}if(h)return u=null,h+""||null}function l(){return Cr().defined(o).curve(a).context(i)}return c.x=function(n){return arguments.length?(e="function"==typeof n?n:Mr(+n),t=null,c):e},c.x0=function(t){return arguments.length?(e="function"==typeof t?t:Mr(+t),c):e},c.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:Mr(+e),c):t},c.y=function(e){return arguments.length?(n="function"==typeof e?e:Mr(+e),r=null,c):n},c.y0=function(e){return arguments.length?(n="function"==typeof e?e:Mr(+e),c):n},c.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:Mr(+e),c):r},c.lineX0=c.lineY0=function(){return l().x(e).y(n)},c.lineY1=function(){return l().x(e).y(r)},c.lineX1=function(){return l().x(t).y(n)},c.defined=function(e){return arguments.length?(o="function"==typeof e?e:Mr(!!e),c):o},c.curve=function(e){return arguments.length?(a=e,null!=i&&(u=a(i)),c):a},c.context=function(e){return arguments.length?(null==e?i=u=null:u=a(i=e),c):i},c};function Ir(e){return(Ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dr(){return(Dr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Rr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Lr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rr(n,!0).forEach((function(t){zr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Fr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ur(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Br(e,t){return!t||"object"!==Ir(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wr(e){return(Wr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vr(e,t){return(Vr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Hr={curveBasisClosed:function(e){return new cr(e)},curveBasisOpen:function(e){return new lr(e)},curveBasis:function(e){return new ur(e)},curveLinearClosed:function(e){return new sr(e)},curveLinear:pr,curveMonotoneX:function(e){return new mr(e)},curveMonotoneY:function(e){return new gr(e)},curveNatural:function(e){return new xr(e)},curveStep:function(e){return new Or(e,.5)},curveStepAfter:function(e){return new Or(e,1)},curveStepBefore:function(e){return new Or(e,0)}},$r=function(e){return e.x===+e.x&&e.y===+e.y},qr=function(e){return e.x},Gr=function(e){return e.y},Xr=function(e){function t(){return Fr(this,t),Br(this,Wr(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vr(e,t)}(t,e),n=t,(r=[{key:"getPath",value:function(){var e,t=this.props,n=t.type,r=t.points,o=t.baseLine,i=t.layout,a=t.connectNulls,u=function(e,t){if(fe()(e))return e;var n="curve".concat(e.slice(0,1).toUpperCase()).concat(e.slice(1));return"curveMonotone"===n&&t?Hr["".concat(n).concat("vertical"===t?"Y":"X")]:Hr[n]||pr}(n,i),c=a?r.filter((function(e){return $r(e)})):r;if(Pt()(o)){var l=a?o.filter((function(e){return $r(e)})):o,s=c.map((function(e,t){return Lr({},e,{base:l[t]})}));return(e="vertical"===i?Nr().y(Gr).x1(qr).x0((function(e){return e.base.x})):Nr().x(qr).y1(Gr).y0((function(e){return e.base.y}))).defined($r).curve(u),e(s)}return(e="vertical"===i&&Lt(o)?Nr().y(Gr).x1(qr).x0(o):Lt(o)?Nr().x(qr).y1(Gr).y0(o):Cr().x(qr).y(Gr)).defined($r).curve(u),e(c)}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.points,r=e.path,o=e.pathRef;if(!(n&&n.length||r))return null;var a=n&&n.length?this.getPath():r;return i.a.createElement("path",Dr({},gn(this.props),xn(this.props,null,!0),{className:Q()("recharts-curve",t),d:a,ref:o}))}}])&&Ur(n.prototype,r),o&&Ur(n,o),t}(o.PureComponent);Xr.displayName="Curve",Xr.propTypes=Lr({},sn,{className:s.a.string,type:s.a.oneOfType([s.a.oneOf(["basis","basisClosed","basisOpen","linear","linearClosed","natural","monotoneX","monotoneY","monotone","step","stepBefore","stepAfter"]),s.a.func]),layout:s.a.oneOf(["horizontal","vertical"]),baseLine:s.a.oneOfType([s.a.number,s.a.array]),points:s.a.arrayOf(s.a.object),connectNulls:s.a.bool,path:s.a.string,pathRef:s.a.func}),Xr.defaultProps={type:"linear",points:[],connectNulls:!1};var Kr=Xr;function Yr(e){return(Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qr(){return(Qr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Zr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Jr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function eo(e,t){return!t||"object"!==Yr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function to(e){return(to=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function no(e,t){return(no=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ro=function(e){function t(){return Zr(this,t),eo(this,to(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&no(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.cx,n=e.cy,r=e.r,o=e.className,a=Q()("recharts-dot",o);return t===+t&&n===+n&&r===+r?i.a.createElement("circle",Qr({},gn(this.props),xn(this.props,null,!0),{className:a,cx:t,cy:n,r:r})):null}}])&&Jr(n.prototype,r),o&&Jr(n,o),t}(o.PureComponent);ro.displayName="Dot",ro.propTypes={className:s.a.string,cx:s.a.number,cy:s.a.number,r:s.a.number};var oo=ro;function io(){return(io=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ao(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var uo={className:s.a.string,children:s.a.oneOfType([s.a.arrayOf(s.a.node),s.a.node])};function co(e){var t=e.children,n=e.className,r=ao(e,["children","className"]),o=Q()("recharts-layer",n);return i.a.createElement("g",io({className:o},r),t)}co.propTypes=uo;var lo=co,so=n(133),fo=n.n(so),po=n(51),ho=n.n(po);function yo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yo(n,!0).forEach((function(t){mo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yo(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function go(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var bo={widthCache:{},cacheCount:0},xo={position:"absolute",top:"-20000px",left:0,padding:0,margin:0,border:"none",whiteSpace:"pre"},wo=["minWidth","maxWidth","width","minHeight","maxHeight","height","top","left","fontSize","lineHeight","padding","margin","paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom"];var Oo=function(e){return Object.keys(e).reduce((function(t,n){return"".concat(t).concat((i=n,i.split("").reduce((function(e,t){return t===t.toUpperCase()?[].concat(go(e),["-",t.toLowerCase()]):[].concat(go(e),[t])}),[]).join("")),":").concat((r=n,o=e[n],wo.indexOf(r)>=0&&o===+o?"".concat(o,"px"):o),";");var r,o,i}),"")},ko=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(null==e||En())return{width:0,height:0};var n="".concat(e),r=Oo(t),o="".concat(n,"-").concat(r);if(bo.widthCache[o])return bo.widthCache[o];try{var i=document.getElementById("recharts_measurement_span");i||((i=document.createElement("span")).setAttribute("id","recharts_measurement_span"),document.body.appendChild(i));var a=vo({},xo,{},t);Object.keys(a).map((function(e){return i.style[e]=a[e],e})),i.textContent=n;var u=i.getBoundingClientRect(),c={width:u.width,height:u.height};return bo.widthCache[o]=c,++bo.cacheCount>2e3&&(bo.cacheCount=0,bo.widthCache={}),c}catch(e){return{width:0,height:0}}};function Eo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function So(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function To(e){return(To="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _o(){return(_o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Po(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Mo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function jo(e,t){return!t||"object"!==To(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ao(e){return(Ao=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Co(e,t){return(Co=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var No=/[ \f\n\r\t\v\u2028\u2029]+/,Io=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=jo(this,Ao(t).call(this,e))).getWordsWithoutCalculate=function(e){return[{words:le()(e.children)?[]:e.children.toString().split(No)}]},n.state={wordsByLines:n.getWordsByLines(e,!0)},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Co(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.updateWordsByLines(this.props,!0)}},{key:"componentDidUpdate",value:function(e){if(e.width!==this.props.width||e.scaleToFit!==this.props.scaleToFit||e.children!==this.props.children||e.style!==this.props.style){var t=this.props.children!==e.children||this.props.style!==e.style;this.updateWordsByLines(this.props,t)}}},{key:"updateWordsByLines",value:function(e,t){this.setState({wordsByLines:this.getWordsByLines(e,t)})}},{key:"getWordsByLines",value:function(e,t){if((e.width||e.scaleToFit)&&!En()){if(t){var n=function(e){try{return{wordsWithComputedWidth:(le()(e.children)?[]:e.children.toString().split(No)).map((function(t){return{word:t,width:ko(t,e.style).width}})),spaceWidth:ko(" ",e.style).width}}catch(e){return null}}(e);if(!n)return this.getWordsWithoutCalculate(e);var r=n.wordsWithComputedWidth,o=n.spaceWidth;this.wordsWithComputedWidth=r,this.spaceWidth=o}return this.calculateWordsByLines(this.wordsWithComputedWidth,this.spaceWidth,e.width)}return this.getWordsWithoutCalculate(e)}},{key:"calculateWordsByLines",value:function(e,t,n){var r=this.props.scaleToFit;return(e||[]).reduce((function(e,o){var i=o.word,a=o.width,u=e[e.length-1];if(u&&(null==n||r||u.width+a+t<n))u.words.push(i),u.width+=a+t;else{var c={words:[i],width:a};e.push(c)}return e}),[])}},{key:"render",value:function(){var e=this.props,t=e.dx,n=e.dy,r=e.textAnchor,o=e.verticalAnchor,a=e.scaleToFit,u=e.angle,c=e.lineHeight,l=e.capHeight,s=e.className,f=Po(e,["dx","dy","textAnchor","verticalAnchor","scaleToFit","angle","lineHeight","capHeight","className"]),p=this.state.wordsByLines;if(!zt(f.x)||!zt(f.y))return null;var h,d=f.x+(Lt(t)?t:0),y=f.y+(Lt(n)?n:0);switch(o){case"start":h=ho()("calc(".concat(l,")"));break;case"middle":h=ho()("calc(".concat((p.length-1)/2," * -").concat(c," + (").concat(l," / 2))"));break;default:h=ho()("calc(".concat(p.length-1," * -").concat(c,")"))}var v=[];if(a){var m=p[0].width;v.push("scale(".concat(this.props.width/m,")"))}return u&&v.push("rotate(".concat(u,", ").concat(d,", ").concat(y,")")),v.length&&(f.transform=v.join(" ")),i.a.createElement("text",_o({},gn(f),xn(f),{x:d,y:y,className:Q()("recharts-text",s),textAnchor:r}),p.map((function(e,t){return i.a.createElement("tspan",{x:d,dy:0===t?h:c,key:t},e.words.join(" "))})))}}])&&Mo(n.prototype,r),o&&Mo(n,o),t}(o.Component);Io.propTypes=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Eo(n,!0).forEach((function(t){So(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Eo(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sn,{scaleToFit:s.a.bool,angle:s.a.number,textAnchor:s.a.oneOf(["start","middle","end","inherit"]),verticalAnchor:s.a.oneOf(["start","middle","end"]),style:s.a.object}),Io.defaultProps={x:0,y:0,lineHeight:"1em",capHeight:"0.71em",scaleToFit:!1,textAnchor:"start",verticalAnchor:"end"};var Do=Io,Ro=n(36),Lo=n.n(Ro),zo=n(134),Fo=n.n(zo),Uo=n(76),Bo=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},Wo=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return Bo(t(e),n)}),{left:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)<0?r=i+1:o=i}return r},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)>0?o=i:r=i+1}return r}}};var Vo=Wo(Bo),Ho=Vo.right,$o=(Vo.left,Ho);var qo=function(e){return null===e?NaN:+e},Go=Array.prototype,Xo=(Go.slice,Go.map,function(e,t,n){e=+e,t=+t,n=(o=arguments.length)<2?(t=e,e=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(o);++r<o;)i[r]=e+r*n;return i}),Ko=Math.sqrt(50),Yo=Math.sqrt(10),Qo=Math.sqrt(2),Zo=function(e,t,n){var r,o,i,a,u=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(o=e,e=t,t=o),0===(a=Jo(e,t,n))||!isFinite(a))return[];if(a>0)for(e=Math.ceil(e/a),t=Math.floor(t/a),i=new Array(o=Math.ceil(t-e+1));++u<o;)i[u]=(e+u)*a;else for(e=Math.floor(e*a),t=Math.ceil(t*a),i=new Array(o=Math.ceil(e-t+1));++u<o;)i[u]=(e-u)/a;return r&&i.reverse(),i};function Jo(e,t,n){var r=(t-e)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=Ko?10:i>=Yo?5:i>=Qo?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=Ko?10:i>=Yo?5:i>=Qo?2:1)}function ei(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=Ko?o*=10:i>=Yo?o*=5:i>=Qo&&(o*=2),t<e?-o:o}var ti=function(e,t,n){if(null==n&&(n=qo),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,o=(r-1)*t,i=Math.floor(o),a=+n(e[i],i,e);return a+(+n(e[i+1],i+1,e)-a)*(o-i)}};function ni(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function ri(e,t){switch(arguments.length){case 0:break;case 1:this.interpolator(e);break;default:this.interpolator(t).domain(e)}return this}function oi(){}function ii(e,t){var n=new oi;if(e instanceof oi)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,o=-1,i=e.length;if(null==t)for(;++o<i;)n.set(o,e[o]);else for(;++o<i;)n.set(t(r=e[o],o,e),r)}else if(e)for(var a in e)n.set(a,e[a]);return n}oi.prototype=ii.prototype={constructor:oi,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var ai=ii;function ui(){}var ci=ai.prototype;function li(e,t){var n=new ui;if(e instanceof ui)e.each((function(e){n.add(e)}));else if(e){var r=-1,o=e.length;if(null==t)for(;++r<o;)n.add(e[r]);else for(;++r<o;)n.add(t(e[r],r,e))}return n}ui.prototype=li.prototype={constructor:ui,has:ci.has,add:function(e){return this["$"+(e+="")]=e,this},remove:ci.remove,clear:ci.clear,values:ci.keys,size:ci.size,empty:ci.empty,each:ci.each};var si=Array.prototype,fi=si.map,pi=si.slice,hi={name:"implicit"};function di(){var e=ai(),t=[],n=[],r=hi;function o(o){var i=o+"",a=e.get(i);if(!a){if(r!==hi)return r;e.set(i,a=t.push(o))}return n[(a-1)%n.length]}return o.domain=function(n){if(!arguments.length)return t.slice();t=[],e=ai();for(var r,i,a=-1,u=n.length;++a<u;)e.has(i=(r=n[a])+"")||e.set(i,t.push(r));return o},o.range=function(e){return arguments.length?(n=pi.call(e),o):n.slice()},o.unknown=function(e){return arguments.length?(r=e,o):r},o.copy=function(){return di(t,n).unknown(r)},ni.apply(o,arguments),o}function yi(){var e,t,n=di().unknown(void 0),r=n.domain,o=n.range,i=[0,1],a=!1,u=0,c=0,l=.5;function s(){var n=r().length,s=i[1]<i[0],f=i[s-0],p=i[1-s];e=(p-f)/Math.max(1,n-u+2*c),a&&(e=Math.floor(e)),f+=(p-f-e*(n-u))*l,t=e*(1-u),a&&(f=Math.round(f),t=Math.round(t));var h=Xo(n).map((function(t){return f+e*t}));return o(s?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),s()):r()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],s()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],a=!0,s()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(a=!!e,s()):a},n.padding=function(e){return arguments.length?(u=Math.min(1,c=+e),s()):u},n.paddingInner=function(e){return arguments.length?(u=Math.min(1,e),s()):u},n.paddingOuter=function(e){return arguments.length?(c=+e,s()):c},n.align=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),s()):l},n.copy=function(){return yi(r(),i).round(a).paddingInner(u).paddingOuter(c).align(l)},ni.apply(s(),arguments)}function vi(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return vi(t())},e}function mi(){return vi(yi.apply(null,arguments).paddingInner(1))}var gi=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function bi(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function xi(){}var wi="\\s*([+-]?\\d+)\\s*",Oi="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ki="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ei=/^#([0-9a-f]{3,8})$/,Si=new RegExp("^rgb\\("+[wi,wi,wi]+"\\)$"),Ti=new RegExp("^rgb\\("+[ki,ki,ki]+"\\)$"),_i=new RegExp("^rgba\\("+[wi,wi,wi,Oi]+"\\)$"),Pi=new RegExp("^rgba\\("+[ki,ki,ki,Oi]+"\\)$"),Mi=new RegExp("^hsl\\("+[Oi,ki,ki]+"\\)$"),ji=new RegExp("^hsla\\("+[Oi,ki,ki,Oi]+"\\)$"),Ai={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ci(){return this.rgb().formatHex()}function Ni(){return this.rgb().formatRgb()}function Ii(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=Ei.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?Di(t):3===n?new Fi(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?Ri(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?Ri(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=Si.exec(e))?new Fi(t[1],t[2],t[3],1):(t=Ti.exec(e))?new Fi(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=_i.exec(e))?Ri(t[1],t[2],t[3],t[4]):(t=Pi.exec(e))?Ri(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Mi.exec(e))?Vi(t[1],t[2]/100,t[3]/100,1):(t=ji.exec(e))?Vi(t[1],t[2]/100,t[3]/100,t[4]):Ai.hasOwnProperty(e)?Di(Ai[e]):"transparent"===e?new Fi(NaN,NaN,NaN,0):null}function Di(e){return new Fi(e>>16&255,e>>8&255,255&e,1)}function Ri(e,t,n,r){return r<=0&&(e=t=n=NaN),new Fi(e,t,n,r)}function Li(e){return e instanceof xi||(e=Ii(e)),e?new Fi((e=e.rgb()).r,e.g,e.b,e.opacity):new Fi}function zi(e,t,n,r){return 1===arguments.length?Li(e):new Fi(e,t,n,null==r?1:r)}function Fi(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function Ui(){return"#"+Wi(this.r)+Wi(this.g)+Wi(this.b)}function Bi(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function Wi(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Vi(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new $i(e,t,n,r)}function Hi(e){if(e instanceof $i)return new $i(e.h,e.s,e.l,e.opacity);if(e instanceof xi||(e=Ii(e)),!e)return new $i;if(e instanceof $i)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,o=Math.min(t,n,r),i=Math.max(t,n,r),a=NaN,u=i-o,c=(i+o)/2;return u?(a=t===i?(n-r)/u+6*(n<r):n===i?(r-t)/u+2:(t-n)/u+4,u/=c<.5?i+o:2-i-o,a*=60):u=c>0&&c<1?0:a,new $i(a,u,c,e.opacity)}function $i(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function qi(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function Gi(e,t,n,r,o){var i=e*e,a=i*e;return((1-3*e+3*i-a)*t+(4-6*i+3*a)*n+(1+3*e+3*i-3*a)*r+a*o)/6}gi(xi,Ii,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:Ci,formatHex:Ci,formatHsl:function(){return Hi(this).formatHsl()},formatRgb:Ni,toString:Ni}),gi(Fi,zi,bi(xi,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Fi(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Fi(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ui,formatHex:Ui,formatRgb:Bi,toString:Bi})),gi($i,(function(e,t,n,r){return 1===arguments.length?Hi(e):new $i(e,t,n,null==r?1:r)}),bi(xi,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new $i(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new $i(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new Fi(qi(e>=240?e-240:e+120,o,r),qi(e,o,r),qi(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var Xi=function(e){return function(){return e}};function Ki(e,t){return function(n){return e+n*t}}function Yi(e){return 1==(e=+e)?Qi:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Xi(isNaN(t)?n:t)}}function Qi(e,t){var n=t-e;return n?Ki(e,n):Xi(isNaN(e)?t:e)}var Zi=function e(t){var n=Yi(t);function r(e,t){var r=n((e=zi(e)).r,(t=zi(t)).r),o=n(e.g,t.g),i=n(e.b,t.b),a=Qi(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=o(t),e.b=i(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function Ji(e){return function(t){var n,r,o=t.length,i=new Array(o),a=new Array(o),u=new Array(o);for(n=0;n<o;++n)r=zi(t[n]),i[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return i=e(i),a=e(a),u=e(u),r.opacity=1,function(e){return r.r=i(e),r.g=a(e),r.b=u(e),r+""}}}Ji((function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),o=e[r],i=e[r+1],a=r>0?e[r-1]:2*o-i,u=r<t-1?e[r+2]:2*i-o;return Gi((n-r/t)*t,a,o,i,u)}})),Ji((function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),o=e[(r+t-1)%t],i=e[r%t],a=e[(r+1)%t],u=e[(r+2)%t];return Gi((n-r/t)*t,o,i,a,u)}}));var ea=function(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,o=t.slice();return function(i){for(n=0;n<r;++n)o[n]=e[n]*(1-i)+t[n]*i;return o}};function ta(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function na(e,t){var n,r=t?t.length:0,o=e?Math.min(r,e.length):0,i=new Array(o),a=new Array(r);for(n=0;n<o;++n)i[n]=la(e[n],t[n]);for(;n<r;++n)a[n]=t[n];return function(e){for(n=0;n<o;++n)a[n]=i[n](e);return a}}var ra=function(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}},oa=function(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}},ia=function(e,t){var n,r={},o={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=la(e[n],t[n]):o[n]=t[n];return function(e){for(n in r)o[n]=r[n](e);return o}},aa=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ua=new RegExp(aa.source,"g");var ca=function(e,t){var n,r,o,i=aa.lastIndex=ua.lastIndex=0,a=-1,u=[],c=[];for(e+="",t+="";(n=aa.exec(e))&&(r=ua.exec(t));)(o=r.index)>i&&(o=t.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:oa(n,r)})),i=ua.lastIndex;return i<t.length&&(o=t.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?c[0]?function(e){return function(t){return e(t)+""}}(c[0].x):function(e){return function(){return e}}(t):(t=c.length,function(e){for(var n,r=0;r<t;++r)u[(n=c[r]).i]=n.x(e);return u.join("")})},la=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?Xi(t):("number"===r?oa:"string"===r?(n=Ii(t))?(t=n,Zi):ca:t instanceof Ii?Zi:t instanceof Date?ra:ta(t)?ea:Array.isArray(t)?na:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?ia:oa)(e,t)},sa=function(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}},fa=function(e){return+e},pa=[0,1];function ha(e){return e}function da(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=isNaN(t)?NaN:.5,function(){return n});var n}function ya(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function va(e,t,n){var r=e[0],o=e[1],i=t[0],a=t[1];return o<r?(r=da(o,r),i=n(a,i)):(r=da(r,o),i=n(i,a)),function(e){return i(r(e))}}function ma(e,t,n){var r=Math.min(e.length,t.length)-1,o=new Array(r),i=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)o[a]=da(e[a],e[a+1]),i[a]=n(t[a],t[a+1]);return function(t){var n=$o(e,t,1,r)-1;return i[n](o[n](t))}}function ga(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function ba(){var e,t,n,r,o,i,a=pa,u=pa,c=la,l=ha;function s(){return r=Math.min(a.length,u.length)>2?ma:va,o=i=null,f}function f(t){return isNaN(t=+t)?n:(o||(o=r(a.map(e),u,c)))(e(l(t)))}return f.invert=function(n){return l(t((i||(i=r(u,a.map(e),oa)))(n)))},f.domain=function(e){return arguments.length?(a=fi.call(e,fa),l===ha||(l=ya(a)),s()):a.slice()},f.range=function(e){return arguments.length?(u=pi.call(e),s()):u.slice()},f.rangeRound=function(e){return u=pi.call(e),c=sa,s()},f.clamp=function(e){return arguments.length?(l=e?ya(a):ha,f):l!==ha},f.interpolate=function(e){return arguments.length?(c=e,s()):c},f.unknown=function(e){return arguments.length?(n=e,f):n},function(n,r){return e=n,t=r,s()}}function xa(e,t){return ba()(e,t)}var wa=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Oa(e){if(!(t=wa.exec(e)))throw new Error("invalid format: "+e);var t;return new ka({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function ka(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}Oa.prototype=ka.prototype,ka.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ea,Sa,Ta,_a,Pa=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Ma=function(e){return(e=Pa(Math.abs(e)))?e[1]:NaN},ja=function(e,t){var n=Pa(e,t);if(!n)return e+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},Aa={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return ja(100*e,t)},r:ja,s:function(e,t){var n=Pa(e,t);if(!n)return e+"";var r=n[0],o=n[1],i=o-(Ea=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Pa(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Ca=function(e){return e},Na=Array.prototype.map,Ia=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Sa=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Ca:(t=Na.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var o=e.length,i=[],a=0,u=t[0],c=0;o>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),i.push(e.substring(o-=u,o+u)),!((c+=u+1)>r));)u=t[a=(a+1)%t.length];return i.reverse().join(n)}),o=void 0===e.currency?"":e.currency[0]+"",i=void 0===e.currency?"":e.currency[1]+"",a=void 0===e.decimal?".":e.decimal+"",u=void 0===e.numerals?Ca:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(Na.call(e.numerals,String)),c=void 0===e.percent?"%":e.percent+"",l=void 0===e.minus?"-":e.minus+"",s=void 0===e.nan?"NaN":e.nan+"";function f(e){var t=(e=Oa(e)).fill,n=e.align,f=e.sign,p=e.symbol,h=e.zero,d=e.width,y=e.comma,v=e.precision,m=e.trim,g=e.type;"n"===g?(y=!0,g="g"):Aa[g]||(void 0===v&&(v=12),m=!0,g="g"),(h||"0"===t&&"="===n)&&(h=!0,t="0",n="=");var b="$"===p?o:"#"===p&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",x="$"===p?i:/[%p]/.test(g)?c:"",w=Aa[g],O=/[defgprs%]/.test(g);function k(e){var o,i,c,p=b,k=x;if("c"===g)k=w(e)+k,e="";else{var E=(e=+e)<0||1/e<0;if(e=isNaN(e)?s:w(Math.abs(e),v),m&&(e=function(e){e:for(var t,n=e.length,r=1,o=-1;r<n;++r)switch(e[r]){case".":o=t=r;break;case"0":0===o&&(o=r),t=r;break;default:if(!+e[r])break e;o>0&&(o=0)}return o>0?e.slice(0,o)+e.slice(t+1):e}(e)),E&&0==+e&&"+"!==f&&(E=!1),p=(E?"("===f?f:l:"-"===f||"("===f?"":f)+p,k=("s"===g?Ia[8+Ea/3]:"")+k+(E&&"("===f?")":""),O)for(o=-1,i=e.length;++o<i;)if(48>(c=e.charCodeAt(o))||c>57){k=(46===c?a+e.slice(o+1):e.slice(o))+k,e=e.slice(0,o);break}}y&&!h&&(e=r(e,1/0));var S=p.length+e.length+k.length,T=S<d?new Array(d-S+1).join(t):"";switch(y&&h&&(e=r(T+e,T.length?d-k.length:1/0),T=""),n){case"<":e=p+e+k+T;break;case"=":e=p+T+e+k;break;case"^":e=T.slice(0,S=T.length>>1)+p+e+k+T.slice(S);break;default:e=T+p+e+k}return u(e)}return v=void 0===v?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),k.toString=function(){return e+""},k}return{format:f,formatPrefix:function(e,t){var n=f(((e=Oa(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Ma(t)/3))),o=Math.pow(10,-r),i=Ia[8+r/3];return function(e){return n(o*e)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Ta=Sa.format,_a=Sa.formatPrefix;var Da=function(e,t,n,r){var o,i=ei(e,t,n);switch((r=Oa(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(o=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ma(t)/3)))-Ma(Math.abs(e)))}(i,a))||(r.precision=o),_a(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Ma(t)-Ma(e))+1}(i,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(e){return Math.max(0,-Ma(Math.abs(e)))}(i))||(r.precision=o-2*("%"===r.type))}return Ta(r)};function Ra(e){var t=e.domain;return e.ticks=function(e){var n=t();return Zo(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Da(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,o=t(),i=0,a=o.length-1,u=o[i],c=o[a];return c<u&&(r=u,u=c,c=r,r=i,i=a,a=r),(r=Jo(u,c,n))>0?r=Jo(u=Math.floor(u/r)*r,c=Math.ceil(c/r)*r,n):r<0&&(r=Jo(u=Math.ceil(u*r)/r,c=Math.floor(c*r)/r,n)),r>0?(o[i]=Math.floor(u/r)*r,o[a]=Math.ceil(c/r)*r,t(o)):r<0&&(o[i]=Math.ceil(u*r)/r,o[a]=Math.floor(c*r)/r,t(o)),e},e}function La(){var e=xa(ha,ha);return e.copy=function(){return ga(e,La())},ni.apply(e,arguments),Ra(e)}function za(e){var t;function n(e){return isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=fi.call(t,fa),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return za(e).unknown(t)},e=arguments.length?fi.call(e,fa):[0,1],Ra(n)}var Fa=function(e,t){var n,r=0,o=(e=e.slice()).length-1,i=e[r],a=e[o];return a<i&&(n=r,r=o,o=n,n=i,i=a,a=n),e[r]=t.floor(i),e[o]=t.ceil(a),e};function Ua(e){return Math.log(e)}function Ba(e){return Math.exp(e)}function Wa(e){return-Math.log(-e)}function Va(e){return-Math.exp(-e)}function Ha(e){return isFinite(e)?+("1e"+e):e<0?0:e}function $a(e){return function(t){return-e(-t)}}function qa(e){var t,n,r=e(Ua,Ba),o=r.domain,i=10;function a(){return t=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}(i),n=function(e){return 10===e?Ha:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}(i),o()[0]<0?(t=$a(t),n=$a(n),e(Wa,Va)):e(Ua,Ba),r}return r.base=function(e){return arguments.length?(i=+e,a()):i},r.domain=function(e){return arguments.length?(o(e),a()):o()},r.ticks=function(e){var r,a=o(),u=a[0],c=a[a.length-1];(r=c<u)&&(p=u,u=c,c=p);var l,s,f,p=t(u),h=t(c),d=null==e?10:+e,y=[];if(!(i%1)&&h-p<d){if(p=Math.round(p)-1,h=Math.round(h)+1,u>0){for(;p<h;++p)for(s=1,l=n(p);s<i;++s)if(!((f=l*s)<u)){if(f>c)break;y.push(f)}}else for(;p<h;++p)for(s=i-1,l=n(p);s>=1;--s)if(!((f=l*s)<u)){if(f>c)break;y.push(f)}}else y=Zo(p,h,Math.min(h-p,d)).map(n);return r?y.reverse():y},r.tickFormat=function(e,o){if(null==o&&(o=10===i?".0e":","),"function"!=typeof o&&(o=Ta(o)),e===1/0)return o;null==e&&(e=10);var a=Math.max(1,i*e/r.ticks().length);return function(e){var r=e/n(Math.round(t(e)));return r*i<i-.5&&(r*=i),r<=a?o(e):""}},r.nice=function(){return o(Fa(o(),{floor:function(e){return n(Math.floor(t(e)))},ceil:function(e){return n(Math.ceil(t(e)))}}))},r}function Ga(){var e=qa(ba()).domain([1,10]);return e.copy=function(){return ga(e,Ga()).base(e.base())},ni.apply(e,arguments),e}function Xa(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function Ka(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function Ya(e){var t=1,n=e(Xa(t),Ka(t));return n.constant=function(n){return arguments.length?e(Xa(t=+n),Ka(t)):t},Ra(n)}function Qa(){var e=Ya(ba());return e.copy=function(){return ga(e,Qa()).constant(e.constant())},ni.apply(e,arguments)}function Za(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function Ja(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function eu(e){return e<0?-e*e:e*e}function tu(e){var t=e(ha,ha),n=1;function r(){return 1===n?e(ha,ha):.5===n?e(Ja,eu):e(Za(n),Za(1/n))}return t.exponent=function(e){return arguments.length?(n=+e,r()):n},Ra(t)}function nu(){var e=tu(ba());return e.copy=function(){return ga(e,nu()).exponent(e.exponent())},ni.apply(e,arguments),e}function ru(){return nu.apply(null,arguments).exponent(.5)}function ou(){var e,t=[],n=[],r=[];function o(){var e=0,o=Math.max(1,n.length);for(r=new Array(o-1);++e<o;)r[e-1]=ti(t,e/o);return i}function i(t){return isNaN(t=+t)?e:n[$o(r,t)]}return i.invertExtent=function(e){var o=n.indexOf(e);return o<0?[NaN,NaN]:[o>0?r[o-1]:t[0],o<r.length?r[o]:t[t.length-1]]},i.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,r=0,i=e.length;r<i;++r)null==(n=e[r])||isNaN(n=+n)||t.push(n);return t.sort(Bo),o()},i.range=function(e){return arguments.length?(n=pi.call(e),o()):n.slice()},i.unknown=function(t){return arguments.length?(e=t,i):e},i.quantiles=function(){return r.slice()},i.copy=function(){return ou().domain(t).range(n).unknown(e)},ni.apply(i,arguments)}function iu(){var e,t=0,n=1,r=1,o=[.5],i=[0,1];function a(t){return t<=t?i[$o(o,t,0,r)]:e}function u(){var e=-1;for(o=new Array(r);++e<r;)o[e]=((e+1)*n-(e-r)*t)/(r+1);return a}return a.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],u()):[t,n]},a.range=function(e){return arguments.length?(r=(i=pi.call(e)).length-1,u()):i.slice()},a.invertExtent=function(e){var a=i.indexOf(e);return a<0?[NaN,NaN]:a<1?[t,o[0]]:a>=r?[o[r-1],n]:[o[a-1],o[a]]},a.unknown=function(t){return arguments.length?(e=t,a):a},a.thresholds=function(){return o.slice()},a.copy=function(){return iu().domain([t,n]).range(i).unknown(e)},ni.apply(Ra(a),arguments)}function au(){var e,t=[.5],n=[0,1],r=1;function o(o){return o<=o?n[$o(t,o,0,r)]:e}return o.domain=function(e){return arguments.length?(t=pi.call(e),r=Math.min(t.length,n.length-1),o):t.slice()},o.range=function(e){return arguments.length?(n=pi.call(e),r=Math.min(t.length,n.length-1),o):n.slice()},o.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},o.unknown=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return au().domain(t).range(n).unknown(e)},ni.apply(o,arguments)}var uu=new Date,cu=new Date;function lu(e,t,n,r){function o(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return o.floor=function(t){return e(t=new Date(+t)),t},o.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},o.round=function(e){var t=o(e),n=o.ceil(e);return e-t<n-e?t:n},o.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},o.range=function(n,r,i){var a,u=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return u;do{u.push(a=new Date(+n)),t(n,i),e(n)}while(a<n&&n<r);return u},o.filter=function(n){return lu((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(o.count=function(t,r){return uu.setTime(+t),cu.setTime(+r),e(uu),e(cu),Math.floor(n(uu,cu))},o.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?o.filter(r?function(t){return r(t)%e==0}:function(t){return o.count(0,t)%e==0}):o:null}),o}var su=lu((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));su.every=function(e){return isFinite(e=Math.floor(e))&&e>0?lu((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};var fu=su,pu=(su.range,lu((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()}))),hu=pu;pu.range;function du(e){return lu((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/6048e5}))}var yu=du(0),vu=du(1),mu=du(2),gu=du(3),bu=du(4),xu=du(5),wu=du(6),Ou=(yu.range,vu.range,mu.range,gu.range,bu.range,xu.range,wu.range,lu((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5}),(function(e){return e.getDate()-1}))),ku=Ou,Eu=(Ou.range,lu((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-6e4*e.getMinutes())}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()}))),Su=Eu,Tu=(Eu.range,lu((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getMinutes()}))),_u=Tu,Pu=(Tu.range,lu((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()}))),Mu=Pu,ju=(Pu.range,lu((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e})));ju.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?lu((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):ju:null};var Au=ju;ju.range;function Cu(e){return lu((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/6048e5}))}var Nu=Cu(0),Iu=Cu(1),Du=Cu(2),Ru=Cu(3),Lu=Cu(4),zu=Cu(5),Fu=Cu(6),Uu=(Nu.range,Iu.range,Du.range,Ru.range,Lu.range,zu.range,Fu.range,lu((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1}))),Bu=Uu,Wu=(Uu.range,lu((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()})));Wu.every=function(e){return isFinite(e=Math.floor(e))&&e>0?lu((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var Vu=Wu;Wu.range;function Hu(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function $u(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function qu(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}var Gu,Xu,Ku,Yu={"-":"",_:" ",0:"0"},Qu=/^\s*\d+/,Zu=/^%/,Ju=/[\\^$*+?|[\]().{}]/g;function ec(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(t)+o:o)}function tc(e){return e.replace(Ju,"\\$&")}function nc(e){return new RegExp("^(?:"+e.map(tc).join("|")+")","i")}function rc(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function oc(e,t,n){var r=Qu.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function ic(e,t,n){var r=Qu.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function ac(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function uc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function cc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function lc(e,t,n){var r=Qu.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function sc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function fc(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function pc(e,t,n){var r=Qu.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function hc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function dc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function yc(e,t,n){var r=Qu.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function vc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function mc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function gc(e,t,n){var r=Qu.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function bc(e,t,n){var r=Qu.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function xc(e,t,n){var r=Qu.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function wc(e,t,n){var r=Zu.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function Oc(e,t,n){var r=Qu.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function kc(e,t,n){var r=Qu.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function Ec(e,t){return ec(e.getDate(),t,2)}function Sc(e,t){return ec(e.getHours(),t,2)}function Tc(e,t){return ec(e.getHours()%12||12,t,2)}function _c(e,t){return ec(1+ku.count(fu(e),e),t,3)}function Pc(e,t){return ec(e.getMilliseconds(),t,3)}function Mc(e,t){return Pc(e,t)+"000"}function jc(e,t){return ec(e.getMonth()+1,t,2)}function Ac(e,t){return ec(e.getMinutes(),t,2)}function Cc(e,t){return ec(e.getSeconds(),t,2)}function Nc(e){var t=e.getDay();return 0===t?7:t}function Ic(e,t){return ec(yu.count(fu(e)-1,e),t,2)}function Dc(e,t){var n=e.getDay();return e=n>=4||0===n?bu(e):bu.ceil(e),ec(bu.count(fu(e),e)+(4===fu(e).getDay()),t,2)}function Rc(e){return e.getDay()}function Lc(e,t){return ec(vu.count(fu(e)-1,e),t,2)}function zc(e,t){return ec(e.getFullYear()%100,t,2)}function Fc(e,t){return ec(e.getFullYear()%1e4,t,4)}function Uc(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+ec(t/60|0,"0",2)+ec(t%60,"0",2)}function Bc(e,t){return ec(e.getUTCDate(),t,2)}function Wc(e,t){return ec(e.getUTCHours(),t,2)}function Vc(e,t){return ec(e.getUTCHours()%12||12,t,2)}function Hc(e,t){return ec(1+Bu.count(Vu(e),e),t,3)}function $c(e,t){return ec(e.getUTCMilliseconds(),t,3)}function qc(e,t){return $c(e,t)+"000"}function Gc(e,t){return ec(e.getUTCMonth()+1,t,2)}function Xc(e,t){return ec(e.getUTCMinutes(),t,2)}function Kc(e,t){return ec(e.getUTCSeconds(),t,2)}function Yc(e){var t=e.getUTCDay();return 0===t?7:t}function Qc(e,t){return ec(Nu.count(Vu(e)-1,e),t,2)}function Zc(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Lu(e):Lu.ceil(e),ec(Lu.count(Vu(e),e)+(4===Vu(e).getUTCDay()),t,2)}function Jc(e){return e.getUTCDay()}function el(e,t){return ec(Iu.count(Vu(e)-1,e),t,2)}function tl(e,t){return ec(e.getUTCFullYear()%100,t,2)}function nl(e,t){return ec(e.getUTCFullYear()%1e4,t,4)}function rl(){return"+0000"}function ol(){return"%"}function il(e){return+e}function al(e){return Math.floor(+e/1e3)}!function(e){Gu=function(e){var t=e.dateTime,n=e.date,r=e.time,o=e.periods,i=e.days,a=e.shortDays,u=e.months,c=e.shortMonths,l=nc(o),s=rc(o),f=nc(i),p=rc(i),h=nc(a),d=rc(a),y=nc(u),v=rc(u),m=nc(c),g=rc(c),b={a:function(e){return a[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return c[e.getMonth()]},B:function(e){return u[e.getMonth()]},c:null,d:Ec,e:Ec,f:Mc,H:Sc,I:Tc,j:_c,L:Pc,m:jc,M:Ac,p:function(e){return o[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:il,s:al,S:Cc,u:Nc,U:Ic,V:Dc,w:Rc,W:Lc,x:null,X:null,y:zc,Y:Fc,Z:Uc,"%":ol},x={a:function(e){return a[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return c[e.getUTCMonth()]},B:function(e){return u[e.getUTCMonth()]},c:null,d:Bc,e:Bc,f:qc,H:Wc,I:Vc,j:Hc,L:$c,m:Gc,M:Xc,p:function(e){return o[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:il,s:al,S:Kc,u:Yc,U:Qc,V:Zc,w:Jc,W:el,x:null,X:null,y:tl,Y:nl,Z:rl,"%":ol},w={a:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=p[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=y.exec(t.slice(n));return r?(e.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return E(e,t,n,r)},d:dc,e:dc,f:xc,H:vc,I:vc,j:yc,L:bc,m:hc,M:mc,p:function(e,t,n){var r=l.exec(t.slice(n));return r?(e.p=s[r[0].toLowerCase()],n+r[0].length):-1},q:pc,Q:Oc,s:kc,S:gc,u:ic,U:ac,V:uc,w:oc,W:cc,x:function(e,t,r){return E(e,n,t,r)},X:function(e,t,n){return E(e,r,t,n)},y:sc,Y:lc,Z:fc,"%":wc};function O(e,t){return function(n){var r,o,i,a=[],u=-1,c=0,l=e.length;for(n instanceof Date||(n=new Date(+n));++u<l;)37===e.charCodeAt(u)&&(a.push(e.slice(c,u)),null!=(o=Yu[r=e.charAt(++u)])?r=e.charAt(++u):o="e"===r?" ":"0",(i=t[r])&&(r=i(n,o)),a.push(r),c=u+1);return a.push(e.slice(c,u)),a.join("")}}function k(e,t){return function(n){var r,o,i=qu(1900,void 0,1);if(E(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(t&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(o=(r=$u(qu(i.y,0,1))).getUTCDay(),r=o>4||0===o?Iu.ceil(r):Iu(r),r=Bu.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(o=(r=Hu(qu(i.y,0,1))).getDay(),r=o>4||0===o?vu.ceil(r):vu(r),r=ku.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?$u(qu(i.y,0,1)).getUTCDay():Hu(qu(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,$u(i)):Hu(i)}}function E(e,t,n,r){for(var o,i,a=0,u=t.length,c=n.length;a<u;){if(r>=c)return-1;if(37===(o=t.charCodeAt(a++))){if(o=t.charAt(a++),!(i=w[o in Yu?t.charAt(a++):o])||(r=i(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return b.x=O(n,b),b.X=O(r,b),b.c=O(t,b),x.x=O(n,x),x.X=O(r,x),x.c=O(t,x),{format:function(e){var t=O(e+="",b);return t.toString=function(){return e},t},parse:function(e){var t=k(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=O(e+="",x);return t.toString=function(){return e},t},utcParse:function(e){var t=k(e+="",!0);return t.toString=function(){return e},t}}}(e),Xu=Gu.format,Gu.parse,Ku=Gu.utcFormat,Gu.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function ul(e){return new Date(e)}function cl(e){return e instanceof Date?+e:+new Date(+e)}function ll(e,t,n,r,o,i,a,u,c){var l=xa(ha,ha),s=l.invert,f=l.domain,p=c(".%L"),h=c(":%S"),d=c("%I:%M"),y=c("%I %p"),v=c("%a %d"),m=c("%b %d"),g=c("%B"),b=c("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[i,1,6e4],[i,5,3e5],[i,15,9e5],[i,30,18e5],[o,1,36e5],[o,3,108e5],[o,6,216e5],[o,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[t,1,2592e6],[t,3,7776e6],[e,1,31536e6]];function w(u){return(a(u)<u?p:i(u)<u?h:o(u)<u?d:r(u)<u?y:t(u)<u?n(u)<u?v:m:e(u)<u?g:b)(u)}function O(t,n,r,o){if(null==t&&(t=10),"number"==typeof t){var i=Math.abs(r-n)/t,a=Wo((function(e){return e[2]})).right(x,i);a===x.length?(o=ei(n/31536e6,r/31536e6,t),t=e):a?(o=(a=x[i/x[a-1][2]<x[a][2]/i?a-1:a])[1],t=a[0]):(o=Math.max(ei(n,r,t),1),t=u)}return null==o?t:t.every(o)}return l.invert=function(e){return new Date(s(e))},l.domain=function(e){return arguments.length?f(fi.call(e,cl)):f().map(ul)},l.ticks=function(e,t){var n,r=f(),o=r[0],i=r[r.length-1],a=i<o;return a&&(n=o,o=i,i=n),n=(n=O(e,o,i,t))?n.range(o,i+1):[],a?n.reverse():n},l.tickFormat=function(e,t){return null==t?w:c(t)},l.nice=function(e,t){var n=f();return(e=O(e,n[0],n[n.length-1],t))?f(Fa(n,e)):l},l.copy=function(){return ga(l,ll(e,t,n,r,o,i,a,u,c))},l}var sl=function(){return ni.apply(ll(fu,hu,yu,ku,Su,_u,Mu,Au,Xu).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},fl=lu((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),pl=fl,hl=(fl.range,lu((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()}))),dl=hl,yl=(hl.range,lu((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getUTCMinutes()}))),vl=yl,ml=(yl.range,function(){return ni.apply(ll(Vu,pl,Nu,Bu,dl,vl,Mu,Au,Ku).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)});function gl(){var e,t,n,r,o,i=0,a=1,u=ha,c=!1;function l(t){return isNaN(t=+t)?o:u(0===n?.5:(t=(r(t)-e)*n,c?Math.max(0,Math.min(1,t)):t))}return l.domain=function(o){return arguments.length?(e=r(i=+o[0]),t=r(a=+o[1]),n=e===t?0:1/(t-e),l):[i,a]},l.clamp=function(e){return arguments.length?(c=!!e,l):c},l.interpolator=function(e){return arguments.length?(u=e,l):u},l.unknown=function(e){return arguments.length?(o=e,l):o},function(o){return r=o,e=o(i),t=o(a),n=e===t?0:1/(t-e),l}}function bl(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function xl(){var e=Ra(gl()(ha));return e.copy=function(){return bl(e,xl())},ri.apply(e,arguments)}function wl(){var e=qa(gl()).domain([1,10]);return e.copy=function(){return bl(e,wl()).base(e.base())},ri.apply(e,arguments)}function Ol(){var e=Ya(gl());return e.copy=function(){return bl(e,Ol()).constant(e.constant())},ri.apply(e,arguments)}function kl(){var e=tu(gl());return e.copy=function(){return bl(e,kl()).exponent(e.exponent())},ri.apply(e,arguments)}function El(){return kl.apply(null,arguments).exponent(.5)}function Sl(){var e=[],t=ha;function n(n){if(!isNaN(n=+n))return t(($o(e,n)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var r,o=0,i=t.length;o<i;++o)null==(r=t[o])||isNaN(r=+r)||e.push(r);return e.sort(Bo),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return Sl(t).domain(e)},ri.apply(n,arguments)}function Tl(){var e,t,n,r,o,i,a,u=0,c=.5,l=1,s=ha,f=!1;function p(e){return isNaN(e=+e)?a:(e=.5+((e=+i(e))-t)*(e<t?r:o),s(f?Math.max(0,Math.min(1,e)):e))}return p.domain=function(a){return arguments.length?(e=i(u=+a[0]),t=i(c=+a[1]),n=i(l=+a[2]),r=e===t?0:.5/(t-e),o=t===n?0:.5/(n-t),p):[u,c,l]},p.clamp=function(e){return arguments.length?(f=!!e,p):f},p.interpolator=function(e){return arguments.length?(s=e,p):s},p.unknown=function(e){return arguments.length?(a=e,p):a},function(a){return i=a,e=a(u),t=a(c),n=a(l),r=e===t?0:.5/(t-e),o=t===n?0:.5/(n-t),p}}function _l(){var e=Ra(Tl()(ha));return e.copy=function(){return bl(e,_l())},ri.apply(e,arguments)}function Pl(){var e=qa(Tl()).domain([.1,1,10]);return e.copy=function(){return bl(e,Pl()).base(e.base())},ri.apply(e,arguments)}function Ml(){var e=Ya(Tl());return e.copy=function(){return bl(e,Ml()).constant(e.constant())},ri.apply(e,arguments)}function jl(){var e=tu(Tl());return e.copy=function(){return bl(e,jl()).exponent(e.exponent())},ri.apply(e,arguments)}function Al(){return jl.apply(null,arguments).exponent(.5)}var Cl=function(e,t){if((o=e.length)>1)for(var n,r,o,i=1,a=e[t[0]],u=a.length;i<o;++i)for(r=a,a=e[t[i]],n=0;n<u;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},Nl=Array.prototype.slice,Il=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n};function Dl(e,t){return e[t]}function Rl(e){return(Rl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ll(){return(Ll=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function zl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Fl(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Ul(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Bl(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Wl(e,t){return!t||"object"!==Rl(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Vl(e){return(Vl=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Hl(e,t){return(Hl=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var $l=function(e){function t(){return Ul(this,t),Wl(this,Vl(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Hl(e,t)}(t,e),n=t,(r=[{key:"renderErrorBars",value:function(){var e=this.props,t=e.offset,n=e.layout,r=e.width,o=e.dataKey,a=e.data,u=e.dataPointFormatter,c=e.xAxis,l=e.yAxis,s=Fl(e,["offset","layout","width","dataKey","data","dataPointFormatter","xAxis","yAxis"]),f=gn(s);return a.map((function(e,a){var s,p,h,d,y,v,m,g,b,x,w,O,k=u(e,o),E=k.x,S=k.y,T=k.value,_=k.errorVal;if(!_)return null;if(Array.isArray(_)){var P=zl(_,2);w=P[0],O=P[1]}else w=O=_;return"vertical"===n?(m=c.scale,p=S+t,h=m((s=T)-w),d=p+r,g={x1:y=m(s+O),y1:d,x2:y,y2:v=p-r},b={x1:h,y1:p,x2:y,y2:p},x={x1:h,y1:d,x2:h,y2:v}):"horizontal"===n&&(m=l.scale,h=(s=E+t)-r,y=s+r,d=m((p=T)-w),g={x1:h,y1:v=m(p+O),x2:y,y2:v},b={x1:s,y1:d,x2:s,y2:v},x={x1:h,y1:d,x2:y,y2:d}),i.a.createElement(lo,Ll({className:"recharts-errorBar",key:"bar-".concat(a)},f),i.a.createElement("line",g),i.a.createElement("line",b),i.a.createElement("line",x))}))}},{key:"render",value:function(){return i.a.createElement(lo,{className:"recharts-errorBars"},this.renderErrorBars())}}])&&Bl(n.prototype,r),o&&Bl(n,o),t}(o.Component);$l.propTypes={dataKey:s.a.oneOfType([s.a.string,s.a.number,s.a.func]).isRequired,data:s.a.array,xAxis:s.a.object,yAxis:s.a.object,layout:s.a.string,dataPointFormatter:s.a.func,stroke:s.a.string,strokeWidth:s.a.number,width:s.a.number,offset:s.a.number},$l.defaultProps={stroke:"black",strokeWidth:1.5,width:5,offset:0,layout:"horizontal"};var ql=$l;function Gl(){return(Gl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Xl(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Kl={width:s.a.number.isRequired,height:s.a.number.isRequired,viewBox:s.a.shape({x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number}),className:s.a.string,style:s.a.object,children:s.a.oneOfType([s.a.arrayOf(s.a.node),s.a.node])};function Yl(e){var t=e.children,n=e.width,r=e.height,o=e.viewBox,a=e.className,u=e.style,c=Xl(e,["children","width","height","viewBox","className","style"]),l=o||{width:n,height:r,x:0,y:0},s=Q()("recharts-surface",a),f=gn(c);return i.a.createElement("svg",Gl({},f,{className:s,width:n,height:r,style:u,viewBox:"".concat(l.x," ").concat(l.y," ").concat(l.width," ").concat(l.height),version:"1.1"}),t)}Yl.propTypes=Kl;var Ql=Yl,Zl=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,Math.PI),Jl=2*Zl;var es={draw:function(e,t){var n=Math.sqrt(t/Zl);e.moveTo(n,0),e.arc(0,0,n,0,Jl)}},ts={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},ns=Math.sqrt(1/3),rs=2*ns,os={draw:function(e,t){var n=Math.sqrt(t/rs),r=n*ns;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},is={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}},as=Math.sin(Zl/10)/Math.sin(7*Zl/10),us=Math.sin(Jl/10)*as,cs=-Math.cos(Jl/10)*as,ls={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),r=us*n,o=cs*n;e.moveTo(0,-n),e.lineTo(r,o);for(var i=1;i<5;++i){var a=Jl*i/5,u=Math.cos(a),c=Math.sin(a);e.lineTo(c*n,-u*n),e.lineTo(u*r-c*o,c*r+u*o)}e.closePath()}},ss=Math.sqrt(3),fs={draw:function(e,t){var n=-Math.sqrt(t/(3*ss));e.moveTo(0,2*n),e.lineTo(-ss*n,-n),e.lineTo(ss*n,-n),e.closePath()}},ps=Math.sqrt(3)/2,hs=1/Math.sqrt(12),ds=3*(hs/2+1),ys={draw:function(e,t){var n=Math.sqrt(t/ds),r=n/2,o=n*hs,i=r,a=n*hs+n,u=-i,c=a;e.moveTo(r,o),e.lineTo(i,a),e.lineTo(u,c),e.lineTo(-.5*r-ps*o,ps*r+-.5*o),e.lineTo(-.5*i-ps*a,ps*i+-.5*a),e.lineTo(-.5*u-ps*c,ps*u+-.5*c),e.lineTo(-.5*r+ps*o,-.5*o-ps*r),e.lineTo(-.5*i+ps*a,-.5*a-ps*i),e.lineTo(-.5*u+ps*c,-.5*c-ps*u),e.closePath()}};function vs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ms(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function gs(e){return(gs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bs(){return(bs=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function xs(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ws(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Os(e,t){return!t||"object"!==gs(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ks(e){return(ks=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Es(e,t){return(Es=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ss={symbolCircle:es,symbolCross:ts,symbolDiamond:os,symbolSquare:is,symbolStar:ls,symbolTriangle:fs,symbolWye:ys},Ts=Math.PI/180,_s=function(e){function t(){return xs(this,t),Os(this,ks(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Es(e,t)}(t,e),n=t,(r=[{key:"getPath",value:function(){var e=this.props,t=e.size,n=e.sizeType,r=e.type,o=function(e){var t="symbol".concat(e.slice(0,1).toUpperCase()).concat(e.slice(1));return Ss[t]||es}(r);return function(){var e=Mr(es),t=Mr(64),n=null;function r(){var r;if(n||(n=r=Pr()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(t){return arguments.length?(e="function"==typeof t?t:Mr(t),r):e},r.size=function(e){return arguments.length?(t="function"==typeof e?e:Mr(+e),r):t},r.context=function(e){return arguments.length?(n=null==e?null:e,r):n},r}().type(o).size(function(e,t,n){if("area"===t)return e;switch(n){case"cross":return 5*e*e/9;case"diamond":return.5*e*e/Math.sqrt(3);case"square":return e*e;case"star":var r=18*Ts;return 1.25*e*e*(Math.tan(r)-Math.tan(2*r)*Math.pow(Math.tan(r),2));case"triangle":return Math.sqrt(3)*e*e/4;case"wye":return(21-10*Math.sqrt(3))*e*e/8;default:return Math.PI*e*e/4}}(t,n,r))()}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.cx,r=e.cy,o=e.size;return n===+n&&r===+r&&o===+o?i.a.createElement("path",bs({},gn(this.props),xn(this.props),{className:Q()("recharts-symbols",t),transform:"translate(".concat(n,", ").concat(r,")"),d:this.getPath()})):null}}])&&ws(n.prototype,r),o&&ws(n,o),t}(o.PureComponent);_s.displayName="Symbols",_s.propTypes=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vs(n,!0).forEach((function(t){ms(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vs(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sn,{className:s.a.string,type:s.a.oneOf(["circle","cross","diamond","square","star","triangle","wye"]),cx:s.a.number,cy:s.a.number,size:s.a.number,sizeType:s.a.oneOf(["area","diameter"])}),_s.defaultProps={type:"circle",size:64,sizeType:"area"};var Ps=_s;function Ms(e){return(Ms="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function js(){return(js=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function As(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Cs(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ns(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Is(e,t){return!t||"object"!==Ms(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ds(e){return(Ds=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Rs(e,t){return(Rs=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ls=hn.filter((function(e){return"none"!==e})),zs=function(e){function t(){return Cs(this,t),Is(this,Ds(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rs(e,t)}(t,e),n=t,(r=[{key:"renderIcon",value:function(e){var t=this.props.inactiveColor,n=e.inactive?t:e.color;return"plainline"===e.type?i.a.createElement("line",{strokeWidth:4,fill:"none",stroke:n,strokeDasharray:e.payload.strokeDasharray,x1:0,y1:16,x2:32,y2:16,className:"recharts-legend-icon"}):"line"===e.type?i.a.createElement("path",{strokeWidth:4,fill:"none",stroke:n,d:"M0,".concat(16,"h").concat(32/3,"\n            A").concat(32/6,",").concat(32/6,",0,1,1,").concat(32/3*2,",").concat(16,"\n            H").concat(32,"M").concat(32/3*2,",").concat(16,"\n            A").concat(32/6,",").concat(32/6,",0,1,1,").concat(32/3,",").concat(16),className:"recharts-legend-icon"}):"rect"===e.type?i.a.createElement("path",{stroke:"none",fill:n,d:"M0,".concat(4,"h").concat(32,"v").concat(24,"h").concat(-32,"z"),className:"recharts-legend-icon"}):i.a.createElement(Ps,{fill:n,cx:16,cy:16,size:32,sizeType:"diameter",type:e.type})}},{key:"renderItems",value:function(){var e=this,t=this.props,n=t.payload,r=t.iconSize,o=t.layout,a=t.formatter,u={x:0,y:0,width:32,height:32},c={display:"horizontal"===o?"inline-block":"block",marginRight:10},l={display:"inline-block",verticalAlign:"middle",marginRight:4};return n.map((function(t,n){var o,s=t.formatter||a,f=Q()((As(o={"recharts-legend-item":!0},"legend-item-".concat(n),!0),As(o,"inactive",t.inactive),o));return"none"===t.type?null:i.a.createElement("li",js({className:f,style:c,key:"legend-item-".concat(n)},On(e.props,t,n)),i.a.createElement(Ql,{width:r,height:r,viewBox:u,style:l},e.renderIcon(t)),i.a.createElement("span",{className:"recharts-legend-item-text"},s?s(t.value,t,n):t.value))}))}},{key:"render",value:function(){var e=this.props,t=e.payload,n=e.layout,r=e.align;if(!t||!t.length)return null;var o={padding:0,margin:0,textAlign:"horizontal"===n?r:"left"};return i.a.createElement("ul",{className:"recharts-default-legend",style:o},this.renderItems())}}])&&Ns(n.prototype,r),o&&Ns(n,o),t}(o.PureComponent);zs.displayName="Legend",zs.propTypes={content:s.a.element,iconSize:s.a.number,iconType:s.a.oneOf(Ls),layout:s.a.oneOf(["horizontal","vertical"]),align:s.a.oneOf(["center","left","right"]),verticalAlign:s.a.oneOf(["top","bottom","middle"]),payload:s.a.arrayOf(s.a.shape({value:s.a.any,id:s.a.any,type:s.a.oneOf(hn)})),inactiveColor:s.a.string,formatter:s.a.func,onMouseEnter:s.a.func,onMouseLeave:s.a.func,onClick:s.a.func},zs.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"middle",inactiveColor:"#ccc"};var Fs=zs;function Us(e){return(Us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ws(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bs(n,!0).forEach((function(t){Vs(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bs(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Vs(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Hs(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qs(e,t){return!t||"object"!==Us(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Gs(e){return(Gs=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xs(e,t){return(Xs=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ks=function(e){return e.value},Ys=function(e,t){return!0===e?he()(t,Ks):fe()(e)?he()(t,e):t},Qs=hn.filter((function(e){return"none"!==e})),Zs=function(e){function t(){var e,n;Hs(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=qs(this,(e=Gs(t)).call.apply(e,[this].concat(o)))).state={boxWidth:-1,boxHeight:-1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xs(e,t)}(t,e),n=t,o=[{key:"getWithHeight",value:function(e,t){var n=e.props.layout;return"vertical"===n&&Lt(e.props.height)?{height:e.props.height}:"horizontal"===n?{width:e.props.width||t}:null}}],(r=[{key:"componentDidMount",value:function(){this.updateBBox()}},{key:"componentDidUpdate",value:function(){this.updateBBox()}},{key:"getBBox",value:function(){var e=this.state,t=e.boxWidth,n=e.boxHeight;return t>=0&&n>=0?{width:t,height:n}:null}},{key:"getDefaultPosition",value:function(e){var t,n,r=this.props,o=r.layout,i=r.align,a=r.verticalAlign,u=r.margin,c=r.chartWidth,l=r.chartHeight;return e&&(void 0!==e.left&&null!==e.left||void 0!==e.right&&null!==e.right)||(t="center"===i&&"vertical"===o?{left:((c||0)-(this.getBBox()||{width:0}).width)/2}:"right"===i?{right:u&&u.right||0}:{left:u&&u.left||0}),e&&(void 0!==e.top&&null!==e.top||void 0!==e.bottom&&null!==e.bottom)||(n="middle"===a?{top:((l||0)-(this.getBBox()||{height:0}).height)/2}:"bottom"===a?{bottom:u&&u.bottom||0}:{top:u&&u.top||0}),Ws({},t,{},n)}},{key:"updateBBox",value:function(){var e=this.state,t=e.boxWidth,n=e.boxHeight,r=this.props.onBBoxUpdate;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var o=this.wrapperNode.getBoundingClientRect();(Math.abs(o.width-t)>1||Math.abs(o.height-n)>1)&&this.setState({boxWidth:o.width,boxHeight:o.height},(function(){r&&r(o)}))}else-1===t&&-1===n||this.setState({boxWidth:-1,boxHeight:-1},(function(){r&&r(null)}))}},{key:"render",value:function(){var e=this,t=this.props,n=t.content,r=t.width,o=t.height,a=t.wrapperStyle,u=t.paylodUniqBy,c=t.payload,l=Ws({position:"absolute",width:r||"auto",height:o||"auto"},this.getDefaultPosition(a),{},a);return i.a.createElement("div",{className:"recharts-legend-wrapper",style:l,ref:function(t){e.wrapperNode=t}},function(e,t){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement(Fs,t)}(n,Ws({},this.props,{payload:Ys(u,c)})))}}])&&$s(n.prototype,r),o&&$s(n,o),t}(o.PureComponent);Zs.displayName="Legend",Zs.propTypes={content:s.a.oneOfType([s.a.element,s.a.func]),wrapperStyle:s.a.object,chartWidth:s.a.number,chartHeight:s.a.number,width:s.a.number,height:s.a.number,iconSize:s.a.number,iconType:s.a.oneOf(Qs),layout:s.a.oneOf(["horizontal","vertical"]),align:s.a.oneOf(["center","left","right"]),verticalAlign:s.a.oneOf(["top","bottom","middle"]),margin:s.a.shape({top:s.a.number,left:s.a.number,bottom:s.a.number,right:s.a.number}),payload:s.a.arrayOf(s.a.shape({value:s.a.any,id:s.a.any,type:s.a.oneOf(hn)})),paylodUniqBy:s.a.oneOfType([s.a.func,s.a.bool]),formatter:s.a.func,onMouseEnter:s.a.func,onMouseLeave:s.a.func,onClick:s.a.func,onBBoxUpdate:s.a.func},Zs.defaultProps={iconSize:14,layout:"horizontal",align:"center",verticalAlign:"bottom"};var Js=Zs;function ef(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function tf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tf(n,!0).forEach((function(t){rf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tf(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var of=function(e,t,n){return le()(e)||le()(t)?n:zt(t)?jt()(e,t,n):fe()(t)?t(e):n},af=function(e,t,n,r){var o=Fo()(e,(function(e){return of(e,t)}));if("number"===n){var i=o.filter((function(e){return Lt(e)||parseFloat(e,10)}));return i.length?[Lo()(i),or()(i)]:[1/0,-1/0]}return(r?o.filter((function(e){return!le()(e)})):o).map((function(e){return zt(e)?e:""}))},uf=function(e){var t,n=e.type.displayName,r=e.props,o=r.stroke,i=r.fill;switch(n){case"Line":t=o;break;case"Area":case"Radar":t=o&&"none"!==o?o:i;break;default:t=i}return t},cf=function(e){var t,n=e.children,r=e.formatedGraphicalItems,o=e.legendWidth,i=e.legendContent,a=mn(n,Js);return a?(t=a.props&&a.props.payload?a.props&&a.props.payload:"children"===i?(r||[]).reduce((function(e,t){var n=t.item,r=t.props,o=r.sectors||r.data||[];return e.concat(o.map((function(e){return{type:a.props.iconType||n.props.legendType,value:e.name,color:e.fill,payload:e}})))}),[]):(r||[]).map((function(e){var t=e.item,n=t.props,r=n.dataKey,o=n.name,i=n.legendType;return{inactive:n.hide,dataKey:r,type:a.props.iconType||i||"square",color:uf(t),value:o||r,payload:t.props}})),nf({},a.props,{},Js.getWithHeight(a,o),{payload:t,item:a})):null},lf=function(e,t,n,r){var o=t.props.children,i=vn(o,ql).filter((function(e){var t=e.props.direction;return!(!le()(t)&&!le()(r))||r.indexOf(t)>=0}));if(i&&i.length){var a=i.map((function(e){return e.props.dataKey}));return e.reduce((function(e,t){var r=of(t,n,0),o=Pt()(r)?[Lo()(r),or()(r)]:[r,r],i=a.reduce((function(e,n){var r=of(t,n,0),i=o[0]-Math.abs(Pt()(r)?r[0]:r),a=o[1]+Math.abs(Pt()(r)?r[1]:r);return[Math.min(i,e[0]),Math.max(a,e[1])]}),[1/0,-1/0]);return[Math.min(i[0],e[0]),Math.max(i[1],e[1])]}),[1/0,-1/0])}return null},sf=function(e,t,n,r){var o=t.map((function(t){var o=t.props.dataKey;return"number"===n&&o&&lf(e,t,o)||af(e,o,n,r)}));if("number"===n)return o.reduce((function(e,t){return[Math.min(e[0],t[0]),Math.max(e[1],t[1])]}),[1/0,-1/0]);var i={};return o.reduce((function(e,t){for(var n=0,r=t.length;n<r;n++)i[t[n]]||(i[t[n]]=!0,e.push(t[n]));return e}),[])},ff=function(e,t){return"horizontal"===e&&"xAxis"===t||"vertical"===e&&"yAxis"===t||"centric"===e&&"angleAxis"===t||"radial"===e&&"radiusAxis"===t},pf=function(e,t,n){var r,o,i=e.map((function(e){return e.coordinate===t&&(r=!0),e.coordinate===n&&(o=!0),e.coordinate}));return r||i.push(t),o||i.push(n),i},hf=function(e,t,n){if(!e)return null;var r=e.scale,o=e.duplicateDomain,i=e.type,a=e.range,u=(t||n)&&"category"===i&&r.bandwidth?r.bandwidth()/2:0;return u="angleAxis"===e.axisType?2*Dt(a[0]-a[1])*u:u,t&&(e.ticks||e.niceTicks)?(e.ticks||e.niceTicks).map((function(e){var t=o?o.indexOf(e):e;return{coordinate:r(t)+u,value:e,offset:u}})):e.isCategorial&&e.categoricalDomain?e.categoricalDomain.map((function(e,t){return{coordinate:r(e),value:e,index:t,offset:u}})):r.ticks&&!n?r.ticks(e.tickCount).map((function(e){return{coordinate:r(e)+u,value:e,offset:u}})):r.domain().map((function(e,t){return{coordinate:r(e)+u,value:o?o[e]:e,index:t,offset:u}}))},df=function(e,t,n){var r;return fe()(n)?r=n:fe()(t)&&(r=t),fe()(e)||r?function(t,n,o,i){fe()(e)&&e(t,n,o,i),fe()(r)&&r(t,n,o,i)}:null},yf=function(e,t){var n=e.scale,o=e.type,i=e.layout,a=e.axisType;if("auto"===n)return"radial"===i&&"radiusAxis"===a?{scale:yi(),realScaleType:"band"}:"radial"===i&&"angleAxis"===a?{scale:La(),realScaleType:"linear"}:"category"===o&&t&&(t.indexOf("LineChart")>=0||t.indexOf("AreaChart")>=0)?{scale:mi(),realScaleType:"point"}:"category"===o?{scale:yi(),realScaleType:"band"}:{scale:La(),realScaleType:"linear"};if(It()(n)){var u="scale".concat(n.slice(0,1).toUpperCase()).concat(n.slice(1));return{scale:(r[u]||mi)(),realScaleType:r[u]?u:"point"}}return fe()(n)?{scale:n}:{scale:mi(),realScaleType:"point"}},vf=function(e){var t=e.domain();if(t&&!(t.length<=2)){var n=t.length,r=e.range(),o=Math.min(r[0],r[1])-1e-4,i=Math.max(r[0],r[1])+1e-4,a=e(t[0]),u=e(t[n-1]);(a<o||a>i||u<o||u>i)&&e.domain([t[0],t[n-1]])}},mf={sign:function(e){var t=e.length;if(!(t<=0))for(var n=0,r=e[0].length;n<r;++n)for(var o=0,i=0,a=0;a<t;++a){var u=Ct()(e[a][n][1])?e[a][n][0]:e[a][n][1];u>=0?(e[a][n][0]=o,e[a][n][1]=o+u,o=e[a][n][1]):(e[a][n][0]=i,e[a][n][1]=i+u,i=e[a][n][1])}},expand:function(e,t){if((r=e.length)>0){for(var n,r,o,i=0,a=e[0].length;i<a;++i){for(o=n=0;n<r;++n)o+=e[n][i][1]||0;if(o)for(n=0;n<r;++n)e[n][i][1]/=o}Cl(e,t)}},none:Cl,silhouette:function(e,t){if((n=e.length)>0){for(var n,r=0,o=e[t[0]],i=o.length;r<i;++r){for(var a=0,u=0;a<n;++a)u+=e[a][r][1]||0;o[r][1]+=o[r][0]=-u/2}Cl(e,t)}},wiggle:function(e,t){if((o=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,o,i=0,a=1;a<r;++a){for(var u=0,c=0,l=0;u<o;++u){for(var s=e[t[u]],f=s[a][1]||0,p=(f-(s[a-1][1]||0))/2,h=0;h<u;++h){var d=e[t[h]];p+=(d[a][1]||0)-(d[a-1][1]||0)}c+=f,l+=p*f}n[a-1][1]+=n[a-1][0]=i,c&&(i-=l/c)}n[a-1][1]+=n[a-1][0]=i,Cl(e,t)}}},gf=function(e,t,n){var r=t.map((function(e){return e.props.dataKey}));return function(){var e=Mr([]),t=Il,n=Cl,r=Dl;function o(o){var i,a,u=e.apply(this,arguments),c=o.length,l=u.length,s=new Array(l);for(i=0;i<l;++i){for(var f,p=u[i],h=s[i]=new Array(c),d=0;d<c;++d)h[d]=f=[0,+r(o[d],p,d,o)],f.data=o[d];h.key=p}for(i=0,a=t(s);i<l;++i)s[a[i]].index=i;return n(s,a),s}return o.keys=function(t){return arguments.length?(e="function"==typeof t?t:Mr(Nl.call(t)),o):e},o.value=function(e){return arguments.length?(r="function"==typeof e?e:Mr(+e),o):r},o.order=function(e){return arguments.length?(t=null==e?Il:"function"==typeof e?e:Mr(Nl.call(e)),o):t},o.offset=function(e){return arguments.length?(n=null==e?Cl:e,o):n},o}().keys(r).value((function(e,t){return+of(e,t,0)})).order(Il).offset(mf[n])(e)},bf=function(e,t){var n=t.realScaleType,r=t.type,o=t.tickCount,i=t.originalDomain,a=t.allowDecimals,u=n||t.scale;if("auto"!==u&&"linear"!==u)return null;if(o&&"number"===r&&i&&("auto"===i[0]||"auto"===i[1])){var c=e.domain(),l=Object(Uo.getNiceTickValues)(c,o,a);return e.domain(function(e,t){return"number"===t?[Lo()(e),or()(e)]:e}(l,r)),{niceTicks:l}}if(o&&"number"===r){var s=e.domain();return{niceTicks:Object(Uo.getTickValuesFixedDomain)(s,o,a)}}return null},xf=function(e){var t=e.axis,n=e.ticks,r=e.bandSize,o=e.entry,i=e.index,a=e.dataKey;if("category"===t.type){if(!t.allowDuplicatedCategory&&t.dataKey&&!le()(o[t.dataKey])){var u=Ht(n,"value",o[t.dataKey]);if(u)return u.coordinate+r/2}return n[i]?n[i].coordinate+r/2:null}var c=of(o,le()(a)?t.dataKey:a);return le()(c)?null:t.scale(c)},wf=function(e,t,n){return Object.keys(e).reduce((function(r,o){var i=e[o].stackedData.reduce((function(e,r){var o=r.slice(t,n+1).reduce((function(e,t){return[Lo()(t.concat([e[0]]).filter(Lt)),or()(t.concat([e[1]]).filter(Lt))]}),[1/0,-1/0]);return[Math.min(e[0],o[0]),Math.max(e[1],o[1])]}),[1/0,-1/0]);return[Math.min(i[0],r[0]),Math.max(i[1],r[1])]}),[1/0,-1/0]).map((function(e){return e===1/0||e===-1/0?0:e}))},Of=/^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,kf=/^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,Ef=function(e,t,n){if(!Pt()(e))return t;var r=[];if(Lt(e[0]))r[0]=n?e[0]:Math.min(e[0],t[0]);else if(Of.test(e[0])){var o=+Of.exec(e[0])[1];r[0]=t[0]-o}else fe()(e[0])?r[0]=e[0](t[0]):r[0]=t[0];if(Lt(e[1]))r[1]=n?e[1]:Math.max(e[1],t[1]);else if(kf.test(e[1])){var i=+kf.exec(e[1])[1];r[1]=t[1]+i}else fe()(e[1])?r[1]=e[1](t[1]):r[1]=t[1];return r},Sf=function(e,t){if(e&&e.scale&&e.scale.bandwidth)return e.scale.bandwidth();if(e&&t&&t.length>=2){for(var n=Tt()(t,(function(e){return e.coordinate})),r=1/0,o=1,i=n.length;o<i;o++){var a=n[o],u=n[o-1];r=Math.min((a.coordinate||0)-(u.coordinate||0),r)}return r===1/0?0:r}return 0},Tf=function(e,t,n){return e&&e.length?ye()(e,jt()(n,"type.defaultProps.domain"))?t:e:t};function _f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_f(n,!0).forEach((function(t){Mf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_f(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Mf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var jf=Math.PI/180,Af=function(e){return 180*e/Math.PI},Cf=function(e,t,n,r){return{x:e+Math.cos(-jf*r)*n,y:t+Math.sin(-jf*r)*n}},Nf=function(e,t){var n=e.x,r=e.y,o=t.cx,i=t.cy,a=function(e,t){var n=e.x,r=e.y,o=t.x,i=t.y;return Math.sqrt(Math.pow(n-o,2)+Math.pow(r-i,2))}({x:n,y:r},{x:o,y:i});if(a<=0)return{radius:a};var u=(n-o)/a,c=Math.acos(u);return r>i&&(c=2*Math.PI-c),{radius:a,angle:Af(c),angleInRadian:c}},If=function(e,t){var n=t.startAngle,r=t.endAngle,o=Math.floor(n/360),i=Math.floor(r/360);return e+360*Math.min(o,i)},Df=function(e,t){var n=e.x,r=e.y,o=Nf({x:n,y:r},t),i=o.radius,a=o.angle,u=t.innerRadius,c=t.outerRadius;if(i<u||i>c)return!1;if(0===i)return!0;var l,s=function(e){var t=e.startAngle,n=e.endAngle,r=Math.floor(t/360),o=Math.floor(n/360),i=Math.min(r,o);return{startAngle:t-360*i,endAngle:n-360*i}}(t),f=s.startAngle,p=s.endAngle,h=a;if(f<=p){for(;h>p;)h-=360;for(;h<f;)h+=360;l=h>=f&&h<=p}else{for(;h>f;)h-=360;for(;h<p;)h+=360;l=h>=p&&h<=f}return l?Pf({},t,{radius:i,angle:If(h,t)}):null};function Rf(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Lf(){return(Lf=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function zf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ff(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Uf=s.a.shape({x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number}),Bf=s.a.shape({cx:s.a.number,cy:s.a.number,innerRadius:s.a.number,outerRadius:s.a.number,startAngle:s.a.number,endAngle:s.a.number}),Wf=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zf(n,!0).forEach((function(t){Ff(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zf(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sn,{viewBox:s.a.oneOfType([Uf,Bf]),formatter:s.a.func,value:s.a.oneOfType([s.a.number,s.a.string]),offset:s.a.number,position:s.a.oneOf(["top","left","right","bottom","inside","outside","insideLeft","insideRight","insideTop","insideBottom","insideTopLeft","insideBottomLeft","insideTopRight","insideBottomRight","insideStart","insideEnd","end","center","centerTop","centerBottom"]),children:s.a.oneOfType([s.a.arrayOf(s.a.node),s.a.node]),className:s.a.string,content:s.a.oneOfType([s.a.element,s.a.func])}),Vf=function(e,t,n){var r,o,a=e.position,u=e.viewBox,c=e.offset,l=e.className,s=u.cx,f=u.cy,p=u.innerRadius,h=u.outerRadius,d=u.startAngle,y=u.endAngle,v=u.clockWise,m=(p+h)/2,g=function(e,t){return Dt(t-e)*Math.min(Math.abs(t-e),360)}(d,y),b=g>=0?1:-1;"insideStart"===a?(r=d+b*c,o=v):"insideEnd"===a?(r=y-b*c,o=!v):"end"===a&&(r=y+b*c,o=v),o=g<=0?o:!o;var x=Cf(s,f,m,r),w=Cf(s,f,m,r+359*(o?1:-1)),O="M".concat(x.x,",").concat(x.y,"\n    A").concat(m,",").concat(m,",0,1,").concat(o?0:1,",\n    ").concat(w.x,",").concat(w.y),k=le()(e.id)?Ut("recharts-radial-line-"):e.id;return i.a.createElement("text",Lf({},n,{dominantBaseline:"central",className:Q()("recharts-radial-bar-label",l)}),i.a.createElement("defs",null,i.a.createElement("path",{id:k,d:O})),i.a.createElement("textPath",{xlinkHref:"#".concat(k)},t))};function Hf(e){var t,n=e.viewBox,r=e.position,a=e.value,u=e.children,c=e.content,l=e.className,s=void 0===l?"":l;if(!n||le()(a)&&le()(u)&&!Object(o.isValidElement)(c)&&!fe()(c))return null;if(Object(o.isValidElement)(c))return Object(o.cloneElement)(c,e);if(fe()(c)){if(t=c(e),Object(o.isValidElement)(t))return t}else t=function(e){var t=e.value,n=e.formatter,r=le()(e.children)?t:e.children;return fe()(n)?n(r):r}(e);var f=function(e){return Lt(e.cx)}(n),p=gn(e),h=xn(e);if(f&&("insideStart"===r||"insideEnd"===r||"end"===r))return Vf(e,t,p);var d=f?function(e){var t=e.viewBox,n=e.offset,r=e.position,o=t.cx,i=t.cy,a=t.innerRadius,u=t.outerRadius,c=(t.startAngle+t.endAngle)/2;if("outside"===r){var l=Cf(o,i,u+n,c),s=l.x;return{x:s,y:l.y,textAnchor:s>=o?"start":"end",verticalAnchor:"middle"}}if("center"===r)return{x:o,y:i,textAnchor:"middle",verticalAnchor:"middle"};if("centerTop"===r)return{x:o,y:i,textAnchor:"middle",verticalAnchor:"start"};if("centerBottom"===r)return{x:o,y:i,textAnchor:"middle",verticalAnchor:"end"};var f=Cf(o,i,(a+u)/2,c);return{x:f.x,y:f.y,textAnchor:"middle",verticalAnchor:"middle"}}(e):function(e){var t=e.viewBox,n=e.offset,r=e.position,o=t.x,i=t.y,a=t.width,u=t.height,c=u>=0?1:-1;return"top"===r?{x:o+a/2,y:i-c*n,textAnchor:"middle",verticalAnchor:c>0?"end":"start"}:"bottom"===r?{x:o+a/2,y:i+u+c*n,textAnchor:"middle",verticalAnchor:"start"}:"left"===r?{x:o-n,y:i+u/2,textAnchor:"end",verticalAnchor:"middle"}:"right"===r?{x:o+a+n,y:i+u/2,textAnchor:"start",verticalAnchor:"middle"}:"insideLeft"===r?{x:o+n,y:i+u/2,textAnchor:"start",verticalAnchor:"middle"}:"insideRight"===r?{x:o+a-n,y:i+u/2,textAnchor:"end",verticalAnchor:"middle"}:"insideTop"===r?{x:o+a/2,y:i+c*n,textAnchor:"middle",verticalAnchor:"start"}:"insideBottom"===r?{x:o+a/2,y:i+u-c*n,textAnchor:"middle",verticalAnchor:"end"}:"insideTopLeft"===r?{x:o+n,y:i+c*n,textAnchor:"start",verticalAnchor:"start"}:"insideTopRight"===r?{x:o+a-n,y:i+c*n,textAnchor:"end",verticalAnchor:"start"}:"insideBottomLeft"===r?{x:o+n,y:i+u-c*n,textAnchor:"start",verticalAnchor:"end"}:"insideBottomRight"===r?{x:o+a-n,y:i+u-c*n,textAnchor:"end",verticalAnchor:"end"}:an()(r)&&(Lt(r.x)||Rt(r.x))&&(Lt(r.y)||Rt(r.y))?{x:o+Bt(r.x,a),y:i+Bt(r.y,u),textAnchor:"end",verticalAnchor:"end"}:{x:o+a/2,y:i+u/2,textAnchor:"middle",verticalAnchor:"middle"}}(e);return i.a.createElement(Do,Lf({className:Q()("recharts-label",s)},p,d,h),t)}Hf.displayName="Label",Hf.defaultProps={offset:5},Hf.propTypes=Wf;var $f=function(e){var t=e.cx,n=e.cy,r=e.angle,o=e.startAngle,i=e.endAngle,a=e.r,u=e.radius,c=e.innerRadius,l=e.outerRadius,s=e.x,f=e.y,p=e.top,h=e.left,d=e.width,y=e.height,v=e.clockWise;if(Lt(d)&&Lt(y)){if(Lt(s)&&Lt(f))return{x:s,y:f,width:d,height:y};if(Lt(p)&&Lt(h))return{x:p,y:h,width:d,height:y}}return Lt(s)&&Lt(f)?{x:s,y:f,width:0,height:0}:Lt(t)&&Lt(n)?{cx:t,cy:n,startAngle:o||r||0,endAngle:i||r||0,innerRadius:c||0,outerRadius:l||u||a||0,clockWise:v}:e.viewBox?e.viewBox:{}},qf=function(e,t){return e?!0===e?i.a.createElement(Hf,{key:"label-implicit",viewBox:t}):zt(e)?i.a.createElement(Hf,{key:"label-implicit",viewBox:t,value:e}):Object(o.isValidElement)(e)?e.type===Hf?Object(o.cloneElement)(e,{key:"label-implicit",viewBox:t}):i.a.createElement(Hf,{key:"label-implicit",content:e,viewBox:t}):fe()(e)?i.a.createElement(Hf,{key:"label-implicit",content:e,viewBox:t}):an()(e)?i.a.createElement(Hf,Lf({viewBox:t},e,{key:"label-implicit"})):null:null};Hf.parseViewBox=$f,Hf.renderCallByParent=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(!e||!e.children&&n&&!e.label)return null;var r=e.children,i=$f(e),a=vn(r,Hf).map((function(e,n){return Object(o.cloneElement)(e,{viewBox:t||i,key:"label-".concat(n)})}));if(!n)return a;var u=qf(e.label,t||i);return[u].concat(Rf(a))};var Gf=Hf;function Xf(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Kf(){return(Kf=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Yf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yf(n,!0).forEach((function(t){Zf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yf(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Zf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Jf(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ep={id:s.a.string,data:s.a.arrayOf(s.a.object),valueAccessor:s.a.func,clockWise:s.a.bool,dataKey:s.a.oneOfType([s.a.string,s.a.number,s.a.func])},tp={valueAccessor:function(e){return Pt()(e.value)?fo()(e.value):e.value}};function np(e){var t=e.data,n=e.valueAccessor,r=e.dataKey,o=e.clockWise,a=e.id,u=Jf(e,["data","valueAccessor","dataKey","clockWise","id"]);return t&&t.length?i.a.createElement(lo,{className:"recharts-label-list"},t.map((function(e,t){var c=le()(r)?n(e,t):of(e&&e.payload,r),l=le()(a)?{}:{id:"".concat(a,"-").concat(t)};return i.a.createElement(Gf,Kf({},gn(e),u,l,{index:t,value:c,viewBox:Gf.parseViewBox(le()(o)?e:Qf({},e,{clockWise:o})),key:"label-".concat(t)}))}))):null}np.propTypes=ep,np.displayName="LabelList";var rp=function(e,t){return e?!0===e?i.a.createElement(np,{key:"labelList-implicit",data:t}):i.a.isValidElement(e)||fe()(e)?i.a.createElement(np,{key:"labelList-implicit",data:t,content:e}):an()(e)?i.a.createElement(np,Kf({data:t},e,{key:"labelList-implicit"})):null:null};np.renderCallByParent=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(!e||!e.children&&n&&!e.label)return null;var r=e.children,i=vn(r,np).map((function(e,n){return Object(o.cloneElement)(e,{data:t,key:"labelList-".concat(n)})}));if(!n)return i;var a=rp(e.label,t);return[a].concat(Xf(i))},np.defaultProps=tp;var op=np;function ip(e){return(ip="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ap(){return(ap=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function up(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?up(n,!0).forEach((function(t){lp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):up(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function lp(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function sp(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function fp(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pp(e,t){return!t||"object"!==ip(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function hp(e){return(hp=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function dp(e,t){return(dp=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var yp=function(e){function t(){var e,n;sp(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=pp(this,(e=hp(t)).call.apply(e,[this].concat(o)))).state={isAnimationFinished:!0},n.id=Ut("recharts-area-"),n.cachePrevData=function(e,t){n.setState({prevPoints:e,prevBaseLine:t})},n.handleAnimationEnd=function(){var e=n.props.onAnimationEnd;n.setState({isAnimationFinished:!0}),fe()(e)&&e()},n.handleAnimationStart=function(){var e=n.props.onAnimationStart;n.setState({isAnimationFinished:!1}),fe()(e)&&e()},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&dp(e,t)}(t,e),n=t,(r=[{key:"componentWillReceiveProps",value:function(e){var t=this.props,n=t.animationId,r=t.points,o=t.baseLine;e.animationId!==n&&this.cachePrevData(r,o)}},{key:"renderDots",value:function(e,t){var n=this,r=this.props.isAnimationActive,o=this.state.isAnimationFinished;if(r&&!o)return null;var a=this.props,u=a.dot,c=a.points,l=a.dataKey,s=gn(this.props),f=gn(u),p=xn(u),h=c.map((function(e,t){var r=cp({key:"dot-".concat(t),r:3},s,{},f,{},p,{dataKey:l,cx:e.x,cy:e.y,index:t,value:e.value,payload:e.payload});return n.constructor.renderDotItem(u,r)})),d={clipPath:e?"url(#clipPath-".concat(t,")"):null};return i.a.createElement(lo,ap({className:"recharts-area-dots"},d),h)}},{key:"renderHorizontalRect",value:function(e){var t=this.props,n=t.baseLine,r=t.points,o=t.strokeWidth,a=r[0].x,u=r[r.length-1].x,c=e*Math.abs(a-u),l=or()(r.map((function(e){return e.y||0})));return Lt(n)?l=Math.max(n,l):n&&Pt()(n)&&n.length&&(l=Math.max(or()(n.map((function(e){return e.y||0}))),l)),Lt(l)?i.a.createElement("rect",{x:a<u?a:a-c,y:0,width:c,height:parseInt(l+(o||1),10)}):null}},{key:"renderVerticalRect",value:function(e){var t=this.props,n=t.baseLine,r=t.points,o=t.strokeWidth,a=r[0].y,u=r[r.length-1].y,c=e*Math.abs(a-u),l=or()(r.map((function(e){return e.x||0})));return Lt(n)?l=Math.max(n,l):n&&Pt()(n)&&n.length&&(l=Math.max(or()(n.map((function(e){return e.x||0}))),l)),Lt(l)?i.a.createElement("rect",{x:0,y:a<u?a:a-c,width:l+(o||1),height:parseInt(c,10)}):null}},{key:"renderClipRect",value:function(e){return"vertical"===this.props.layout?this.renderVerticalRect(e):this.renderHorizontalRect(e)}},{key:"renderAreaStatically",value:function(e,t,n,r){var o=this.props,a=o.layout,u=o.type,c=o.stroke,l=o.connectNulls,s=o.isRange;return i.a.createElement(lo,{clipPath:n?"url(#clipPath-".concat(r,")"):null},i.a.createElement(Kr,ap({},this.props,{points:e,baseLine:t,stroke:"none",className:"recharts-area-area"})),"none"!==c&&i.a.createElement(Kr,ap({},gn(this.props),{className:"recharts-area-curve",layout:a,type:u,connectNulls:l,fill:"none",points:e})),"none"!==c&&s&&i.a.createElement(Kr,ap({},gn(this.props),{className:"recharts-area-curve",layout:a,type:u,connectNulls:l,fill:"none",points:t})))}},{key:"renderAreaWithAnimation",value:function(e,t){var n=this,r=this.props,o=r.points,a=r.baseLine,u=r.isAnimationActive,c=r.animationBegin,l=r.animationDuration,s=r.animationEasing,f=r.animationId,p=this.state,h=p.prevPoints,d=p.prevBaseLine;return i.a.createElement(Et,{begin:c,duration:l,isActive:u,easing:s,from:{t:0},to:{t:1},key:"area-".concat(f),onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var u=r.t;if(h){var c,l=h.length/o.length,s=o.map((function(e,t){var n=Math.floor(t*l);if(h[n]){var r=h[n],o=Vt(r.x,e.x),i=Vt(r.y,e.y);return cp({},e,{x:o(u),y:i(u)})}return e}));return c=Lt(a)?Vt(d,a)(u):le()(a)||Ct()(a)?Vt(d,0)(u):a.map((function(e,t){var n=Math.floor(t*l);if(d[n]){var r=d[n],o=Vt(r.x,e.x),i=Vt(r.y,e.y);return cp({},e,{x:o(u),y:i(u)})}return e})),n.renderAreaStatically(s,c,e,t)}return i.a.createElement(lo,null,i.a.createElement("defs",null,i.a.createElement("clipPath",{id:"animationClipPath-".concat(t)},n.renderClipRect(u))),i.a.createElement(lo,{clipPath:"url(#animationClipPath-".concat(t,")")},n.renderAreaStatically(o,a,e,t)))}))}},{key:"renderArea",value:function(e,t){var n=this.props,r=n.points,o=n.baseLine,i=n.isAnimationActive,a=this.state,u=a.prevPoints,c=a.prevBaseLine,l=a.totalLength;return i&&r&&r.length&&(!u&&l>0||!ye()(u,r)||!ye()(c,o))?this.renderAreaWithAnimation(e,t):this.renderAreaStatically(r,o,e,t)}},{key:"render",value:function(){var e=this.props,t=e.hide,n=e.dot,r=e.points,o=e.className,a=e.top,u=e.left,c=e.xAxis,l=e.yAxis,s=e.width,f=e.height,p=e.isAnimationActive,h=e.id;if(t||!r||!r.length)return null;var d=this.state.isAnimationFinished,y=1===r.length,v=Q()("recharts-area",o),m=c&&c.allowDataOverflow||l&&l.allowDataOverflow,g=le()(h)?this.id:h;return i.a.createElement(lo,{className:v},m?i.a.createElement("defs",null,i.a.createElement("clipPath",{id:"clipPath-".concat(g)},i.a.createElement("rect",{x:u,y:a,width:s,height:parseInt(f,10)}))):null,y?null:this.renderArea(m,g),(n||y)&&this.renderDots(m,g),(!p||d)&&op.renderCallByParent(this.props,r))}}])&&fp(n.prototype,r),o&&fp(n,o),t}(o.PureComponent);yp.displayName="Area",yp.propTypes=cp({},sn,{},fn,{className:s.a.string,dataKey:s.a.oneOfType([s.a.string,s.a.number,s.a.func]).isRequired,type:s.a.oneOfType([s.a.oneOf(["basis","basisClosed","basisOpen","linear","linearClosed","natural","monotoneX","monotoneY","monotone","step","stepBefore","stepAfter"]),s.a.func]),unit:s.a.oneOfType([s.a.string,s.a.number]),name:s.a.oneOfType([s.a.string,s.a.number]),yAxisId:s.a.oneOfType([s.a.string,s.a.number]),xAxisId:s.a.oneOfType([s.a.string,s.a.number]),yAxis:s.a.object,xAxis:s.a.object,stackId:s.a.oneOfType([s.a.number,s.a.string]),legendType:s.a.oneOf(hn),tooltipType:s.a.oneOf(dn),connectNulls:s.a.bool,activeDot:s.a.oneOfType([s.a.object,s.a.element,s.a.func,s.a.bool]),dot:s.a.oneOfType([s.a.func,s.a.element,s.a.object,s.a.bool]),label:s.a.oneOfType([s.a.func,s.a.element,s.a.object,s.a.bool]),hide:s.a.bool,layout:s.a.oneOf(["horizontal","vertical"]),baseLine:s.a.oneOfType([s.a.number,s.a.array]),isRange:s.a.bool,points:s.a.arrayOf(s.a.shape({x:s.a.number,y:s.a.number,value:s.a.oneOfType([s.a.number,s.a.array])})),onAnimationStart:s.a.func,onAnimationEnd:s.a.func,animationId:s.a.number,isAnimationActive:s.a.bool,animationBegin:s.a.number,animationDuration:s.a.number,animationEasing:s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),id:s.a.string}),yp.defaultProps={stroke:"#3182bd",fill:"#3182bd",fillOpacity:.6,xAxisId:0,yAxisId:0,legendType:"line",connectNulls:!1,points:[],dot:!1,activeDot:!0,hide:!1,isAnimationActive:!En(),animationBegin:0,animationDuration:1500,animationEasing:"ease"},yp.getBaseValue=function(e,t,n){var r=e.layout,o=e.baseValue;if(Lt(o))return o;var i="horizontal"===r?n:t,a=i.scale.domain();if("number"===i.type){var u=Math.max(a[0],a[1]),c=Math.min(a[0],a[1]);return"dataMin"===o?c:"dataMax"===o||u<0?u:Math.max(Math.min(a[0],a[1]),0)}return"dataMin"===o?a[0]:"dataMax"===o?a[1]:a[0]},yp.getComposedData=function(e){var t,n=e.props,r=e.xAxis,o=e.yAxis,i=e.xAxisTicks,a=e.yAxisTicks,u=e.bandSize,c=e.dataKey,l=e.stackedData,s=e.dataStartIndex,f=e.displayedData,p=e.offset,h=n.layout,d=l&&l.length,y=yp.getBaseValue(n,r,o),v=!1,m=f.map((function(e,t){var n;return d?n=l[s+t]:(n=of(e,c),Pt()(n)?v=!0:n=[y,n]),"horizontal"===h?{x:xf({axis:r,ticks:i,bandSize:u,entry:e,index:t}),y:le()(n[1])?null:o.scale(n[1]),value:n,payload:e}:{x:le()(n[1])?null:r.scale(n[1]),y:xf({axis:o,ticks:a,bandSize:u,entry:e,index:t}),value:n,payload:e}}));return t=d||v?m.map((function(e){return"horizontal"===h?{x:e.x,y:le()(jt()(e,"value[0]"))?null:o.scale(jt()(e,"value[0]"))}:{x:le()(jt()(e,"value[0]"))?null:r.scale(jt()(e,"value[0]")),y:e.y}})):"horizontal"===h?o.scale(y):r.scale(y),cp({points:m,baseLine:t,layout:h,isRange:v},p)},yp.renderDotItem=function(e,t){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement(oo,ap({},t,{className:"recharts-area-dot"}))};var vp=yp;function mp(e){return(mp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gp(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function bp(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xp(e,t){return!t||"object"!==mp(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function wp(e){return(wp=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Op(e,t){return(Op=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var kp=function(e){function t(){return gp(this,t),xp(this,wp(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Op(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return null}}])&&bp(n.prototype,r),o&&bp(n,o),t}(o.PureComponent);kp.displayName="XAxis",kp.propTypes={allowDecimals:s.a.bool,allowDuplicatedCategory:s.a.bool,hide:s.a.bool,name:s.a.oneOfType([s.a.string,s.a.number]),unit:s.a.oneOfType([s.a.string,s.a.number]),xAxisId:s.a.oneOfType([s.a.string,s.a.number]),domain:s.a.arrayOf(s.a.oneOfType([s.a.string,s.a.number,s.a.func,s.a.oneOf(["auto","dataMin","dataMax"])])),dataKey:s.a.oneOfType([s.a.string,s.a.number,s.a.func]),width:s.a.number,height:s.a.number,mirror:s.a.bool,orientation:s.a.oneOf(["top","bottom"]),type:s.a.oneOf(["number","category"]),ticks:s.a.array,tickCount:s.a.number,tickFormatter:s.a.func,padding:s.a.shape({left:s.a.number,right:s.a.number}),allowDataOverflow:s.a.bool,scale:s.a.oneOfType([s.a.oneOf(["auto","linear","pow","sqrt","log","identity","time","band","point","ordinal","quantile","quantize","utc","sequential","threshold"]),s.a.func]),tick:s.a.oneOfType([s.a.bool,s.a.func,s.a.object,s.a.element]),axisLine:s.a.oneOfType([s.a.bool,s.a.object]),tickLine:s.a.oneOfType([s.a.bool,s.a.object]),minTickGap:s.a.number,tickSize:s.a.number,interval:s.a.oneOfType([s.a.number,s.a.oneOf(["preserveStart","preserveEnd","preserveStartEnd"])]),reversed:s.a.bool},kp.defaultProps={allowDecimals:!0,hide:!1,orientation:"bottom",width:0,height:30,mirror:!1,xAxisId:0,tickCount:5,type:"category",domain:[0,"auto"],padding:{left:0,right:0},allowDataOverflow:!1,scale:"auto",reversed:!1,allowDuplicatedCategory:!0};var Ep=kp;function Sp(e){return(Sp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Tp(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pp(e,t){return!t||"object"!==Sp(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Mp(e){return(Mp=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function jp(e,t){return(jp=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ap=function(e){function t(){return Tp(this,t),Pp(this,Mp(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&jp(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return null}}])&&_p(n.prototype,r),o&&_p(n,o),t}(o.PureComponent);Ap.displayName="YAxis",Ap.propTypes={allowDecimals:s.a.bool,allowDuplicatedCategory:s.a.bool,hide:s.a.bool,name:s.a.oneOfType([s.a.string,s.a.number]),unit:s.a.oneOfType([s.a.string,s.a.number]),yAxisId:s.a.oneOfType([s.a.string,s.a.number]),domain:s.a.arrayOf(s.a.oneOfType([s.a.string,s.a.number,s.a.func,s.a.oneOf(["auto","dataMin","dataMax"])])),dataKey:s.a.oneOfType([s.a.string,s.a.number,s.a.func]),ticks:s.a.array,tickCount:s.a.number,tickFormatter:s.a.func,width:s.a.number,height:s.a.number,mirror:s.a.bool,orientation:s.a.oneOf(["left","right"]),type:s.a.oneOf(["number","category"]),padding:s.a.shape({top:s.a.number,bottom:s.a.number}),allowDataOverflow:s.a.bool,scale:s.a.oneOfType([s.a.oneOf(["auto","linear","pow","sqrt","log","identity","time","band","point","ordinal","quantile","quantize","utc","sequential","threshold"]),s.a.func]),tick:s.a.oneOfType([s.a.bool,s.a.func,s.a.object,s.a.element]),axisLine:s.a.oneOfType([s.a.bool,s.a.object]),tickLine:s.a.oneOfType([s.a.bool,s.a.object]),minTickGap:s.a.number,tickSize:s.a.number,interval:s.a.oneOfType([s.a.number,s.a.oneOf(["preserveStart","preserveEnd","preserveStartEnd"])]),reversed:s.a.bool},Ap.defaultProps={allowDuplicatedCategory:!0,allowDecimals:!0,hide:!1,orientation:"left",width:60,height:0,mirror:!1,yAxisId:0,tickCount:5,type:"number",domain:[0,"auto"],padding:{top:0,bottom:0},allowDataOverflow:!1,scale:"auto",reversed:!1};var Cp=Ap,Np=n(50),Ip=n.n(Np),Dp=n(135),Rp=n.n(Dp),Lp=n(32),zp=n.n(Lp),Fp=n(136),Up=n.n(Fp);function Bp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wp(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vp(e){return(Vp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Hp(){return(Hp=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function $p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function qp(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Gp(e,t){return!t||"object"!==Vp(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Xp(e){return(Xp=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Kp(e,t){return(Kp=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Yp=function(e){function t(){return $p(this,t),Gp(this,Xp(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Kp(e,t)}(t,e),n=t,o=[{key:"getPath",value:function(e,t,n,r,o,i){return"M".concat(e,",").concat(o,"v").concat(r,"M").concat(i,",").concat(t,"h").concat(n)}}],(r=[{key:"render",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,o=e.height,a=e.top,u=e.left,c=e.className;return Lt(t)&&Lt(n)&&Lt(r)&&Lt(o)&&Lt(a)&&Lt(u)?i.a.createElement("path",Hp({},gn(this.props),{className:Q()("recharts-cross",c),d:this.constructor.getPath(t,n,r,o,a,u)})):null}}])&&qp(n.prototype,r),o&&qp(n,o),t}(o.PureComponent);Yp.displayName="Cross",Yp.propTypes=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bp(n,!0).forEach((function(t){Wp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bp(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sn,{x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number,top:s.a.number,left:s.a.number,className:s.a.string}),Yp.defaultProps={x:0,y:0,top:0,left:0,width:0,height:0};var Qp=Yp;function Zp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Jp(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function eh(e){return(eh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function th(){return(th=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function nh(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function rh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function oh(e,t){return!t||"object"!==eh(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ih(e){return(ih=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ah(e,t){return(ah=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var uh=function(e){var t=e.cx,n=e.cy,r=e.radius,o=e.angle,i=e.sign,a=e.isExternal,u=e.cornerRadius,c=e.cornerIsExternal,l=u*(a?1:-1)+r,s=Math.asin(u/l)/jf,f=c?o:o+i*s,p=c?o-i*s:o;return{center:Cf(t,n,l,f),circleTangency:Cf(t,n,r,f),lineTangency:Cf(t,n,l*Math.cos(s*jf),p),theta:s}},ch=function(e){var t=e.cx,n=e.cy,r=e.innerRadius,o=e.outerRadius,i=e.startAngle,a=function(e,t){return Dt(t-e)*Math.min(Math.abs(t-e),359.999)}(i,e.endAngle),u=i+a,c=Cf(t,n,o,i),l=Cf(t,n,o,u),s="M ".concat(c.x,",").concat(c.y,"\n    A ").concat(o,",").concat(o,",0,\n    ").concat(+(Math.abs(a)>180),",").concat(+(i>u),",\n    ").concat(l.x,",").concat(l.y,"\n  ");if(r>0){var f=Cf(t,n,r,i),p=Cf(t,n,r,u);s+="L ".concat(p.x,",").concat(p.y,"\n            A ").concat(r,",").concat(r,",0,\n            ").concat(+(Math.abs(a)>180),",").concat(+(i<=u),",\n            ").concat(f.x,",").concat(f.y," Z")}else s+="L ".concat(t,",").concat(n," Z");return s},lh=function(e){function t(){return nh(this,t),oh(this,ih(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ah(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.cx,n=e.cy,r=e.innerRadius,o=e.outerRadius,a=e.cornerRadius,u=e.forceCornerRadius,c=e.cornerIsExternal,l=e.startAngle,s=e.endAngle,f=e.className;if(o<r||l===s)return null;var p,h=Q()("recharts-sector",f),d=o-r,y=Bt(a,d,0,!0);return p=y>0&&Math.abs(l-s)<360?function(e){var t=e.cx,n=e.cy,r=e.innerRadius,o=e.outerRadius,i=e.cornerRadius,a=e.forceCornerRadius,u=e.cornerIsExternal,c=e.startAngle,l=e.endAngle,s=Dt(l-c),f=uh({cx:t,cy:n,radius:o,angle:c,sign:s,cornerRadius:i,cornerIsExternal:u}),p=f.circleTangency,h=f.lineTangency,d=f.theta,y=uh({cx:t,cy:n,radius:o,angle:l,sign:-s,cornerRadius:i,cornerIsExternal:u}),v=y.circleTangency,m=y.lineTangency,g=y.theta,b=Math.abs(c-l)-d-g;if(b<0)return a?"M ".concat(h.x,",").concat(h.y,"\n        a").concat(i,",").concat(i,",0,0,1,").concat(2*i,",0\n        a").concat(i,",").concat(i,",0,0,1,").concat(2*-i,",0\n      "):ch({cx:t,cy:n,innerRadius:r,outerRadius:o,startAngle:c,endAngle:l});var x="M ".concat(h.x,",").concat(h.y,"\n    A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(p.x,",").concat(p.y,"\n    A").concat(o,",").concat(o,",0,").concat(+(b>180),",").concat(+(s<0),",").concat(v.x,",").concat(v.y,"\n    A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(m.x,",").concat(m.y,"\n  ");if(r>0){var w=uh({cx:t,cy:n,radius:r,angle:c,sign:s,isExternal:!0,cornerRadius:i,cornerIsExternal:u}),O=w.circleTangency,k=w.lineTangency,E=w.theta,S=uh({cx:t,cy:n,radius:r,angle:l,sign:-s,isExternal:!0,cornerRadius:i,cornerIsExternal:u}),T=S.circleTangency,_=S.lineTangency,P=S.theta,M=Math.abs(c-l)-E-P;if(M<0)return"".concat(x,"L").concat(t,",").concat(n,"Z");x+="L".concat(_.x,",").concat(_.y,"\n      A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(T.x,",").concat(T.y,"\n      A").concat(r,",").concat(r,",0,").concat(+(M>180),",").concat(+(s>0),",").concat(O.x,",").concat(O.y,"\n      A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(k.x,",").concat(k.y,"Z")}else x+="L".concat(t,",").concat(n,"Z");return x}({cx:t,cy:n,innerRadius:r,outerRadius:o,cornerRadius:Math.min(y,d/2),forceCornerRadius:u,cornerIsExternal:c,startAngle:l,endAngle:s}):ch({cx:t,cy:n,innerRadius:r,outerRadius:o,startAngle:l,endAngle:s}),i.a.createElement("path",th({},gn(this.props),xn(this.props),{className:h,d:p}))}}])&&rh(n.prototype,r),o&&rh(n,o),t}(o.PureComponent);lh.displayName="Sector",lh.propTypes=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zp(n,!0).forEach((function(t){Jp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zp(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sn,{className:s.a.string,cx:s.a.number,cy:s.a.number,innerRadius:s.a.number,outerRadius:s.a.number,startAngle:s.a.number,endAngle:s.a.number,cornerRadius:s.a.oneOfType([s.a.number,s.a.string]),forceCornerRadius:s.a.bool,cornerIsExternal:s.a.bool}),lh.defaultProps={cx:0,cy:0,innerRadius:0,outerRadius:0,startAngle:0,endAngle:0,cornerRadius:0,forceCornerRadius:!1,cornerIsExternal:!1};var sh=lh;function fh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ph(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function hh(e){return(hh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dh(){return(dh=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function yh(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function vh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mh(e,t){return!t||"object"!==hh(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function gh(e){return(gh=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function bh(e,t){return(bh=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var xh=function(e,t,n,r,o){var i,a=Math.min(Math.abs(n)/2,Math.abs(r)/2),u=r>=0?1:-1,c=n>=0?1:-1,l=r>=0&&n>=0||r<0&&n<0?1:0;if(a>0&&o instanceof Array){for(var s=[],f=0;f<4;f++)s[f]=o[f]>a?a:o[f];i="M".concat(e,",").concat(t+u*s[0]),s[0]>0&&(i+="A ".concat(s[0],",").concat(s[0],",0,0,").concat(l,",").concat(e+c*s[0],",").concat(t)),i+="L ".concat(e+n-c*s[1],",").concat(t),s[1]>0&&(i+="A ".concat(s[1],",").concat(s[1],",0,0,").concat(l,",\n        ").concat(e+n,",").concat(t+u*s[1])),i+="L ".concat(e+n,",").concat(t+r-u*s[2]),s[2]>0&&(i+="A ".concat(s[2],",").concat(s[2],",0,0,").concat(l,",\n        ").concat(e+n-c*s[2],",").concat(t+r)),i+="L ".concat(e+c*s[3],",").concat(t+r),s[3]>0&&(i+="A ".concat(s[3],",").concat(s[3],",0,0,").concat(l,",\n        ").concat(e,",").concat(t+r-u*s[3])),i+="Z"}else if(a>0&&o===+o&&o>0){var p=Math.min(a,o);i="M ".concat(e,",").concat(t+u*p,"\n            A ").concat(p,",").concat(p,",0,0,").concat(l,",").concat(e+c*p,",").concat(t,"\n            L ").concat(e+n-c*p,",").concat(t,"\n            A ").concat(p,",").concat(p,",0,0,").concat(l,",").concat(e+n,",").concat(t+u*p,"\n            L ").concat(e+n,",").concat(t+r-u*p,"\n            A ").concat(p,",").concat(p,",0,0,").concat(l,",").concat(e+n-c*p,",").concat(t+r,"\n            L ").concat(e+c*p,",").concat(t+r,"\n            A ").concat(p,",").concat(p,",0,0,").concat(l,",").concat(e,",").concat(t+r-u*p," Z")}else i="M ".concat(e,",").concat(t," h ").concat(n," v ").concat(r," h ").concat(-n," Z");return i},wh=function(e){function t(){var e,n;yh(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=mh(this,(e=gh(t)).call.apply(e,[this].concat(o)))).state={totalLength:-1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bh(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){if(this.node&&this.node.getTotalLength)try{var e=this.node.getTotalLength();e&&this.setState({totalLength:e})}catch(e){}}},{key:"render",value:function(){var e=this,t=this.props,n=t.x,r=t.y,o=t.width,a=t.height,u=t.radius,c=t.className,l=this.state.totalLength,s=this.props,f=s.animationEasing,p=s.animationDuration,h=s.animationBegin,d=s.isAnimationActive,y=s.isUpdateAnimationActive;if(n!==+n||r!==+r||o!==+o||a!==+a||0===o||0===a)return null;var v=Q()("recharts-rectangle",c);return y?i.a.createElement(Et,{canBegin:l>0,from:{width:o,height:a,x:n,y:r},to:{width:o,height:a,x:n,y:r},duration:p,animationEasing:f,isActive:y},(function(t){var n=t.width,r=t.height,o=t.x,a=t.y;return i.a.createElement(Et,{canBegin:l>0,from:"0px ".concat(-1===l?1:l,"px"),to:"".concat(l,"px 0px"),attributeName:"strokeDasharray",begin:h,duration:p,isActive:d,easing:f},i.a.createElement("path",dh({},gn(e.props),xn(e.props),{className:v,d:xh(o,a,n,r,u),ref:function(t){e.node=t}})))})):i.a.createElement("path",dh({},gn(this.props),xn(this.props),{className:v,d:xh(n,r,o,a,u)}))}}])&&vh(n.prototype,r),o&&vh(n,o),t}(o.PureComponent);wh.displayName="Rectangle",wh.propTypes=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fh(n,!0).forEach((function(t){ph(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fh(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},sn,{},fn,{className:s.a.string,x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number,radius:s.a.oneOfType([s.a.number,s.a.array]),isAnimationActive:s.a.bool,isUpdateAnimationActive:s.a.bool,animationBegin:s.a.number,animationDuration:s.a.number,animationEasing:s.a.oneOf(["ease","ease-in","ease-out","ease-in-out","linear"])}),wh.defaultProps={x:0,y:0,width:0,height:0,radius:0,isAnimationActive:!1,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"};var Oh=wh;function kh(e){return(kh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Eh(){return(Eh=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Sh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Th(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sh(n,!0).forEach((function(t){_h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sh(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ph(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Mh(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function jh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ah(e,t){return!t||"object"!==kh(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ch(e){return(Ch=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Nh(e,t){return(Nh=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ih=function(e){function t(){return Mh(this,t),Ah(this,Ch(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Nh(e,t)}(t,e),n=t,o=[{key:"getTicks",value:function(e){var n=e.tick,r=e.ticks,o=e.viewBox,i=e.minTickGap,a=e.orientation,u=e.interval,c=e.tickFormatter,l=e.unit;return r&&r.length&&n?Lt(u)||En()?t.getNumberIntervalTicks(r,Lt(u)?u:0):"preserveStartEnd"===u?t.getTicksStart({ticks:r,tickFormatter:c,viewBox:o,orientation:a,minTickGap:i,unit:l},!0):"preserveStart"===u?t.getTicksStart({ticks:r,tickFormatter:c,viewBox:o,orientation:a,minTickGap:i,unit:l}):t.getTicksEnd({ticks:r,tickFormatter:c,viewBox:o,orientation:a,minTickGap:i,unit:l}):[]}},{key:"getNumberIntervalTicks",value:function(e,t){return e.filter((function(e,n){return n%(t+1)==0}))}},{key:"getTicksStart",value:function(e,t){var n,r,o=e.ticks,i=e.tickFormatter,a=e.viewBox,u=e.orientation,c=e.minTickGap,l=e.unit,s=a.x,f=a.y,p=a.width,h=a.height,d="top"===u||"bottom"===u?"width":"height",y=(o||[]).slice(),v=l&&"width"===d?ko(l)[d]:0,m=y.length,g=m>=2?Dt(y[1].coordinate-y[0].coordinate):1;if(1===g?(n="width"===d?s:f,r="width"===d?s+p:f+h):(n="width"===d?s+p:f+h,r="width"===d?s:f),t){var b=o[m-1],x=fe()(i)?i(b.value):b.value,w=ko(x)[d]+v,O=g*(b.coordinate+g*w/2-r);y[m-1]=b=Th({},b,{tickCoord:O>0?b.coordinate-O*g:b.coordinate}),g*(b.tickCoord-g*w/2-n)>=0&&g*(b.tickCoord+g*w/2-r)<=0&&(r=b.tickCoord-g*(w/2+c),y[m-1]=Th({},b,{isShow:!0}))}for(var k=t?m-1:m,E=0;E<k;E++){var S=y[E],T=fe()(i)?i(S.value):S.value,_=ko(T)[d]+v;if(0===E){var P=g*(S.coordinate-g*_/2-n);y[E]=S=Th({},S,{tickCoord:P<0?S.coordinate-P*g:S.coordinate})}else y[E]=S=Th({},S,{tickCoord:S.coordinate});g*(S.tickCoord-g*_/2-n)>=0&&g*(S.tickCoord+g*_/2-r)<=0&&(n=S.tickCoord+g*(_/2+c),y[E]=Th({},S,{isShow:!0}))}return y.filter((function(e){return e.isShow}))}},{key:"getTicksEnd",value:function(e){var t,n,r=e.ticks,o=e.tickFormatter,i=e.viewBox,a=e.orientation,u=e.minTickGap,c=e.unit,l=i.x,s=i.y,f=i.width,p=i.height,h="top"===a||"bottom"===a?"width":"height",d=c&&"width"===h?ko(c)[h]:0,y=(r||[]).slice(),v=y.length,m=v>=2?Dt(y[1].coordinate-y[0].coordinate):1;1===m?(t="width"===h?l:s,n="width"===h?l+f:s+p):(t="width"===h?l+f:s+p,n="width"===h?l:s);for(var g=v-1;g>=0;g--){var b=y[g],x=fe()(o)?o(b.value):b.value,w=ko(x)[h]+d;if(g===v-1){var O=m*(b.coordinate+m*w/2-n);y[g]=b=Th({},b,{tickCoord:O>0?b.coordinate-O*m:b.coordinate})}else y[g]=b=Th({},b,{tickCoord:b.coordinate});m*(b.tickCoord-m*w/2-t)>=0&&m*(b.tickCoord+m*w/2-n)<=0&&(n=b.tickCoord-m*(w/2+u),y[g]=Th({},b,{isShow:!0}))}return y.filter((function(e){return e.isShow}))}},{key:"renderTickItem",value:function(e,t,n){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement(Do,Eh({},t,{className:"recharts-cartesian-axis-tick-value"}),n)}}],(r=[{key:"shouldComponentUpdate",value:function(e,t){var n=e.viewBox,r=Ph(e,["viewBox"]),o=this.props,i=o.viewBox,a=Ph(o,["viewBox"]);return!un(n,i)||!un(r,a)||!un(t,this.state)}},{key:"getTickLineCoord",value:function(e){var t,n,r,o,i,a,u=this.props,c=u.x,l=u.y,s=u.width,f=u.height,p=u.orientation,h=u.tickSize,d=u.mirror,y=u.tickMargin,v=d?-1:1,m=e.tickSize||h,g=Lt(e.tickCoord)?e.tickCoord:e.coordinate;switch(p){case"top":t=n=e.coordinate,a=(r=(o=l+!d*f)-v*m)-v*y,i=g;break;case"left":r=o=e.coordinate,i=(t=(n=c+!d*s)-v*m)-v*y,a=g;break;case"right":r=o=e.coordinate,i=(t=(n=c+d*s)+v*m)+v*y,a=g;break;default:t=n=e.coordinate,a=(r=(o=l+d*f)+v*m)+v*y,i=g}return{line:{x1:t,y1:r,x2:n,y2:o},tick:{x:i,y:a}}}},{key:"getTickTextAnchor",value:function(){var e,t=this.props,n=t.orientation,r=t.mirror;switch(n){case"left":e=r?"start":"end";break;case"right":e=r?"end":"start";break;default:e="middle"}return e}},{key:"getTickVerticalAnchor",value:function(){var e=this.props,t=e.orientation,n=e.mirror,r="end";switch(t){case"left":case"right":r="middle";break;case"top":r=n?"start":"end";break;default:r=n?"end":"start"}return r}},{key:"renderAxisLine",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,o=e.height,a=e.orientation,u=e.axisLine,c=e.mirror,l=Th({},gn(this.props),{fill:"none"},gn(u));if("top"===a||"bottom"===a){var s="top"===a&&!c||"bottom"===a&&c;l=Th({},l,{x1:t,y1:n+s*o,x2:t+r,y2:n+s*o})}else{var f="left"===a&&!c||"right"===a&&c;l=Th({},l,{x1:t+f*r,y1:n,x2:t+f*r,y2:n+o})}return i.a.createElement("line",Eh({className:"recharts-cartesian-axis-line"},l))}},{key:"renderTicks",value:function(e){var n=this,r=this.props,o=r.tickLine,a=r.stroke,u=r.tick,c=r.tickFormatter,l=r.unit,s=t.getTicks(Th({},this.props,{ticks:e})),f=this.getTickTextAnchor(),p=this.getTickVerticalAnchor(),h=gn(this.props),d=gn(u),y=Th({},h,{fill:"none"},gn(o)),v=s.map((function(e,t){var r=n.getTickLineCoord(e),v=r.line,m=r.tick,g=Th({textAnchor:f,verticalAnchor:p},h,{stroke:"none",fill:a},d,{},m,{index:t,payload:e,visibleTicksCount:s.length});return i.a.createElement(lo,Eh({className:"recharts-cartesian-axis-tick",key:"tick-".concat(t)},On(n.props,e,t)),o&&i.a.createElement("line",Eh({className:"recharts-cartesian-axis-tick-line"},y,v)),u&&n.constructor.renderTickItem(u,g,"".concat(fe()(c)?c(e.value):e.value).concat(l||"")))}));return i.a.createElement("g",{className:"recharts-cartesian-axis-ticks"},v)}},{key:"render",value:function(){var e=this.props,t=e.axisLine,n=e.width,r=e.height,o=e.ticksGenerator,a=e.className;if(e.hide)return null;var u=this.props,c=u.ticks,l=Ph(u,["ticks"]),s=c;return fe()(o)&&(s=c&&c.length>0?o(this.props):o(l)),n<=0||r<=0||!s||!s.length?null:i.a.createElement(lo,{className:Q()("recharts-cartesian-axis",a)},t&&this.renderAxisLine(),this.renderTicks(s),Gf.renderCallByParent(this.props))}}])&&jh(n.prototype,r),o&&jh(n,o),t}(o.Component);Ih.displayName="CartesianAxis",Ih.propTypes=Th({},sn,{},fn,{className:s.a.string,x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number,orientation:s.a.oneOf(["top","bottom","left","right"]),viewBox:s.a.shape({x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number}),tick:s.a.oneOfType([s.a.bool,s.a.func,s.a.object,s.a.element]),axisLine:s.a.oneOfType([s.a.bool,s.a.object]),tickLine:s.a.oneOfType([s.a.bool,s.a.object]),mirror:s.a.bool,tickMargin:s.a.number.isRequired,minTickGap:s.a.number,ticks:s.a.array,tickSize:s.a.number,stroke:s.a.string,tickFormatter:s.a.func,ticksGenerator:s.a.func,interval:s.a.oneOfType([s.a.number,s.a.oneOf(["preserveStart","preserveEnd","preserveStartEnd"])])}),Ih.defaultProps={x:0,y:0,width:0,height:0,viewBox:{x:0,y:0,width:0,height:0},orientation:"bottom",ticks:[],stroke:"#666",tickLine:!0,axisLine:!0,tick:!0,mirror:!1,minTickGap:5,tickSize:6,tickMargin:2,interval:"preserveEnd"};var Dh=Ih;function Rh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Lh(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var zh=["Webkit","Moz","O","ms"],Fh=function(e,t){if(!e)return null;var n=e.replace(/(\w)/,(function(e){return e.toUpperCase()})),r=zh.reduce((function(e,r){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rh(n,!0).forEach((function(t){Lh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rh(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,Lh({},r+n,t))}),{});return r[e]=t,r};function Uh(e){return(Uh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bh(){return(Bh=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Wh(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Hh(e){return(Hh=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function qh(e,t){return(qh=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Gh=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Uh(t)&&"function"!=typeof t?$h(e):t}(this,Hh(t).call(this,e))).handleDrag=function(e){n.leaveTimer&&(clearTimeout(n.leaveTimer),n.leaveTimer=null),n.state.isTravellerMoving?n.handleTravellerMove(e):n.state.isSlideMoving&&n.handleSlideDrag(e)},n.handleTouchMove=function(e){null!=e.changedTouches&&e.changedTouches.length>0&&n.handleDrag(e.changedTouches[0])},n.handleDragEnd=function(){n.setState({isTravellerMoving:!1,isSlideMoving:!1})},n.handleLeaveWrapper=function(){(n.state.isTravellerMoving||n.state.isSlideMoving)&&(n.leaveTimer=setTimeout(n.handleDragEnd,n.props.leaveTimeOut))},n.handleEnterSlideOrTraveller=function(){n.setState({isTextActive:!0})},n.handleLeaveSlideOrTraveller=function(){n.setState({isTextActive:!1})},n.handleSlideDragStart=function(e){var t=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e;n.setState({isTravellerMoving:!1,isSlideMoving:!0,slideMoveStartX:t.pageX})},n.travellerDragStartHandlers={startX:n.handleTravellerDragStart.bind($h(n),"startX"),endX:n.handleTravellerDragStart.bind($h(n),"endX")},n.state=e.data&&e.data.length?n.updateScale(e):{},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&qh(e,t)}(t,e),n=t,a=[{key:"getIndexInRange",value:function(e,t){for(var n=0,r=e.length-1;r-n>1;){var o=Math.floor((n+r)/2);e[o]>t?r=o:n=o}return t>=e[r]?r:n}}],(r=[{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props,r=n.data,o=n.width,i=n.x,a=n.travellerWidth,u=n.updateId;(e.data!==r||e.updateId!==u)&&e.data&&e.data.length?this.setState(this.updateScale(e)):e.width===o&&e.x===i&&e.travellerWidth===a||(this.scale.range([e.x,e.x+e.width-e.travellerWidth]),this.scaleValues=this.scale.domain().map((function(e){return t.scale(e)})),this.setState({startX:this.scale(e.startIndex),endX:this.scale(e.endIndex)}))}},{key:"componentWillUnmount",value:function(){this.scale=null,this.scaleValues=null,this.leaveTimer&&(clearTimeout(this.leaveTimer),this.leaveTimer=null)}},{key:"getIndex",value:function(e){var t=e.startX,n=e.endX,r=this.props,o=r.gap,i=r.data.length-1,a=Math.min(t,n),u=Math.max(t,n),c=this.constructor.getIndexInRange(this.scaleValues,a),l=this.constructor.getIndexInRange(this.scaleValues,u);return{startIndex:c-c%o,endIndex:l===i?i:l-l%o}}},{key:"getTextOfTick",value:function(e){var t=this.props,n=t.data,r=t.tickFormatter,o=t.dataKey,i=of(n[e],o,e);return fe()(r)?r(i):i}},{key:"handleSlideDrag",value:function(e){var t=this.state,n=t.slideMoveStartX,r=t.startX,o=t.endX,i=this.props,a=i.x,u=i.width,c=i.travellerWidth,l=i.startIndex,s=i.endIndex,f=i.onChange,p=e.pageX-n;p>0?p=Math.min(p,a+u-c-o,a+u-c-r):p<0&&(p=Math.max(p,a-r,a-o));var h=this.getIndex({startX:r+p,endX:o+p});h.startIndex===l&&h.endIndex===s||!f||f(h),this.setState({startX:r+p,endX:o+p,slideMoveStartX:e.pageX})}},{key:"handleTravellerDragStart",value:function(e,t){var n=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t;this.setState({isSlideMoving:!1,isTravellerMoving:!0,movingTravellerId:e,brushMoveStartX:n.pageX})}},{key:"handleTravellerMove",value:function(e){var t,n=this.state,r=n.brushMoveStartX,o=n.movingTravellerId,i=n.endX,a=n.startX,u=this.state[o],c=this.props,l=c.x,s=c.width,f=c.travellerWidth,p=c.onChange,h=c.gap,d=c.data,y={startX:this.state.startX,endX:this.state.endX},v=e.pageX-r;v>0?v=Math.min(v,l+s-f-u):v<0&&(v=Math.max(v,l-u)),y[o]=u+v;var m=this.getIndex(y),g=m.startIndex,b=m.endIndex;this.setState((Wh(t={},o,u+v),Wh(t,"brushMoveStartX",e.pageX),t),(function(){var e;p&&(e=d.length-1,("startX"===o&&(i>a?g%h==0:b%h==0)||i<a&&b===e||"endX"===o&&(i>a?b%h==0:g%h==0)||i>a&&b===e)&&p(m))}))}},{key:"updateScale",value:function(e){var t=this,n=e.data,r=e.startIndex,o=e.endIndex,i=e.x,a=e.width,u=e.travellerWidth,c=n.length;return this.scale=mi().domain(zp()(0,c)).range([i,i+a-u]),this.scaleValues=this.scale.domain().map((function(e){return t.scale(e)})),{isTextActive:!1,isSlideMoving:!1,isTravellerMoving:!1,startX:this.scale(r),endX:this.scale(o)}}},{key:"renderBackground",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,o=e.height,a=e.fill,u=e.stroke;return i.a.createElement("rect",{stroke:u,fill:a,x:t,y:n,width:r,height:o})}},{key:"renderPanorama",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,a=e.height,u=e.data,c=e.children,l=e.padding,s=o.Children.only(c);return s?i.a.cloneElement(s,{x:t,y:n,width:r,height:a,margin:l,compact:!0,data:u}):null}},{key:"renderTraveller",value:function(e,t){var n=this.props,r=n.y,o=n.travellerWidth,a=n.height,u=n.stroke,c=Math.floor(r+a/2)-1,l=Math.max(e,this.props.x);return i.a.createElement(lo,{className:"recharts-brush-traveller",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.travellerDragStartHandlers[t],onTouchStart:this.travellerDragStartHandlers[t],style:{cursor:"col-resize"}},i.a.createElement("rect",{x:l,y:r,width:o,height:a,fill:u,stroke:"none"}),i.a.createElement("line",{x1:l+1,y1:c,x2:l+o-1,y2:c,fill:"none",stroke:"#fff"}),i.a.createElement("line",{x1:l+1,y1:c+2,x2:l+o-1,y2:c+2,fill:"none",stroke:"#fff"}))}},{key:"renderSlide",value:function(e,t){var n=this.props,r=n.y,o=n.height,a=n.stroke;return i.a.createElement("rect",{className:"recharts-brush-slide",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.handleSlideDragStart,onTouchStart:this.handleSlideDragStart,style:{cursor:"move"},stroke:"none",fill:a,fillOpacity:.2,x:Math.min(e,t),y:r,width:Math.abs(t-e),height:o})}},{key:"renderText",value:function(){var e=this.props,t=e.startIndex,n=e.endIndex,r=e.y,o=e.height,a=e.travellerWidth,u=e.stroke,c=this.state,l=c.startX,s=c.endX,f={pointerEvents:"none",fill:u};return i.a.createElement(lo,{className:"recharts-brush-texts"},i.a.createElement(Do,Bh({textAnchor:"end",verticalAnchor:"middle",x:Math.min(l,s)-5,y:r+o/2},f),this.getTextOfTick(t)),i.a.createElement(Do,Bh({textAnchor:"start",verticalAnchor:"middle",x:Math.max(l,s)+a+5,y:r+o/2},f),this.getTextOfTick(n)))}},{key:"render",value:function(){var e=this.props,t=e.data,n=e.className,r=e.children,o=e.x,a=e.y,u=e.width,c=e.height,l=e.alwaysShowText,s=this.state,f=s.startX,p=s.endX,h=s.isTextActive,d=s.isSlideMoving,y=s.isTravellerMoving;if(!t||!t.length||!Lt(o)||!Lt(a)||!Lt(u)||!Lt(c)||u<=0||c<=0)return null;var v=Q()("recharts-brush",n),m=1===i.a.Children.count(r),g=Fh("userSelect","none");return i.a.createElement(lo,{className:v,onMouseMove:this.handleDrag,onMouseLeave:this.handleLeaveWrapper,onMouseUp:this.handleDragEnd,onTouchEnd:this.handleDragEnd,onTouchMove:this.handleTouchMove,style:g},this.renderBackground(),m&&this.renderPanorama(),this.renderSlide(f,p),this.renderTraveller(f,"startX"),this.renderTraveller(p,"endX"),(h||d||y||l)&&this.renderText())}}])&&Vh(n.prototype,r),a&&Vh(n,a),t}(o.PureComponent);Gh.displayName="Brush",Gh.propTypes={className:s.a.string,fill:s.a.string,stroke:s.a.string,x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number.isRequired,travellerWidth:s.a.number,gap:s.a.number,padding:s.a.shape({top:s.a.number,right:s.a.number,bottom:s.a.number,left:s.a.number}),dataKey:s.a.oneOfType([s.a.string,s.a.number,s.a.func]),data:s.a.array,startIndex:s.a.number,endIndex:s.a.number,tickFormatter:s.a.func,children:s.a.node,onChange:s.a.func,updateId:s.a.oneOfType([s.a.string,s.a.number]),leaveTimeOut:s.a.number,alwaysShowText:s.a.bool},Gh.defaultProps={height:40,travellerWidth:5,gap:1,fill:"#fff",stroke:"#666",padding:{top:1,right:1,bottom:1,left:1},leaveTimeOut:1e3,alwaysShowText:!1};var Xh=Gh,Kh=function(e,t){var n=e.alwaysShow,r=e.ifOverflow;return n&&(r="extendDomain"),r===t},Yh=n(77),Qh=n.n(Yh);function Zh(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Jh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ed(e,t,n){return t&&Jh(e.prototype,t),n&&Jh(e,n),e}function td(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?td(n,!0).forEach((function(t){rd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):td(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var od=function(e,t){var n=e.x,r=e.y,o=t.x,i=t.y;return{x:Math.min(n,o),y:Math.min(r,i),width:Math.abs(o-n),height:Math.abs(i-r)}},id=function(){function e(t){Zh(this,e),this.scale=t}return ed(e,null,[{key:"create",value:function(t){return new e(t)}}]),ed(e,[{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.bandAware,r=t.position;if(void 0!==e){if(r)switch(r){case"start":return this.scale(e);case"middle":var o=this.bandwidth?this.bandwidth()/2:0;return this.scale(e)+o;case"end":var i=this.bandwidth?this.bandwidth():0;return this.scale(e)+i;default:return this.scale(e)}if(n){var a=this.bandwidth?this.bandwidth()/2:0;return this.scale(e)+a}return this.scale(e)}}},{key:"isInRange",value:function(e){var t=this.range(),n=t[0],r=t[t.length-1];return n<=r?e>=n&&e<=r:e>=r&&e<=n}},{key:"domain",get:function(){return this.scale.domain}},{key:"range",get:function(){return this.scale.range}},{key:"rangeMin",get:function(){return this.range()[0]}},{key:"rangeMax",get:function(){return this.range()[1]}},{key:"bandwidth",get:function(){return this.scale.bandwidth}}]),e}();id.EPS=1e-4;var ad=function(){function e(t){Zh(this,e),this.scales=Qh()(t,id.create),Object.assign(this,this.scales)}return ed(e,null,[{key:"create",value:function(e){return new this(e)}}]),ed(e,[{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.bandAware,r=this.scales;return Qh()(e,(function(e,t){return r[t].apply(e,{bandAware:n})}))}},{key:"isInRange",value:function(e){var t=this.scales;return Ip()(e,(function(e,n){return t[n].isInRange(e)}))}}]),e}();function ud(e){return(ud="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function cd(){return(cd=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ld(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ld(n,!0).forEach((function(t){fd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ld(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function pd(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function hd(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dd(e,t){return!t||"object"!==ud(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function yd(e){return(yd=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vd(e,t){return(vd=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var md=function(e){function t(){return pd(this,t),dd(this,yd(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vd(e,t)}(t,e),n=t,o=[{key:"renderDot",value:function(e,t){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement(oo,cd({},t,{cx:t.cx,cy:t.cy,className:"recharts-reference-dot-dot"}))}}],(r=[{key:"getCoordinate",value:function(){var e=this.props,t=e.x,n=e.y,r=e.xAxis,o=e.yAxis,i=ad.create({x:r.scale,y:o.scale}),a=i.apply({x:t,y:n},{bandAware:!0});return Kh(this.props,"discard")&&!i.isInRange(a)?null:a}},{key:"render",value:function(){var e=this.props,t=e.x,n=e.y,r=e.r,o=(e.alwaysShow,e.clipPathId),a=zt(t),u=zt(n);if(!a||!u)return null;var c=this.getCoordinate();if(!c)return null;var l=c.x,s=c.y,f=this.props,p=f.shape,h=f.className,d=sd({clipPath:Kh(this.props,"hidden")?"url(#".concat(o,")"):void 0},gn(this.props),{},xn(this.props),{cx:l,cy:s});return i.a.createElement(lo,{className:Q()("recharts-reference-dot",h)},this.constructor.renderDot(p,d),Gf.renderCallByParent(this.props,{x:l-r,y:s-r,width:2*r,height:2*r}))}}])&&hd(n.prototype,r),o&&hd(n,o),t}(o.PureComponent);md.displayName="ReferenceDot",md.propTypes=sd({},sn,{},fn,{r:s.a.number,xAxis:s.a.shape({scale:s.a.func}),yAxis:s.a.shape({scale:s.a.func}),isFront:s.a.bool,alwaysShow:s.a.bool,ifOverflow:s.a.oneOf(["hidden","visible","discard","extendDomain"]),x:s.a.oneOfType([s.a.number,s.a.string]),y:s.a.oneOfType([s.a.number,s.a.string]),className:s.a.oneOfType([s.a.number,s.a.string]),yAxisId:s.a.oneOfType([s.a.string,s.a.number]),xAxisId:s.a.oneOfType([s.a.string,s.a.number]),shape:s.a.oneOfType([s.a.func,s.a.element]),clipPathId:s.a.string}),md.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#fff",stroke:"#ccc",fillOpacity:1,strokeWidth:1};var gd=md,bd=n(137),xd=n.n(bd);function wd(e){return(wd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Od(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function kd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Od(n,!0).forEach((function(t){Ed(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Od(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ed(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Sd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Td(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pd(e,t){return!t||"object"!==wd(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Md(e){return(Md=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function jd(e,t){return(jd=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ad(){return(Ad=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Cd=function(e){function t(){return Td(this,t),Pd(this,Md(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&jd(e,t)}(t,e),n=t,(r=[{key:"getEndPoints",value:function(e,t,n,r){var o=this.props,i=o.viewBox,a=i.x,u=i.y,c=i.width,l=i.height,s=o.position;if(n){var f=this.props,p=f.y,h=f.yAxis.orientation,d=e.y.apply(p,{position:s});if(Kh(this.props,"discard")&&!e.y.isInRange(d))return null;var y=[{x:a+c,y:d},{x:a,y:d}];return"left"===h?y.reverse():y}if(t){var v=this.props,m=v.x,g=v.xAxis.orientation,b=e.x.apply(m,{position:s});if(Kh(this.props,"discard")&&!e.x.isInRange(b))return null;var x=[{x:b,y:u+l},{x:b,y:u}];return"top"===g?x.reverse():x}if(r){var w=this.props.segment.map((function(t){return e.apply(t,{position:s})}));return Kh(this.props,"discard")&&xd()(w,(function(t){return!e.isInRange(t)}))?null:w}return null}},{key:"render",value:function(){var e=this.props,t=e.x,n=e.y,r=e.segment,o=e.xAxis,a=e.yAxis,u=e.shape,c=e.className,l=(e.alwaysShow,e.clipPathId),s=ad.create({x:o.scale,y:a.scale}),f=zt(t),p=zt(n),h=r&&2===r.length,d=this.getEndPoints(s,f,p,h);if(!d)return null;var y=Sd(d,2),v=y[0],m=v.x,g=v.y,b=y[1],x=b.x,w=b.y,O=kd({clipPath:Kh(this.props,"hidden")?"url(#".concat(l,")"):void 0},gn(this.props),{},xn(this.props),{x1:m,y1:g,x2:x,y2:w});return i.a.createElement(lo,{className:Q()("recharts-reference-line",c)},function(e,t){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement("line",Ad({},t,{className:"recharts-reference-line-line"}))}(u,O),Gf.renderCallByParent(this.props,function(e){var t=e.x1,n=e.y1,r=e.x2,o=e.y2;return od({x:t,y:n},{x:r,y:o})}({x1:m,y1:g,x2:x,y2:w})))}}])&&_d(n.prototype,r),o&&_d(n,o),t}(o.PureComponent);Cd.displayName="ReferenceLine",Cd.propTypes=kd({},sn,{viewBox:s.a.shape({x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number}),xAxis:s.a.object,yAxis:s.a.object,isFront:s.a.bool,alwaysShow:s.a.bool,ifOverflow:s.a.oneOf(["hidden","visible","discard","extendDomain"]),x:s.a.oneOfType([s.a.number,s.a.string]),y:s.a.oneOfType([s.a.number,s.a.string]),segment:s.a.arrayOf(s.a.shape({x:s.a.oneOfType([s.a.number,s.a.string]),y:s.a.oneOfType([s.a.number,s.a.string])})),position:s.a.oneOf(["middle","start","end"]),className:s.a.oneOfType([s.a.number,s.a.string]),yAxisId:s.a.oneOfType([s.a.string,s.a.number]),xAxisId:s.a.oneOfType([s.a.string,s.a.number]),shape:s.a.func}),Cd.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,fill:"none",stroke:"#ccc",fillOpacity:1,strokeWidth:1,position:"middle"};var Nd=Cd;function Id(e){return(Id="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dd(){return(Dd=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Rd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ld(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rd(n,!0).forEach((function(t){zd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rd(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Fd(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ud(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Bd(e,t){return!t||"object"!==Id(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wd(e){return(Wd=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vd(e,t){return(Vd=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Hd=function(e){function t(){return Fd(this,t),Bd(this,Wd(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vd(e,t)}(t,e),n=t,o=[{key:"renderRect",value:function(e,t){return i.a.isValidElement(e)?i.a.cloneElement(e,t):fe()(e)?e(t):i.a.createElement(Oh,Dd({},t,{className:"recharts-reference-area-rect"}))}}],(r=[{key:"getRect",value:function(e,t,n,r){var o=this.props,i=o.x1,a=o.x2,u=o.y1,c=o.y2,l=o.xAxis,s=o.yAxis,f=ad.create({x:l.scale,y:s.scale}),p={x:e?f.x.apply(i):f.x.rangeMin,y:n?f.y.apply(u):f.y.rangeMin},h={x:t?f.x.apply(a):f.x.rangeMax,y:r?f.y.apply(c):f.y.rangeMax};return!Kh(this.props,"discard")||f.isInRange(p)&&f.isInRange(h)?od(p,h):null}},{key:"render",value:function(){var e=this.props,t=e.x1,n=e.x2,r=e.y1,o=e.y2,a=e.className,u=(e.alwaysShow,e.clipPathId),c=zt(t),l=zt(n),s=zt(r),f=zt(o),p=this.props.shape;if(!(c||l||s||f||p))return null;var h=this.getRect(c,l,s,f);if(!h&&!p)return null;var d=Kh(this.props,"hidden")?"url(#".concat(u,")"):void 0;return i.a.createElement(lo,{className:Q()("recharts-reference-area",a)},this.constructor.renderRect(p,Ld({clipPath:d},this.props,{},h)),Gf.renderCallByParent(this.props,h))}}])&&Ud(n.prototype,r),o&&Ud(n,o),t}(o.PureComponent);Hd.displayName="ReferenceArea",Hd.propTypes=Ld({},sn,{viewBox:s.a.shape({x:s.a.number,y:s.a.number,width:s.a.number,height:s.a.number}),xAxis:s.a.object,yAxis:s.a.object,isFront:s.a.bool,alwaysShow:s.a.bool,ifOverflow:s.a.oneOf(["hidden","visible","discard","extendDomain"]),x1:s.a.oneOfType([s.a.number,s.a.string]),x2:s.a.oneOfType([s.a.number,s.a.string]),y1:s.a.oneOfType([s.a.number,s.a.string]),y2:s.a.oneOfType([s.a.number,s.a.string]),className:s.a.oneOfType([s.a.number,s.a.string]),yAxisId:s.a.oneOfType([s.a.string,s.a.number]),xAxisId:s.a.oneOfType([s.a.string,s.a.number]),shape:s.a.oneOfType([s.a.func,s.a.element])}),Hd.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#ccc",fillOpacity:.5,stroke:"none",strokeWidth:1};var $d=Hd,qd=function(e,t,n,r,o){var i=vn(e,Nd),a=vn(e,gd),u=i.concat(a),c=vn(e,$d),l="".concat(r,"Id"),s=r[0],f=t;if(u.length&&(f=u.reduce((function(e,t){if(t.props[l]===n&&Kh(t.props,"extendDomain")&&Lt(t.props[s])){var r=t.props[s];return[Math.min(e[0],r),Math.max(e[1],r)]}return e}),f)),c.length){var p="".concat(s,"1"),h="".concat(s,"2");f=c.reduce((function(e,t){if(t.props[l]===n&&Kh(t.props,"extendDomain")&&Lt(t.props[p])&&Lt(t.props[h])){var r=t.props[p],o=t.props[h];return[Math.min(e[0],r,o),Math.max(e[1],r,o)]}return e}),f)}return o&&o.length&&(f=o.reduce((function(e,t){return Lt(t)?[Math.min(e[0],t),Math.max(e[1],t)]:e}),f)),f},Gd=n(138),Xd=new(n.n(Gd).a);Xd.setMaxListeners&&Xd.setMaxListeners(10);var Kd="recharts.syncMouseEvents";function Yd(e){return(Yd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qd(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Zd(){return(Zd=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Jd(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function ey(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ty(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ey(n,!0).forEach((function(t){ny(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ey(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ny(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ry(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function oy(e){return(oy=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function iy(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ay(e,t){return(ay=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var uy={xAxis:["bottom","top"],yAxis:["left","right"]},cy={x:0,y:0},ly=function(e){var t=e.chartName,n=e.GraphicalChild,r=e.eventType,a=void 0===r?"axis":r,u=e.axisComponents,c=e.legendContent,l=e.formatAxisMap,f=e.defaultProps,p=e.propTypes,h=function(e){function r(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),(n=function(e,t){return!t||"object"!==Yd(t)&&"function"!=typeof t?iy(e):t}(this,oy(r).call(this,e))).handleLegendBBoxUpdate=function(e){if(e&&n.legendInstance){var t=n.state,r=t.dataStartIndex,o=t.dataEndIndex,i=t.updateId;n.setState(n.updateStateOfAxisMapsOffsetAndStackGroups({props:n.props,dataStartIndex:r,dataEndIndex:o,updateId:i}))}},n.handleReceiveSyncEvent=function(e,t,r){var o=n.props,i=o.syncId,a=o.layout,u=n.state.updateId;if(i===e&&t!==n.uniqueChartId){var c=r.dataStartIndex,l=r.dataEndIndex;if(le()(r.dataStartIndex)&&le()(r.dataEndIndex))if(le()(r.activeTooltipIndex))n.setState(r);else{var s=r.chartX,f=r.chartY,p=r.activeTooltipIndex,h=n.state,d=h.offset,y=h.tooltipTicks;if(!d)return;var v=ty({},d,{x:d.left,y:d.top}),m=Math.min(s,v.x+v.width),g=Math.min(f,v.y+v.height),b=y[p]&&y[p].value,x=n.getTooltipContent(p),w=y[p]?{x:"horizontal"===a?y[p].coordinate:m,y:"horizontal"===a?g:y[p].coordinate}:cy;n.setState(ty({},r,{activeLabel:b,activeCoordinate:w,activePayload:x}))}else n.setState(ty({dataStartIndex:c,dataEndIndex:l},n.updateStateOfAxisMapsOffsetAndStackGroups({props:n.props,dataStartIndex:c,dataEndIndex:l,updateId:u})))}},n.handleBrushChange=function(e){var t=e.startIndex,r=e.endIndex;if(t!==n.state.dataStartIndex||r!==n.state.dataEndIndex){var o=n.state.updateId;n.setState((function(){return ty({dataStartIndex:t,dataEndIndex:r},n.updateStateOfAxisMapsOffsetAndStackGroups({props:n.props,dataStartIndex:t,dataEndIndex:r,updateId:o}))})),n.triggerSyncEvent({dataStartIndex:t,dataEndIndex:r})}},n.handleMouseEnter=function(e){var t=n.props.onMouseEnter,r=n.getMouseInfo(e);if(r){var o=ty({},r,{isTooltipActive:!0});n.setState(o),n.triggerSyncEvent(o),fe()(t)&&t(o,e)}},n.triggeredAfterMouseMove=function(e){var t=n.props.onMouseMove,r=n.getMouseInfo(e),o=r?ty({},r,{isTooltipActive:!0}):{isTooltipActive:!1};n.setState(o),n.triggerSyncEvent(o),fe()(t)&&t(o,e)},n.handleItemMouseEnter=function(e){n.setState((function(){return{isTooltipActive:!0,activeItem:e,activePayload:e.tooltipPayload,activeCoordinate:e.tooltipPosition||{x:e.cx,y:e.cy}}}))},n.handleItemMouseLeave=function(){n.setState((function(){return{isTooltipActive:!1}}))},n.handleMouseMove=function(e){e&&fe()(e.persist)&&e.persist(),n.triggeredAfterMouseMove(e)},n.handleMouseLeave=function(e){var t=n.props.onMouseLeave,r={isTooltipActive:!1};n.setState(r),n.triggerSyncEvent(r),fe()(t)&&t(r,e)},n.handleOuterEvent=function(e){var t=function(e){var t=e&&e.type;return t&&pn[t]?pn[t]:null}(e);if(t&&fe()(n.props[t])){var r=n.getMouseInfo(e);(0,n.props[t])(r,e)}},n.handleClick=function(e){var t=n.props.onClick;fe()(t)&&t(n.getMouseInfo(e),e)},n.handleMouseDown=function(e){var t=n.props.onMouseDown;fe()(t)&&t(n.getMouseInfo(e),e)},n.handleMouseUp=function(e){var t=n.props.onMouseUp;fe()(t)&&t(n.getMouseInfo(e),e)},n.handleTouchMove=function(e){null!=e.changedTouches&&e.changedTouches.length>0&&n.handleMouseMove(e.changedTouches[0])},n.handleTouchStart=function(e){null!=e.changedTouches&&e.changedTouches.length>0&&n.handleMouseDown(e.changedTouches[0])},n.handleTouchEnd=function(e){null!=e.changedTouches&&e.changedTouches.length>0&&n.handleMouseUp(e.changedTouches[0])},n.verticalCoordinatesGenerator=function(e){var t=e.xAxis,n=e.width,r=e.height,o=e.offset;return pf(Dh.getTicks(ty({},Dh.defaultProps,{},t,{ticks:hf(t,!0),viewBox:{x:0,y:0,width:n,height:r}})),o.left,o.left+o.width)},n.horizontalCoordinatesGenerator=function(e){var t=e.yAxis,n=e.width,r=e.height,o=e.offset;return pf(Dh.getTicks(ty({},Dh.defaultProps,{},t,{ticks:hf(t,!0),viewBox:{x:0,y:0,width:n,height:r}})),o.top,o.top+o.height)},n.axesTicksGenerator=function(e){return hf(e,!0)},n.tooltipTicksGenerator=function(e){var t=Wt(e),n=hf(t,!1,!0);return{tooltipTicks:n,orderedTooltipTicks:Tt()(n,(function(e){return e.coordinate})),tooltipAxis:t,tooltipAxisBandSize:Sf(t)}},n.renderCursor=function(e){var r=n.state,i=r.isTooltipActive,a=r.activeCoordinate,u=r.activePayload,c=r.offset;if(!(e&&e.props.cursor&&i&&a))return null;var l,s=n.props.layout,f=Kr;if("ScatterChart"===t)l=a,f=Qp;else if("BarChart"===t)l=n.getCursorRectangle(),f=Oh;else if("radial"===s){var p=n.getCursorPoints(),h=p.cx,d=p.cy,y=p.radius;l={cx:h,cy:d,startAngle:p.startAngle,endAngle:p.endAngle,innerRadius:y,outerRadius:y},f=sh}else l={points:n.getCursorPoints()},f=Kr;var v=e.key||"_recharts-cursor",m=ty({stroke:"#ccc",pointerEvents:"none"},c,{},l,{},gn(e.props.cursor),{payload:u,key:v,className:"recharts-tooltip-cursor"});return Object(o.isValidElement)(e.props.cursor)?Object(o.cloneElement)(e.props.cursor,m):Object(o.createElement)(f,m)},n.renderPolarAxis=function(e,t,r){var i=e.type.axisType,a=n.state["".concat(i,"Map")][e.props["".concat(i,"Id")]];return Object(o.cloneElement)(e,ty({},a,{className:i,key:e.key||"".concat(t,"-").concat(r),ticks:hf(a,!0)}))},n.renderXAxis=function(e,t,r){var o=n.state.xAxisMap[e.props.xAxisId];return n.renderAxis(o,e,t,r)},n.renderYAxis=function(e,t,r){var o=n.state.yAxisMap[e.props.yAxisId];return n.renderAxis(o,e,t,r)},n.renderGrid=function(e){var t=n.state,r=t.xAxisMap,i=t.yAxisMap,a=t.offset,u=n.props,c=u.width,l=u.height,s=Wt(r),f=Rp()(i,(function(e){return Ip()(e.domain,Number.isFinite)}))||Wt(i),p=e.props||{};return Object(o.cloneElement)(e,{key:e.key||"grid",x:Lt(p.x)?p.x:a.left,y:Lt(p.y)?p.y:a.top,width:Lt(p.width)?p.width:a.width,height:Lt(p.height)?p.height:a.height,xAxis:s,yAxis:f,offset:a,chartWidth:c,chartHeight:l,verticalCoordinatesGenerator:p.verticalCoordinatesGenerator||n.verticalCoordinatesGenerator,horizontalCoordinatesGenerator:p.horizontalCoordinatesGenerator||n.horizontalCoordinatesGenerator})},n.renderPolarGrid=function(e){var t=n.state,r=t.radiusAxisMap,i=t.angleAxisMap,a=Wt(r),u=Wt(i),c=u.cx,l=u.cy,s=u.innerRadius,f=u.outerRadius;return Object(o.cloneElement)(e,{polarAngles:hf(u,!0).map((function(e){return e.coordinate})),polarRadius:hf(a,!0).map((function(e){return e.coordinate})),cx:c,cy:l,innerRadius:s,outerRadius:f,key:e.key||"polar-grid"})},n.renderBrush=function(e){var t=n.props,r=t.margin,i=t.data,a=n.state,u=a.offset,c=a.dataStartIndex,l=a.dataEndIndex,s=a.updateId;return Object(o.cloneElement)(e,{key:e.key||"_recharts-brush",onChange:df(n.handleBrushChange,null,e.props.onChange),data:i,x:Lt(e.props.x)?e.props.x:u.left,y:Lt(e.props.y)?e.props.y:u.top+u.height+u.brushBottom-(r.bottom||0),width:Lt(e.props.width)?e.props.width:u.width,startIndex:c,endIndex:l,updateId:"brush-".concat(s)})},n.renderReferenceElement=function(e,t,r){if(!e)return null;var i=iy(n).clipPathId,a=n.state,u=a.xAxisMap,c=a.yAxisMap,l=a.offset,s=e.props,f=s.xAxisId,p=s.yAxisId;return Object(o.cloneElement)(e,{key:e.key||"".concat(t,"-").concat(r),xAxis:u[f],yAxis:c[p],viewBox:{x:l.left,y:l.top,width:l.width,height:l.height},clipPathId:i})},n.renderGraphicChild=function(e,t,r){var i=n.filterFormatItem(e,t,r);if(!i)return null;var a=Object(o.cloneElement)(e,i.props),u=n.state,c=u.isTooltipActive,l=u.tooltipAxis,s=u.activeTooltipIndex,f=u.activeLabel,p=n.props.children,h=mn(p,Vn),d=i.props,y=d.points,v=d.isRange,m=d.baseLine,g=i.item.props,b=g.activeDot;if(!g.hide&&c&&h&&b&&s>=0){var x,w;if(l.dataKey&&!l.allowDuplicatedCategory){var O="function"==typeof l.dataKey?function(e){return l.dataKey(e.payload)}:"payload.".concat(l.dataKey);x=Ht(y,O,f),w=v&&m&&Ht(m,O,f)}else x=y[s],w=v&&m&&m[s];if(!le()(x))return[a].concat(Jd(n.renderActivePoints({item:i,activePoint:x,basePoint:w,childIndex:s,isRange:v})))}return v?[a,null,null]:[a,null]},n.renderCustomized=function(e){return Object(o.cloneElement)(e,ty({},n.props,{},n.state))};var i=n.constructor.createDefaultState(e);return n.state=ty({},i,{updateId:0},n.updateStateOfAxisMapsOffsetAndStackGroups(ty({props:e},i,{updateId:0}))),n.uniqueChartId=le()(e.id)?Ut("recharts"):e.id,n.clipPathId="".concat(n.uniqueChartId,"-clip"),e.throttleDelay&&(n.triggeredAfterMouseMove=Up()(n.triggeredAfterMouseMove,e.throttleDelay)),n}var s,f,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ay(e,t)}(r,e),s=r,p=[{key:"getAxisNameByLayout",value:function(e){return"horizontal"===e?{numericAxisName:"yAxis",cateAxisName:"xAxis"}:"vertical"===e?{numericAxisName:"xAxis",cateAxisName:"yAxis"}:"centric"===e?{numericAxisName:"radiusAxis",cateAxisName:"angleAxis"}:{numericAxisName:"angleAxis",cateAxisName:"radiusAxis"}}},{key:"renderActiveDot",value:function(e,t){var n;return n=Object(o.isValidElement)(e)?Object(o.cloneElement)(e,t):fe()(e)?e(t):i.a.createElement(oo,t),i.a.createElement(lo,{className:"recharts-active-dot",key:t.key},n)}}],(f=[{key:"componentDidMount",value:function(){le()(this.props.syncId)||this.addListener()}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props,r=n.data,o=n.children,i=n.width,a=n.height,u=n.layout,c=n.stackOffset,l=n.margin,s=this.state.updateId;if(e.data===r&&e.width===i&&e.height===a&&e.layout===u&&e.stackOffset===c&&un(e.margin,l)){if(!_n(e.children,o)){var f=le()(e.data)?s+1:s;this.setState((function(n){return ty({updateId:f},t.updateStateOfAxisMapsOffsetAndStackGroups(ty({props:e},n,{updateId:f})))}))}}else{var p=this.constructor.createDefaultState(e);this.setState(ty({},p,{updateId:s+1},this.updateStateOfAxisMapsOffsetAndStackGroups(ty({props:e},p,{updateId:s+1}))))}le()(this.props.syncId)&&!le()(e.syncId)&&this.addListener(),!le()(this.props.syncId)&&le()(e.syncId)&&this.removeListener()}},{key:"componentWillUnmount",value:function(){le()(this.props.syncId)||this.removeListener(),"function"==typeof this.triggeredAfterMouseMove.cancel&&this.triggeredAfterMouseMove.cancel()}},{key:"getAxisMap",value:function(e,t){var n=t.axisType,r=void 0===n?"xAxis":n,o=t.AxisComp,i=t.graphicalItems,a=t.stackGroups,u=t.dataStartIndex,c=t.dataEndIndex,l=e.children,s="".concat(r,"Id"),f=vn(l,o),p={};return f&&f.length?p=this.getAxisMapByAxes(e,{axes:f,graphicalItems:i,axisType:r,axisIdKey:s,stackGroups:a,dataStartIndex:u,dataEndIndex:c}):i&&i.length&&(p=this.getAxisMapByItems(e,{Axis:o,graphicalItems:i,axisType:r,axisIdKey:s,stackGroups:a,dataStartIndex:u,dataEndIndex:c})),p}},{key:"getAxisMapByAxes",value:function(e,t){var n=this,r=t.axes,o=t.graphicalItems,i=t.axisType,a=t.axisIdKey,u=t.stackGroups,c=t.dataStartIndex,l=t.dataEndIndex,s=e.layout,f=e.children,p=e.stackOffset,h=ff(s,i);return r.reduce((function(t,r){var d=r.props,y=d.type,v=d.dataKey,m=d.allowDataOverflow,g=d.allowDuplicatedCategory,b=d.scale,x=d.ticks,w=r.props[a],O=n.constructor.getDisplayedData(e,{graphicalItems:o.filter((function(e){return e.props[a]===w})),dataStartIndex:c,dataEndIndex:l}),k=O.length;if(!t[w]){var E,S,T;if(v){if(E=af(O,v,y),"category"===y&&h){var _=function(e){if(!Pt()(e))return!1;for(var t=e.length,n={},r=0;r<t;r++){if(n[e[r]])return!0;n[e[r]]=!0}return!1}(E);g&&_?(S=E,E=zp()(0,k)):g||(E=Tf(r.props.domain,E,r).reduce((function(e,t){return e.indexOf(t)>=0?e:[].concat(Jd(e),[t])}),[]))}else if("category"===y)E=g?E.filter((function(e){return""!==e&&!le()(e)})):Tf(r.props.domain,E,r).reduce((function(e,t){return e.indexOf(t)>=0||""===t||le()(t)?e:[].concat(Jd(e),[t])}),[]);else if("number"===y){var P=function(e,t,n,r){var o=t.map((function(t){return lf(e,t,n,r)})).filter((function(e){return!le()(e)}));return o&&o.length?o.reduce((function(e,t){return[Math.min(e[0],t[0]),Math.max(e[1],t[1])]}),[1/0,-1/0]):null}(O,o.filter((function(e){return e.props[a]===w&&!e.props.hide})),v,i);P&&(E=P)}!h||"number"!==y&&"auto"===b||(T=af(O,v,"category"))}else E=h?zp()(0,k):u&&u[w]&&u[w].hasStack&&"number"===y?"expand"===p?[0,1]:wf(u[w].stackGroups,c,l):sf(O,o.filter((function(e){return e.props[a]===w&&!e.props.hide})),y,!0);return"number"===y&&(E=qd(f,E,w,i,x),r.props.domain&&(E=Ef(r.props.domain,E,m))),ty({},t,ny({},w,ty({},r.props,{axisType:i,domain:E,categoricalDomain:T,duplicateDomain:S,originalDomain:r.props.domain,isCategorial:h,layout:s})))}return t}),{})}},{key:"getAxisMapByItems",value:function(e,t){var n=t.graphicalItems,r=t.Axis,o=t.axisType,i=t.axisIdKey,a=t.stackGroups,u=t.dataStartIndex,c=t.dataEndIndex,l=e.layout,s=e.children,f=this.constructor.getDisplayedData(e,{graphicalItems:n,dataStartIndex:u,dataEndIndex:c}),p=f.length,h=ff(l,o),d=-1;return n.reduce((function(e,t){var y,v=t.props[i];return e[v]?e:(d++,h?y=zp()(0,p):a&&a[v]&&a[v].hasStack?(y=wf(a[v].stackGroups,u,c),y=qd(s,y,v,o)):(y=Ef(r.defaultProps.domain,sf(f,n.filter((function(e){return e.props[i]===v&&!e.props.hide})),"number"),r.defaultProps.allowDataOverflow),y=qd(s,y,v,o)),ty({},e,ny({},v,ty({axisType:o},r.defaultProps,{hide:!0,orientation:uy[o]&&uy[o][d%2],domain:y,originalDomain:r.defaultProps.domain,isCategorial:h,layout:l}))))}),{})}},{key:"getActiveCoordinate",value:function(e,t,n){var r=this.props.layout,o=e.find((function(e){return e&&e.index===t}));if(o){if("horizontal"===r)return{x:o.coordinate,y:n.y};if("vertical"===r)return{x:n.x,y:o.coordinate};if("centric"===r){var i=o.coordinate,a=n.radius;return ty({},n,{},Cf(n.cx,n.cy,a,i),{angle:i,radius:a})}var u=o.coordinate,c=n.angle;return ty({},n,{},Cf(n.cx,n.cy,u,c),{angle:c,radius:u})}return cy}},{key:"getMouseInfo",value:function(e){if(!this.container)return null;var t,n,r,o=function(e,t){return{chartX:Math.round(e.pageX-t.left),chartY:Math.round(e.pageY-t.top)}}(e,(t=this.container,n=t.ownerDocument.documentElement,r={top:0,left:0},void 0!==t.getBoundingClientRect&&(r=t.getBoundingClientRect()),{top:r.top+window.pageYOffset-n.clientTop,left:r.left+window.pageXOffset-n.clientLeft})),i=this.inRange(o.chartX,o.chartY);if(!i)return null;var u=this.state,c=u.xAxisMap,l=u.yAxisMap;if("axis"!==a&&c&&l){var s=Wt(c).scale,f=Wt(l).scale;return ty({},o,{xValue:s&&s.invert?s.invert(o.chartX):null,yValue:f&&f.invert?f.invert(o.chartY):null})}var p=this.state,h=p.orderedTooltipTicks,d=p.tooltipAxis,y=p.tooltipTicks,v=function(e,t,n,r){var o=-1,i=t.length;if(i>1){if(r&&"angleAxis"===r.axisType&&Math.abs(Math.abs(r.range[1]-r.range[0])-360)<=1e-6)for(var a=r.range,u=0;u<i;u++){var c=u>0?n[u-1].coordinate:n[i-1].coordinate,l=n[u].coordinate,s=u>=i-1?n[0].coordinate:n[u+1].coordinate,f=void 0;if(Dt(l-c)!==Dt(s-l)){var p=[];if(Dt(s-l)===Dt(a[1]-a[0])){f=s;var h=l+a[1]-a[0];p[0]=Math.min(h,(h+c)/2),p[1]=Math.max(h,(h+c)/2)}else{f=c;var d=s+a[1]-a[0];p[0]=Math.min(l,(d+l)/2),p[1]=Math.max(l,(d+l)/2)}var y=[Math.min(l,(f+l)/2),Math.max(l,(f+l)/2)];if(e>y[0]&&e<=y[1]||e>=p[0]&&e<=p[1]){o=n[u].index;break}}else{var v=Math.min(c,s),m=Math.max(c,s);if(e>(v+l)/2&&e<=(m+l)/2){o=n[u].index;break}}}else for(var g=0;g<i;g++)if(0===g&&e<=(t[g].coordinate+t[g+1].coordinate)/2||g>0&&g<i-1&&e>(t[g].coordinate+t[g-1].coordinate)/2&&e<=(t[g].coordinate+t[g+1].coordinate)/2||g===i-1&&e>(t[g].coordinate+t[g-1].coordinate)/2){o=t[g].index;break}}else o=0;return o}(this.calculateTooltipPos(i),h,y,d);if(v>=0&&y){var m=y[v]&&y[v].value;return ty({},o,{activeTooltipIndex:v,activeLabel:m,activePayload:this.getTooltipContent(v,m),activeCoordinate:this.getActiveCoordinate(h,v,i)})}return null}},{key:"getTooltipContent",value:function(e,t){var n=this.state,r=n.graphicalItems,o=n.tooltipAxis,i=this.constructor.getDisplayedData(this.props,this.state);return e<0||!r||!r.length||e>=i.length?null:r.reduce((function(n,r){if(r.props.hide)return n;var a,u=r.props,c=u.dataKey,l=u.name,s=u.unit,f=u.formatter,p=u.data,h=u.tooltipType;return(a=o.dataKey&&!o.allowDuplicatedCategory?Ht(p||i,o.dataKey,t):p&&p[e]||i[e])?[].concat(Jd(n),[ty({},gn(r),{dataKey:c,unit:s,formatter:f,name:l||c,color:uf(r),value:of(a,c),type:h,payload:a})]):n}),[])}},{key:"getFormatItems",value:function(e,t){var n=this,r=t.graphicalItems,i=t.stackGroups,a=t.offset,c=t.updateId,l=t.dataStartIndex,s=t.dataEndIndex,f=e.barSize,p=e.layout,h=e.barGap,d=e.barCategoryGap,y=e.maxBarSize,v=this.constructor.getAxisNameByLayout(p),m=v.numericAxisName,g=v.cateAxisName,b=this.constructor.hasBar(r),x=b&&function(e){var t=e.barSize,n=e.stackGroups,r=void 0===n?{}:n;if(!r)return{};for(var o={},i=Object.keys(r),a=0,u=i.length;a<u;a++)for(var c=r[i[a]].stackGroups,l=Object.keys(c),s=0,f=l.length;s<f;s++){var p=c[l[s]],h=p.items,d=p.cateAxisId,y=h.filter((function(e){return yn(e.type).indexOf("Bar")>=0}));if(y&&y.length){var v=y[0].props.barSize,m=y[0].props[d];o[m]||(o[m]=[]),o[m].push({item:y[0],stackList:y.slice(1),barSize:le()(v)?t:v})}}return o}({barSize:f,stackGroups:i}),w=[];return r.forEach((function(r,f){var v,O,k,E,S=n.constructor.getDisplayedData(e,{dataStartIndex:l,dataEndIndex:s},r),T=r.props,_=T.dataKey,P=T.maxBarSize,M=r.props["".concat(m,"Id")],j=r.props["".concat(g,"Id")],A=u.reduce((function(e,n){var o,i=t["".concat(n.axisType,"Map")],a=r.props["".concat(n.axisType,"Id")],u=i&&i[a];return ty({},e,(ny(o={},n.axisType,u),ny(o,"".concat(n.axisType,"Ticks"),hf(u)),o))}),{}),C=A[g],N=A["".concat(g,"Ticks")],I=i&&i[M]&&i[M].hasStack&&function(e,t){var n=e.props.stackId;if(zt(n)){var r=t[n];if(r&&r.items.length){for(var o=-1,i=0,a=r.items.length;i<a;i++)if(r.items[i]===e){o=i;break}return o>=0?r.stackedData[o]:null}}return null}(r,i[M].stackGroups),D=Sf(C,N),R=le()(P)?y:P,L=b&&function(e){var t=e.barGap,n=e.barCategoryGap,r=e.bandSize,o=e.sizeList,i=void 0===o?[]:o,a=e.maxBarSize,u=i.length;if(u<1)return null;var c,l=Bt(t,r,0,!0);if(i[0].barSize===+i[0].barSize){var s=!1,f=r/u,p=i.reduce((function(e,t){return e+t.barSize||0}),0);(p+=(u-1)*l)>=r&&(p-=(u-1)*l,l=0),p>=r&&f>0&&(s=!0,p=u*(f*=.9));var h={offset:((r-p)/2>>0)-l,size:0};c=i.reduce((function(e,t){var n=[].concat(ef(e),[{item:t.item,position:{offset:h.offset+h.size+l,size:s?f:t.barSize}}]);return h=n[n.length-1].position,t.stackList&&t.stackList.length&&t.stackList.forEach((function(e){n.push({item:e,position:h})})),n}),[])}else{var d=Bt(n,r,0,!0);r-2*d-(u-1)*l<=0&&(l=0);var y=(r-2*d-(u-1)*l)/u;y>1&&(y>>=0);var v=a===+a?Math.min(y,a):y;c=i.reduce((function(e,t,n){var r=[].concat(ef(e),[{item:t.item,position:{offset:d+(y+l)*n+(y-v)/2,size:v}}]);return t.stackList&&t.stackList.length&&t.stackList.forEach((function(e){r.push({item:e,position:r[r.length-1].position})})),r}),[])}return c}({barGap:h,barCategoryGap:d,bandSize:D,sizeList:x[j],maxBarSize:R}),z=r&&r.type&&r.type.getComposedData;z&&w.push({props:ty({},z(ty({},A,{displayedData:S,props:e,dataKey:_,item:r,bandSize:D,barPosition:L,offset:a,stackedData:I,layout:p,dataStartIndex:l,dataEndIndex:s,onItemMouseLeave:df(n.handleItemMouseLeave,null,r.props.onMouseLeave),onItemMouseEnter:df(n.handleItemMouseEnter,null,r.props.onMouseEnter)})),(v={key:r.key||"item-".concat(f)},ny(v,m,A[m]),ny(v,g,A[g]),ny(v,"animationId",c),v)),childIndex:(O=r,k=e.children,E=-1,o.Children.forEach(k,(function(e,t){e===O&&(E=t)})),E),item:r})})),w}},{key:"getCursorRectangle",value:function(){var e=this.props.layout,t=this.state,n=t.activeCoordinate,r=t.offset,o=t.tooltipAxisBandSize,i=o/2;return{stroke:"none",fill:"#ccc",x:"horizontal"===e?n.x-i:r.left+.5,y:"horizontal"===e?r.top+.5:n.y-i,width:"horizontal"===e?o:r.width-1,height:"horizontal"===e?r.height-1:o}}},{key:"getCursorPoints",value:function(){var e,t,n,r,o=this.props.layout,i=this.state,a=i.activeCoordinate,u=i.offset;if("horizontal"===o)n=e=a.x,t=u.top,r=u.top+u.height;else if("vertical"===o)r=t=a.y,e=u.left,n=u.left+u.width;else if(!le()(a.cx)||!le()(a.cy)){if("centric"!==o){var c=a.cx,l=a.cy,s=a.radius,f=a.startAngle,p=a.endAngle;return{points:[Cf(c,l,s,f),Cf(c,l,s,p)],cx:c,cy:l,radius:s,startAngle:f,endAngle:p}}var h=a.cx,d=a.cy,y=a.innerRadius,v=a.outerRadius,m=a.angle,g=Cf(h,d,y,m),b=Cf(h,d,v,m);e=g.x,t=g.y,n=b.x,r=b.y}return[{x:e,y:t},{x:n,y:r}]}},{key:"calculateTooltipPos",value:function(e){var t=this.props.layout;return"horizontal"===t?e.x:"vertical"===t?e.y:"centric"===t?e.angle:e.radius}},{key:"inRange",value:function(e,t){var n=this.props.layout;if("horizontal"===n||"vertical"===n){var r=this.state.offset;return e>=r.left&&e<=r.left+r.width&&t>=r.top&&t<=r.top+r.height?{x:e,y:t}:null}var o=this.state,i=o.angleAxisMap,a=o.radiusAxisMap;if(i&&a){var u=Wt(i);return Df({x:e,y:t},u)}return null}},{key:"parseEventsOfWrapper",value:function(){var e=this.props.children,t=mn(e,Vn)&&"axis"===a?{onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onMouseLeave:this.handleMouseLeave,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd}:{};return ty({},xn(this.props,this.handleOuterEvent),{},t)}},{key:"updateStateOfAxisMapsOffsetAndStackGroups",value:function(e){var r=this,o=e.props,i=e.dataStartIndex,a=e.dataEndIndex,c=e.updateId;if(!kn({props:o}))return null;var s=o.children,f=o.layout,p=o.stackOffset,h=o.data,d=o.reverseStackOrder,y=this.constructor.getAxisNameByLayout(f),v=y.numericAxisName,m=y.cateAxisName,g=vn(s,n),b=function(e,t,n,r,o,i){if(!e)return null;var a=(i?t.reverse():t).reduce((function(e,t){var o=t.props,i=o.stackId;if(o.hide)return e;var a=t.props[n],u=e[a]||{hasStack:!1,stackGroups:{}};if(zt(i)){var c=u.stackGroups[i]||{numericAxisId:n,cateAxisId:r,items:[]};c.items.push(t),u.hasStack=!0,u.stackGroups[i]=c}else u.stackGroups[Ut("_stackId_")]={numericAxisId:n,cateAxisId:r,items:[t]};return nf({},e,rf({},a,u))}),{});return Object.keys(a).reduce((function(t,i){var u=a[i];return u.hasStack&&(u.stackGroups=Object.keys(u.stackGroups).reduce((function(t,i){var a=u.stackGroups[i];return nf({},t,rf({},i,{numericAxisId:n,cateAxisId:r,items:a.items,stackedData:gf(e,a.items,o)}))}),{})),nf({},t,rf({},i,u))}),{})}(h,g,"".concat(v,"Id"),"".concat(m,"Id"),p,d),x=u.reduce((function(e,t){return ty({},e,ny({},"".concat(t.axisType,"Map"),r.getAxisMap(o,ty({},t,{graphicalItems:g,stackGroups:t.axisType===v&&b,dataStartIndex:i,dataEndIndex:a}))))}),{}),w=this.calculateOffset(ty({},x,{props:o,graphicalItems:g}));Object.keys(x).forEach((function(e){x[e]=l(o,x[e],w,e.replace("Map",""),t)}));var O=x["".concat(m,"Map")],k=this.tooltipTicksGenerator(O),E=this.getFormatItems(o,ty({},x,{dataStartIndex:i,dataEndIndex:a,updateId:c,graphicalItems:g,stackGroups:b,offset:w}));return ty({formatedGraphicalItems:E,graphicalItems:g,offset:w,stackGroups:b},k,{},x)}},{key:"addListener",value:function(){Xd.on(Kd,this.handleReceiveSyncEvent),Xd.setMaxListeners&&Xd._maxListeners&&Xd.setMaxListeners(Xd._maxListeners+1)}},{key:"removeListener",value:function(){Xd.removeListener(Kd,this.handleReceiveSyncEvent),Xd.setMaxListeners&&Xd._maxListeners&&Xd.setMaxListeners(Xd._maxListeners-1)}},{key:"calculateOffset",value:function(e){var t=e.props,n=e.graphicalItems,r=e.xAxisMap,o=void 0===r?{}:r,i=e.yAxisMap,a=void 0===i?{}:i,u=t.width,c=t.height,l=t.children,s=t.margin||{},f=mn(l,Xh),p=mn(l,Js),h=Object.keys(a).reduce((function(e,t){var n=a[t],r=n.orientation;return n.mirror||n.hide?e:ty({},e,ny({},r,e[r]+n.width))}),{left:s.left||0,right:s.right||0}),d=Object.keys(o).reduce((function(e,t){var n=o[t],r=n.orientation;return n.mirror||n.hide?e:ty({},e,ny({},r,e[r]+n.height))}),{top:s.top||0,bottom:s.bottom||0}),y=ty({},d,{},h),v=y.bottom;return f&&(y.bottom+=f.props.height||Xh.defaultProps.height),p&&this.legendInstance&&(y=function(e,t,n,r){var o=n.children,i=n.width,a=n.height,u=n.margin,c=i-(u.left||0)-(u.right||0),l=a-(u.top||0)-(u.bottom||0),s=cf({children:o,items:t,legendWidth:c,legendHeight:l}),f=e;if(s){var p=r||{},h=s.align,d=s.verticalAlign,y=s.layout;("vertical"===y||"horizontal"===y&&"center"===d)&&Lt(e[h])&&(f=nf({},e,rf({},h,f[h]+(p.width||0)))),("horizontal"===y||"vertical"===y&&"center"===h)&&Lt(e[d])&&(f=nf({},e,rf({},d,f[d]+(p.height||0))))}return f}(y,n,t,this.legendInstance.getBBox())),ty({brushBottom:v},y,{width:u-y.left-y.right,height:c-y.top-y.bottom})}},{key:"triggerSyncEvent",value:function(e){var t=this.props.syncId;le()(t)||Xd.emit(Kd,t,this.uniqueChartId,e)}},{key:"filterFormatItem",value:function(e,t,n){for(var r=this.state.formatedGraphicalItems,o=0,i=r.length;o<i;o++){var a=r[o];if(a.item===e||a.props.key===e.key||t===yn(a.item.type)&&n===a.childIndex)return a}return null}},{key:"renderAxis",value:function(e,t,n,r){var o=this.props,a=o.width,u=o.height;return i.a.createElement(Dh,Zd({},e,{className:"recharts-".concat(e.axisType," ").concat(e.axisType),key:t.key||"".concat(n,"-").concat(r),viewBox:{x:0,y:0,width:a,height:u},ticksGenerator:this.axesTicksGenerator}))}},{key:"renderLegend",value:function(){var e=this,t=this.state.formatedGraphicalItems,n=this.props,r=n.children,i=n.width,a=n.height,u=this.props.margin||{},l=i-(u.left||0)-(u.right||0),s=a-(u.top||0)-(u.bottom||0),f=cf({children:r,formatedGraphicalItems:t,legendWidth:l,legendHeight:s,legendContent:c});if(!f)return null;var p=f.item,h=Qd(f,["item"]);return Object(o.cloneElement)(p,ty({},h,{chartWidth:i,chartHeight:a,margin:u,ref:function(t){e.legendInstance=t},onBBoxUpdate:this.handleLegendBBoxUpdate}))}},{key:"renderTooltip",value:function(){var e=this.props.children,t=mn(e,Vn);if(!t)return null;var n=this.state,r=n.isTooltipActive,i=n.activeCoordinate,a=n.activePayload,u=n.activeLabel,c=n.offset;return Object(o.cloneElement)(t,{viewBox:ty({},c,{x:c.left,y:c.top}),active:r,label:u,payload:r?a:[],coordinate:i})}},{key:"renderActivePoints",value:function(e){var t=e.item,n=e.activePoint,r=e.basePoint,o=e.childIndex,i=e.isRange,a=[],u=t.props.key,c=t.item.props,l=c.activeDot,s=ty({index:o,dataKey:c.dataKey,cx:n.x,cy:n.y,r:4,fill:uf(t.item),strokeWidth:2,stroke:"#fff",payload:n.payload,value:n.value,key:"".concat(u,"-activePoint-").concat(o)},gn(l),{},xn(l));return a.push(this.constructor.renderActiveDot(l,s,o)),r?a.push(this.constructor.renderActiveDot(l,ty({},s,{cx:r.x,cy:r.y,key:"".concat(u,"-basePoint-").concat(o)}),o)):i&&a.push(null),a}},{key:"renderClipPath",value:function(){var e=this.clipPathId,t=this.state.offset,n=t.left,r=t.top,o=t.height,a=t.width;return i.a.createElement("defs",null,i.a.createElement("clipPath",{id:e},i.a.createElement("rect",{x:n,y:r,height:o,width:a})))}},{key:"render",value:function(){var e=this;if(!kn(this))return null;var t=this.props,n=t.children,r=t.className,o=t.width,a=t.height,u=t.style,c=t.compact,l=Qd(t,["children","className","width","height","style","compact"]),s=gn(l),f={CartesianGrid:{handler:this.renderGrid,once:!0},ReferenceArea:{handler:this.renderReferenceElement},ReferenceLine:{handler:this.renderReferenceElement},ReferenceDot:{handler:this.renderReferenceElement},XAxis:{handler:this.renderXAxis},YAxis:{handler:this.renderYAxis},Brush:{handler:this.renderBrush,once:!0},Bar:{handler:this.renderGraphicChild},Line:{handler:this.renderGraphicChild},Area:{handler:this.renderGraphicChild},Radar:{handler:this.renderGraphicChild},RadialBar:{handler:this.renderGraphicChild},Scatter:{handler:this.renderGraphicChild},Pie:{handler:this.renderGraphicChild},Funnel:{handler:this.renderGraphicChild},Tooltip:{handler:this.renderCursor,once:!0},PolarGrid:{handler:this.renderPolarGrid,once:!0},PolarAngleAxis:{handler:this.renderPolarAxis},PolarRadiusAxis:{handler:this.renderPolarAxis},Customized:{handler:this.renderCustomized}};if(c)return i.a.createElement(Ql,Zd({},s,{width:o,height:a}),this.renderClipPath(),Pn(n,f));var p=this.parseEventsOfWrapper();return i.a.createElement("div",Zd({className:Q()("recharts-wrapper",r),style:ty({position:"relative",cursor:"default",width:o,height:a},u)},p,{ref:function(t){e.container=t}}),i.a.createElement(Ql,Zd({},s,{width:o,height:a}),this.renderClipPath(),Pn(n,f)),this.renderLegend(),this.renderTooltip())}}])&&ry(s.prototype,f),p&&ry(s,p),r}(o.Component);return h.displayName=t,h.propTypes=ty({syncId:s.a.oneOfType([s.a.string,s.a.number]),compact:s.a.bool,width:s.a.number,height:s.a.number,data:s.a.arrayOf(s.a.object),layout:s.a.oneOf(["horizontal","vertical"]),stackOffset:s.a.oneOf(["sign","expand","none","wiggle","silhouette"]),throttleDelay:s.a.number,margin:s.a.shape({top:s.a.number,right:s.a.number,bottom:s.a.number,left:s.a.number}),barCategoryGap:s.a.oneOfType([s.a.number,s.a.string]),barGap:s.a.oneOfType([s.a.number,s.a.string]),barSize:s.a.oneOfType([s.a.number,s.a.string]),maxBarSize:s.a.number,style:s.a.object,className:s.a.string,children:s.a.oneOfType([s.a.arrayOf(s.a.node),s.a.node]),defaultShowTooltip:s.a.bool,onClick:s.a.func,onMouseLeave:s.a.func,onMouseEnter:s.a.func,onMouseMove:s.a.func,onMouseDown:s.a.func,onMouseUp:s.a.func,reverseStackOrder:s.a.bool,id:s.a.string},p),h.defaultProps=ty({layout:"horizontal",stackOffset:"none",barCategoryGap:"10%",barGap:4,margin:{top:5,right:5,bottom:5,left:5},reverseStackOrder:!1},f),h.createDefaultState=function(e){var t=e.children,n=e.defaultShowTooltip,r=mn(t,Xh);return{chartX:0,chartY:0,dataStartIndex:r&&r.props&&r.props.startIndex||0,dataEndIndex:r&&r.props&&r.props.endIndex||e.data&&e.data.length-1||0,activeTooltipIndex:-1,isTooltipActive:!le()(n)&&n}},h.hasBar=function(e){return!(!e||!e.length)&&e.some((function(e){var t=yn(e&&e.type);return t&&t.indexOf("Bar")>=0}))},h.getDisplayedData=function(e,t,n){var r=t.graphicalItems,o=t.dataStartIndex,i=t.dataEndIndex,a=(r||[]).reduce((function(e,t){var n=t.props.data;return n&&n.length?[].concat(Jd(e),Jd(n)):e}),[]);if(a&&a.length>0)return a;if(n&&n.props&&n.props.data&&n.props.data.length>0)return n.props.data;var u=e.data;return u&&u.length&&Lt(o)&&Lt(i)?u.slice(o,i+1):[]},h}({chartName:"AreaChart",GraphicalChild:vp,axisComponents:[{axisType:"xAxis",AxisComp:Ep},{axisType:"yAxis",AxisComp:Cp}],formatAxisMap:function(e,t,n,r,o){var i=e.width,a=e.height,u=e.layout,c=Object.keys(t),l={left:n.left,leftMirror:n.left,right:i-n.right,rightMirror:i-n.right,top:n.top,topMirror:n.top,bottom:a-n.bottom,bottomMirror:a-n.bottom};return c.reduce((function(e,i){var a,c,s,f,p=t[i],h=p.orientation,d=p.domain,y=p.padding,v=void 0===y?{}:y,m=p.mirror,g=p.reversed,b="".concat(h).concat(m?"Mirror":"");a="xAxis"===r?[n.left+(v.left||0),n.left+n.width-(v.right||0)]:"yAxis"===r?"horizontal"===u?[n.top+n.height-(v.bottom||0),n.top+(v.top||0)]:[n.top+(v.top||0),n.top+n.height-(v.bottom||0)]:p.range,g&&(a=[a[1],a[0]]);var x=yf(p,o),w=x.scale,O=x.realScaleType;w.domain(d).range(a),vf(w);var k=bf(w,nd({},p,{realScaleType:O}));"xAxis"===r?(f="top"===h&&!m||"bottom"===h&&m,c=n.left,s=l[b]-f*p.height):"yAxis"===r&&(f="left"===h&&!m||"right"===h&&m,c=l[b]-f*p.width,s=n.top);var E=nd({},p,{},k,{realScaleType:O,x:c,y:s,scale:w,width:"xAxis"===r?n.width:p.width,height:"yAxis"===r?n.height:p.height});return E.bandSize=Sf(E,k),p.hide||"xAxis"!==r?p.hide||(l[b]+=(f?-1:1)*E.width):l[b]+=(f?-1:1)*E.height,nd({},e,rd({},i,E))}),{})}});function sy(e){return(sy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fy(e){return function(e){if(Array.isArray(e))return py(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return py(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return py(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function py(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function hy(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dy(e,t){return(dy=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function yy(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=my(e);if(t){var o=my(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return vy(this,n)}}function vy(e,t){return!t||"object"!==sy(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function my(e){return(my=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var gy=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&dy(e,t)}(a,e);var t,n,r,o=yy(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this,e)).state={data:[232,424,55,342,432,212]},t}return t=a,(n=[{key:"dataSaveHandle",value:function(e){console.log(e);var t=this.state.data,n=[].concat(fy(t),[e]);this.setState({data:n})}},{key:"chartData",value:function(e){return e.map((function(e,t){return{name:t+1,value:e}}))}},{key:"render",value:function(){var e=this,t=this.state.data,n=this.chartData(t);return i.a.createElement("section",{className:"main__section"},i.a.createElement("h1",{className:"title"},"반응속도 테스트"),i.a.createElement(ae,{onSave:function(t){return e.dataSaveHandle(t)}}),i.a.createElement(ly,{width:800,height:300,data:n,style:{marginTop:"10px"},margin:{left:0,right:10,top:20}},i.a.createElement("defs",null,i.a.createElement("linearGradient",{id:"colorUv",x1:"0",y1:"0",x2:"0",y2:"1"},i.a.createElement("stop",{offset:"5%",stopColor:"#71d2f8",stopOpacity:.6}),i.a.createElement("stop",{offset:"95%",stopColor:"#8884d8",stopOpacity:0}))),i.a.createElement(vp,{type:"monotone",dataKey:"value",stroke:"#71d2f8",fillOpacity:1,fill:"url(#colorUv)"}),i.a.createElement(nr,{stroke:"#ccc",strokeDasharray:"1 2"}),i.a.createElement(Ep,{dataKey:"name"}),i.a.createElement(Cp,null),i.a.createElement(Vn,null)))}}])&&hy(t.prototype,n),r&&hy(t,r),a}(o.Component),by=function(){return i.a.createElement("div",null,i.a.createElement(H,{exact:!0,path:"/",component:gy}))},xy=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=T(t.props),t}return Object(c.a)(t,e),t.prototype.render=function(){return i.a.createElement(U,{history:this.history,children:this.props.children})},t}(i.a.Component);i.a.Component;var wy=function(e,t){return"function"==typeof e?e(t):e},Oy=function(e,t){return"string"==typeof e?w(e,null,null,t):e},ky=function(e){return e},Ey=i.a.forwardRef;void 0===Ey&&(Ey=ky);var Sy=Ey((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,a=L(e,["innerRef","navigate","onClick"]),u=a.target,c=f({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=ky!==Ey&&t||n,i.a.createElement("a",c)}));var Ty=Ey((function(e,t){var n=e.component,r=void 0===n?Sy:n,o=e.replace,a=e.to,u=e.innerRef,c=L(e,["component","replace","to","innerRef"]);return i.a.createElement(F.Consumer,null,(function(e){e||y(!1);var n=e.history,l=Oy(wy(a,e.location),e.location),s=l?n.createHref(l):"",p=f({},c,{href:s,navigate:function(){var t=wy(a,e.location);(o?n.replace:n.push)(t)}});return ky!==Ey?p.ref=t||u:p.innerRef=u,i.a.createElement(r,p)}))})),_y=function(e){return e},Py=i.a.forwardRef;void 0===Py&&(Py=_y);var My=Py((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,a=void 0===o?"active":o,u=e.activeStyle,c=e.className,l=e.exact,s=e.isActive,p=e.location,h=e.sensitive,d=e.strict,v=e.style,m=e.to,g=e.innerRef,b=L(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return i.a.createElement(F.Consumer,null,(function(e){e||y(!1);var n=p||e.location,o=Oy(wy(m,n),n),x=o.pathname,w=x&&x.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),O=w?V(n.pathname,{path:w,exact:l,sensitive:h,strict:d}):null,k=!!(s?s(O,n):O),E=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,a):c,S=k?f({},v,{},u):v,T=f({"aria-current":k&&r||null,className:E,style:S,to:o},b);return _y!==Py?T.ref=t||g:T.innerRef=g,i.a.createElement(Ty,T)}))})),jy=(n(362),n(364),function(){return i.a.createElement("section",{className:"header"},i.a.createElement("div",{className:"header__container"},i.a.createElement(My,{to:"/",className:"logo"},i.a.createElement("div",{className:"text"},"Reaction TEST")),i.a.createElement("nav",{className:"nav"},i.a.createElement("ul",{className:"nav-list"}))))});function Ay(e){return(Ay="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Cy(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ny(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Iy(e,t){return(Iy=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Dy(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ly(e);if(t){var o=Ly(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ry(this,n)}}function Ry(e,t){return!t||"object"!==Ay(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ly(e){return(Ly=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var zy=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Iy(e,t)}(a,e);var t,n,r,o=Dy(a);function a(){return Cy(this,a),o.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){return i.a.createElement("div",{className:"wrap"},i.a.createElement(xy,null,i.a.createElement(jy,null),i.a.createElement("section",{className:"wrap__content"},i.a.createElement(by,null))))}}])&&Ny(t.prototype,n),r&&Ny(t,r),a}(o.Component);u.a.render(i.a.createElement(zy,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,